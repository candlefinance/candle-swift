// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.2 effective-5.10 (swiftlang-6.2.0.19.9 clang-1700.3.19.1)
// swift-module-flags: -target x86_64-apple-macos10.13 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -Onone -enable-experimental-feature DebugDescriptionMacro -enable-bare-slash-regex -module-name RealModule -package-name swift_numerics
// swift-module-flags-ignorable: -no-verify-emitted-module-interface -formal-cxx-interoperability-mode=off -interface-compiler-version 6.2
import Swift
import _Concurrency
import _NumericsShims
import _StringProcessing
import _SwiftConcurrencyShims
public protocol AlgebraicField : Swift.SignedNumeric where Self.Magnitude : RealModule.AlgebraicField {
  static func /= (a: inout Self, b: Self)
  static func / (a: Self, b: Self) -> Self
  #if compiler(>=5.3) && $NonescapableTypes
  var reciprocal: Self? { get }
  #endif
  static func _relaxedAdd(_ a: Self, _ b: Self) -> Self
  static func _relaxedMul(_ a: Self, _ b: Self) -> Self
}
extension RealModule.AlgebraicField {
  @_transparent public static func / (a: Self, b: Self) -> Self {
    var result = a
    result /= b
    return result
  }
  #if compiler(>=5.3) && $NonescapableTypes
  @_transparent public var reciprocal: Self? {
    @_transparent get {
    return nil
  }
  }
  #endif
  @_transparent public static func _relaxedAdd(_ a: Self, _ b: Self) -> Self {
    a + b
  }
  @_transparent public static func _relaxedMul(_ a: Self, _ b: Self) -> Self {
    a * b
  }
}
extension Swift.Numeric where Self.Magnitude : Swift.FloatingPoint {
  @inlinable @inline(__always) public func isApproximatelyEqual(to other: Self, relativeTolerance: Self.Magnitude = Magnitude.ulpOfOne.squareRoot(), norm: (Self) -> Self.Magnitude = \.magnitude) -> Swift.Bool {
    return isApproximatelyEqual(
      to: other,
      absoluteTolerance: relativeTolerance * Magnitude.leastNormalMagnitude,
      relativeTolerance: relativeTolerance,
      norm: norm
    )
  }
  @inlinable @inline(__always) public func isApproximatelyEqual(to other: Self, absoluteTolerance: Self.Magnitude, relativeTolerance: Self.Magnitude = 0) -> Swift.Bool {
    self.isApproximatelyEqual(
      to: other,
      absoluteTolerance: absoluteTolerance,
      relativeTolerance: relativeTolerance,
      norm: \.magnitude
    )
  }
}
extension Swift.AdditiveArithmetic {
  @inlinable public func isApproximatelyEqual<Magnitude>(to other: Self, absoluteTolerance: Magnitude, relativeTolerance: Magnitude = 0, norm: (Self) -> Magnitude) -> Swift.Bool where Magnitude : Swift.FloatingPoint {
    assert(
      absoluteTolerance >= 0 && absoluteTolerance.isFinite,
      "absoluteTolerance should be non-negative and finite, " +
      "but is \(absoluteTolerance)."
    )
    assert(
      relativeTolerance >= 0 && relativeTolerance <= 1,
      "relativeTolerance should be non-negative and <= 1, " +
      "but is \(relativeTolerance)."
    )
    if self == other { return true }
    let delta = norm(self - other)
    let scale = max(norm(self), norm(other))
    let bound = max(absoluteTolerance, scale*relativeTolerance)
    return delta.isFinite && delta <= bound
  }
}
public enum Augmented {
}
extension RealModule.Augmented {
  @_transparent public static func product<T>(_ a: T, _ b: T) -> (head: T, tail: T) where T : Swift.FloatingPoint {
    let head = a*b
     
     
     
    let tail = (-head).addingProduct(a, b)
    return (head, tail)
  }
  @_transparent public static func sum<T>(large a: T, small b: T) -> (head: T, tail: T) where T : Swift.FloatingPoint {
     
     
     
    guard T.radix == 2 else { return sum(a, b) }
     
    let head = a + b
    let tail = a - head + b
    return (head, tail)
  }
  @_transparent public static func sum<T>(_ a: T, _ b: T) -> (head: T, tail: T) where T : Swift.FloatingPoint {
    let head = a + b
    let x = head - b
    let y = head - x
    let tail = (a - x) + (b - y)
    return (head, tail)
  }
}
extension Swift.Double : RealModule.Real {
  @_transparent public static func cos(_ x: Swift.Double) -> Swift.Double {
    libm_cos(x)
  }
  @_transparent public static func sin(_ x: Swift.Double) -> Swift.Double {
    libm_sin(x)
  }
  @_transparent public static func tan(_ x: Swift.Double) -> Swift.Double {
    libm_tan(x)
  }
  @_transparent public static func acos(_ x: Swift.Double) -> Swift.Double {
    libm_acos(x)
  }
  @_transparent public static func asin(_ x: Swift.Double) -> Swift.Double {
    libm_asin(x)
  }
  @_transparent public static func atan(_ x: Swift.Double) -> Swift.Double {
    libm_atan(x)
  }
  @_transparent public static func cosh(_ x: Swift.Double) -> Swift.Double {
    libm_cosh(x)
  }
  @_transparent public static func sinh(_ x: Swift.Double) -> Swift.Double {
    libm_sinh(x)
  }
  @_transparent public static func tanh(_ x: Swift.Double) -> Swift.Double {
    libm_tanh(x)
  }
  @_transparent public static func acosh(_ x: Swift.Double) -> Swift.Double {
    libm_acosh(x)
  }
  @_transparent public static func asinh(_ x: Swift.Double) -> Swift.Double {
    libm_asinh(x)
  }
  @_transparent public static func atanh(_ x: Swift.Double) -> Swift.Double {
    libm_atanh(x)
  }
  @_transparent public static func exp(_ x: Swift.Double) -> Swift.Double {
    libm_exp(x)
  }
  @_transparent public static func expMinusOne(_ x: Swift.Double) -> Swift.Double {
    libm_expm1(x)
  }
  @_transparent public static func log(_ x: Swift.Double) -> Swift.Double {
    libm_log(x)
  }
  @_transparent public static func log(onePlus x: Swift.Double) -> Swift.Double {
    libm_log1p(x)
  }
  @_transparent public static func erf(_ x: Swift.Double) -> Swift.Double {
    libm_erf(x)
  }
  @_transparent public static func erfc(_ x: Swift.Double) -> Swift.Double {
    libm_erfc(x)
  }
  @_transparent public static func exp2(_ x: Swift.Double) -> Swift.Double {
    libm_exp2(x)
  }
  @_transparent public static func exp10(_ x: Swift.Double) -> Swift.Double {
    libm_exp10(x)
  }
  public static func hypot(_ x: Swift.Double, _ y: Swift.Double) -> Swift.Double
  @_transparent public static func gamma(_ x: Swift.Double) -> Swift.Double {
    libm_tgamma(x)
  }
  @_transparent public static func log2(_ x: Swift.Double) -> Swift.Double {
    libm_log2(x)
  }
  @_transparent public static func log10(_ x: Swift.Double) -> Swift.Double {
    libm_log10(x)
  }
  @_transparent public static func pow(_ x: Swift.Double, _ y: Swift.Double) -> Swift.Double {
    guard x >= 0 else { return .nan }
    if x == 0 && y == 0 { return .nan }
    return libm_pow(x, y)
  }
  @_transparent public static func pow(_ x: Swift.Double, _ n: Swift.Int) -> Swift.Double {
     
     
    if let y = Double(exactly: n) { return libm_pow(x, y) }
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
    let mask = Int(truncatingIfNeeded: UInt32.max)
    let round = n < 0 ? mask : 0
     
     
     
     
     
    let high = (n &+ round) & ~mask
    let low = n &- high
    return libm_pow(x, Double(low)) * libm_pow(x, Double(high))
  }
  @_transparent public static func root(_ x: Swift.Double, _ n: Swift.Int) -> Swift.Double {
    guard x >= 0 || n % 2 != 0 else { return .nan }
     
     
    if n == 3 { return libm_cbrt(x) }
     
     
    return Double(signOf: x, magnitudeOf: libm_pow(x.magnitude, 1/Double(n)))
  }
  @_transparent public static func atan2(y: Swift.Double, x: Swift.Double) -> Swift.Double {
    libm_atan2(y, x)
  }
  @_transparent public static func logGamma(_ x: Swift.Double) -> Swift.Double {
    var dontCare: Int32 = 0
    return libm_lgamma(x, &dontCare)
  }
  @_transparent public static func _relaxedAdd(_ a: Swift.Double, _ b: Swift.Double) -> Swift.Double {
    _numerics_relaxed_add(a, b)
  }
  @_transparent public static func _relaxedMul(_ a: Swift.Double, _ b: Swift.Double) -> Swift.Double {
    _numerics_relaxed_mul(a, b)
  }
}
public protocol ElementaryFunctions : Swift.AdditiveArithmetic {
  static func exp(_ x: Self) -> Self
  static func expMinusOne(_ x: Self) -> Self
  static func cosh(_ x: Self) -> Self
  static func sinh(_ x: Self) -> Self
  static func tanh(_ x: Self) -> Self
  static func cos(_ x: Self) -> Self
  static func sin(_ x: Self) -> Self
  static func tan(_ x: Self) -> Self
  static func log(_ x: Self) -> Self
  static func log(onePlus x: Self) -> Self
  static func acosh(_ x: Self) -> Self
  static func asinh(_ x: Self) -> Self
  static func atanh(_ x: Self) -> Self
  static func acos(_ x: Self) -> Self
  static func asin(_ x: Self) -> Self
  static func atan(_ x: Self) -> Self
  static func pow(_ x: Self, _ y: Self) -> Self
  static func pow(_ x: Self, _ n: Swift.Int) -> Self
  static func sqrt(_ x: Self) -> Self
  static func root(_ x: Self, _ n: Swift.Int) -> Self
}
extension Swift.Float : RealModule.Real {
  @_transparent public static func cos(_ x: Swift.Float) -> Swift.Float {
    libm_cosf(x)
  }
  @_transparent public static func sin(_ x: Swift.Float) -> Swift.Float {
    libm_sinf(x)
  }
  @_transparent public static func tan(_ x: Swift.Float) -> Swift.Float {
    libm_tanf(x)
  }
  @_transparent public static func acos(_ x: Swift.Float) -> Swift.Float {
    libm_acosf(x)
  }
  @_transparent public static func asin(_ x: Swift.Float) -> Swift.Float {
    libm_asinf(x)
  }
  @_transparent public static func atan(_ x: Swift.Float) -> Swift.Float {
    libm_atanf(x)
  }
  @_transparent public static func cosh(_ x: Swift.Float) -> Swift.Float {
    libm_coshf(x)
  }
  @_transparent public static func sinh(_ x: Swift.Float) -> Swift.Float {
    libm_sinhf(x)
  }
  @_transparent public static func tanh(_ x: Swift.Float) -> Swift.Float {
    libm_tanhf(x)
  }
  @_transparent public static func acosh(_ x: Swift.Float) -> Swift.Float {
    libm_acoshf(x)
  }
  @_transparent public static func asinh(_ x: Swift.Float) -> Swift.Float {
    libm_asinhf(x)
  }
  @_transparent public static func atanh(_ x: Swift.Float) -> Swift.Float {
    libm_atanhf(x)
  }
  @_transparent public static func exp(_ x: Swift.Float) -> Swift.Float {
    libm_expf(x)
  }
  @_transparent public static func expMinusOne(_ x: Swift.Float) -> Swift.Float {
    libm_expm1f(x)
  }
  @_transparent public static func log(_ x: Swift.Float) -> Swift.Float {
    libm_logf(x)
  }
  @_transparent public static func log(onePlus x: Swift.Float) -> Swift.Float {
    libm_log1pf(x)
  }
  @_transparent public static func erf(_ x: Swift.Float) -> Swift.Float {
    libm_erff(x)
  }
  @_transparent public static func erfc(_ x: Swift.Float) -> Swift.Float {
    libm_erfcf(x)
  }
  @_transparent public static func exp2(_ x: Swift.Float) -> Swift.Float {
    libm_exp2f(x)
  }
  @_transparent public static func exp10(_ x: Swift.Float) -> Swift.Float {
    libm_exp10f(x)
  }
  @_transparent public static func hypot(_ x: Swift.Float, _ y: Swift.Float) -> Swift.Float {
    libm_hypotf(x, y)
  }
  @_transparent public static func gamma(_ x: Swift.Float) -> Swift.Float {
    libm_tgammaf(x)
  }
  @_transparent public static func log2(_ x: Swift.Float) -> Swift.Float {
    libm_log2f(x)
  }
  @_transparent public static func log10(_ x: Swift.Float) -> Swift.Float {
    libm_log10f(x)
  }
  @_transparent public static func pow(_ x: Swift.Float, _ y: Swift.Float) -> Swift.Float {
    guard x >= 0 else { return .nan }
    if x == 0 && y == 0 { return .nan }
    return libm_powf(x, y)
  }
  @_transparent public static func pow(_ x: Swift.Float, _ n: Swift.Int) -> Swift.Float {
     
    if let y = Float(exactly: n) {
      return libm_powf(x, y)
    }
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
    let mask = Int(truncatingIfNeeded: 0xffffff)
    let round = n < 0 ? mask : 0
    let high = (n &+ round) & ~mask
    let low = n &- high
    return libm_powf(x, Float(low)) * libm_powf(x, Float(high))
  }
  @_transparent public static func root(_ x: Swift.Float, _ n: Swift.Int) -> Swift.Float {
    guard x >= 0 || n % 2 != 0 else { return .nan }
     
     
    if n == 3 { return libm_cbrtf(x) }
     
     
    return Float(signOf: x, magnitudeOf: libm_powf(x.magnitude, 1/Float(n)))
  }
  @_transparent public static func atan2(y: Swift.Float, x: Swift.Float) -> Swift.Float {
    libm_atan2f(y, x)
  }
  @_transparent public static func logGamma(_ x: Swift.Float) -> Swift.Float {
    var dontCare: Int32 = 0
    return libm_lgammaf(x, &dontCare)
  }
  @_transparent public static func _relaxedAdd(_ a: Swift.Float, _ b: Swift.Float) -> Swift.Float {
    _numerics_relaxed_addf(a, b)
  }
  @_transparent public static func _relaxedMul(_ a: Swift.Float, _ b: Swift.Float) -> Swift.Float {
    _numerics_relaxed_mulf(a, b)
  }
}
extension Swift.Float80 : RealModule.Real {
  @_transparent public static func cos(_ x: Swift.Float80) -> Swift.Float80 {
    libm_cosl(x)
  }
  @_transparent public static func sin(_ x: Swift.Float80) -> Swift.Float80 {
    libm_sinl(x)
  }
  @_transparent public static func tan(_ x: Swift.Float80) -> Swift.Float80 {
    libm_tanl(x)
  }
  @_transparent public static func acos(_ x: Swift.Float80) -> Swift.Float80 {
    libm_acosl(x)
  }
  @_transparent public static func asin(_ x: Swift.Float80) -> Swift.Float80 {
    libm_asinl(x)
  }
  @_transparent public static func atan(_ x: Swift.Float80) -> Swift.Float80 {
    libm_atanl(x)
  }
  @_transparent public static func cosh(_ x: Swift.Float80) -> Swift.Float80 {
    libm_coshl(x)
  }
  @_transparent public static func sinh(_ x: Swift.Float80) -> Swift.Float80 {
    libm_sinhl(x)
  }
  @_transparent public static func tanh(_ x: Swift.Float80) -> Swift.Float80 {
    libm_tanhl(x)
  }
  @_transparent public static func acosh(_ x: Swift.Float80) -> Swift.Float80 {
    libm_acoshl(x)
  }
  @_transparent public static func asinh(_ x: Swift.Float80) -> Swift.Float80 {
    libm_asinhl(x)
  }
  @_transparent public static func atanh(_ x: Swift.Float80) -> Swift.Float80 {
    libm_atanhl(x)
  }
  @_transparent public static func exp(_ x: Swift.Float80) -> Swift.Float80 {
    libm_expl(x)
  }
  @_transparent public static func expMinusOne(_ x: Swift.Float80) -> Swift.Float80 {
    libm_expm1l(x)
  }
  @_transparent public static func log(_ x: Swift.Float80) -> Swift.Float80 {
    libm_logl(x)
  }
  @_transparent public static func log(onePlus x: Swift.Float80) -> Swift.Float80 {
    libm_log1pl(x)
  }
  @_transparent public static func erf(_ x: Swift.Float80) -> Swift.Float80 {
    libm_erfl(x)
  }
  @_transparent public static func erfc(_ x: Swift.Float80) -> Swift.Float80 {
    libm_erfcl(x)
  }
  @_transparent public static func exp2(_ x: Swift.Float80) -> Swift.Float80 {
    libm_exp2l(x)
  }
  @_transparent public static func hypot(_ x: Swift.Float80, _ y: Swift.Float80) -> Swift.Float80 {
    libm_hypotl(x, y)
  }
  @_transparent public static func gamma(_ x: Swift.Float80) -> Swift.Float80 {
    libm_tgammal(x)
  }
  @_transparent public static func log2(_ x: Swift.Float80) -> Swift.Float80 {
    libm_log2l(x)
  }
  @_transparent public static func log10(_ x: Swift.Float80) -> Swift.Float80 {
    libm_log10l(x)
  }
  @_transparent public static func pow(_ x: Swift.Float80, _ y: Swift.Float80) -> Swift.Float80 {
    guard x >= 0 else { return .nan }
    if x == 0 && y == 0 { return .nan }
    return libm_powl(x, y)
  }
  @_transparent public static func pow(_ x: Swift.Float80, _ n: Swift.Int) -> Swift.Float80 {
     
     
     
    libm_powl(x, Float80(n))
  }
  @_transparent public static func root(_ x: Swift.Float80, _ n: Swift.Int) -> Swift.Float80 {
    guard x >= 0 || n % 2 != 0 else { return .nan }
     
     
    if n == 3 { return libm_cbrtl(x) }
     
     
    return Float80(signOf: x, magnitudeOf: libm_powl(x.magnitude, 1/Float80(n)))
  }
  @_transparent public static func atan2(y: Swift.Float80, x: Swift.Float80) -> Swift.Float80 {
    libm_atan2l(y, x)
  }
  @_transparent public static func logGamma(_ x: Swift.Float80) -> Swift.Float80 {
    var dontCare: Int32 = 0
    return libm_lgammal(x, &dontCare)
  }
  @_transparent public static func _relaxedAdd(_ a: Swift.Float80, _ b: Swift.Float80) -> Swift.Float80 {
    _numerics_relaxed_addl(a, b)
  }
  @_transparent public static func _relaxedMul(_ a: Swift.Float80, _ b: Swift.Float80) -> Swift.Float80 {
    _numerics_relaxed_mull(a, b)
  }
}
public protocol Real : RealModule.AlgebraicField, RealModule.RealFunctions, Swift.FloatingPoint {
}
extension RealModule.Real {
  @_transparent public static func exp10(_ x: Self) -> Self {
    pow(10, x)
  }
  @_transparent public static func cosMinusOne(_ x: Self) -> Self {
    let sinxOver2 = sin(x/2)
    return -2*sinxOver2*sinxOver2
  }
  public static func signGamma(_ x: Self) -> Swift.FloatingPointSign
  @_transparent public static func _mulAdd(_ a: Self, _ b: Self, _ c: Self) -> Self {
    a*b + c
  }
  @_transparent public static func sqrt(_ x: Self) -> Self {
    x.squareRoot()
  }
  #if compiler(>=5.3) && $NonescapableTypes
  @inlinable public var reciprocal: Self? {
    get {
    let recip = 1/self
    if recip.isNormal || isZero || !isFinite {
      return recip
    }
    return nil
  }
  }
  #endif
}
public protocol RealFunctions : RealModule.ElementaryFunctions {
  static func atan2(y: Self, x: Self) -> Self
  static func erf(_ x: Self) -> Self
  static func erfc(_ x: Self) -> Self
  static func exp2(_ x: Self) -> Self
  static func exp10(_ x: Self) -> Self
  static func hypot(_ x: Self, _ y: Self) -> Self
  static func gamma(_ x: Self) -> Self
  static func log2(_ x: Self) -> Self
  static func log10(_ x: Self) -> Self
  static func logGamma(_ x: Self) -> Self
  static func signGamma(_ x: Self) -> Swift.FloatingPointSign
}
public enum Relaxed {
}
extension RealModule.Relaxed {
  @_transparent public static func sum<T>(_ a: T, _ b: T) -> T where T : RealModule.AlgebraicField {
    T._relaxedAdd(a, b)
  }
  @_transparent public static func product<T>(_ a: T, _ b: T) -> T where T : RealModule.AlgebraicField {
    T._relaxedMul(a, b)
  }
}
extension RealModule.Relaxed {
  @_transparent public static func multiplyAdd<T>(_ a: T, _ b: T, _ c: T) -> T where T : RealModule.AlgebraicField {
    T._relaxedAdd(c, T._relaxedMul(a, b))
  }
}
