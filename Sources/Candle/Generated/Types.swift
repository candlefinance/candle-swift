// swift-format-ignore-file
// Generated by swift-openapi-generator, do not modify.
@_spi(Generated) import OpenAPIRuntime
#if os(Linux)
@preconcurrency import struct Foundation.URL
@preconcurrency import struct Foundation.Data
@preconcurrency import struct Foundation.Date
#else
import struct Foundation.URL
import struct Foundation.Data
import struct Foundation.Date
#endif
/// A type that performs HTTP operations defined by the OpenAPI document.
public protocol APIProtocol: Sendable {
    /// - Remark: HTTP `POST /users`.
    /// - Remark: Generated from `#/paths//users/post(postUsers)`.
    func postUsers(_ input: Operations.PostUsers.Input) async throws -> Operations.PostUsers.Output
    /// - Remark: HTTP `PUT /users`.
    /// - Remark: Generated from `#/paths//users/put(putUsers)`.
    func putUsers(_ input: Operations.PutUsers.Input) async throws -> Operations.PutUsers.Output
    /// - Remark: HTTP `DELETE /users`.
    /// - Remark: Generated from `#/paths//users/delete(deleteUsers)`.
    func deleteUsers(_ input: Operations.DeleteUsers.Input) async throws -> Operations.DeleteUsers.Output
    /// - Remark: HTTP `GET /linked-accounts`.
    /// - Remark: Generated from `#/paths//linked-accounts/get(getLinkedAccounts)`.
    func getLinkedAccounts(_ input: Operations.GetLinkedAccounts.Input) async throws -> Operations.GetLinkedAccounts.Output
    /// - Remark: HTTP `POST /linked-accounts`.
    /// - Remark: Generated from `#/paths//linked-accounts/post(postLinkedAccounts)`.
    func postLinkedAccounts(_ input: Operations.PostLinkedAccounts.Input) async throws -> Operations.PostLinkedAccounts.Output
    /// - Remark: HTTP `DELETE /linked-accounts/{linkedAccountID}`.
    /// - Remark: Generated from `#/paths//linked-accounts/{linkedAccountID}/delete(deleteLinkedAccount)`.
    func deleteLinkedAccount(_ input: Operations.DeleteLinkedAccount.Input) async throws -> Operations.DeleteLinkedAccount.Output
    /// - Remark: HTTP `GET /linked-accounts/fiat-holding-accounts`.
    /// - Remark: Generated from `#/paths//linked-accounts/fiat-holding-accounts/get(getLinkedAccountsFiatHoldingAccounts)`.
    func getLinkedAccountsFiatHoldingAccounts(_ input: Operations.GetLinkedAccountsFiatHoldingAccounts.Input) async throws -> Operations.GetLinkedAccountsFiatHoldingAccounts.Output
    /// - Remark: HTTP `GET /linked-accounts/activity`.
    /// - Remark: Generated from `#/paths//linked-accounts/activity/get(getLinkedAccountsActivity)`.
    func getLinkedAccountsActivity(_ input: Operations.GetLinkedAccountsActivity.Input) async throws -> Operations.GetLinkedAccountsActivity.Output
}

/// Convenience overloads for operation inputs.
extension APIProtocol {
    /// - Remark: HTTP `POST /users`.
    /// - Remark: Generated from `#/paths//users/post(postUsers)`.
    public func postUsers(
        headers: Operations.PostUsers.Input.Headers,
        body: Operations.PostUsers.Input.Body
    ) async throws -> Operations.PostUsers.Output {
        try await postUsers(Operations.PostUsers.Input(
            headers: headers,
            body: body
        ))
    }
    /// - Remark: HTTP `PUT /users`.
    /// - Remark: Generated from `#/paths//users/put(putUsers)`.
    public func putUsers(
        headers: Operations.PutUsers.Input.Headers = .init(),
        body: Operations.PutUsers.Input.Body
    ) async throws -> Operations.PutUsers.Output {
        try await putUsers(Operations.PutUsers.Input(
            headers: headers,
            body: body
        ))
    }
    /// - Remark: HTTP `DELETE /users`.
    /// - Remark: Generated from `#/paths//users/delete(deleteUsers)`.
    public func deleteUsers(
        headers: Operations.DeleteUsers.Input.Headers = .init(),
        body: Operations.DeleteUsers.Input.Body
    ) async throws -> Operations.DeleteUsers.Output {
        try await deleteUsers(Operations.DeleteUsers.Input(
            headers: headers,
            body: body
        ))
    }
    /// - Remark: HTTP `GET /linked-accounts`.
    /// - Remark: Generated from `#/paths//linked-accounts/get(getLinkedAccounts)`.
    public func getLinkedAccounts(headers: Operations.GetLinkedAccounts.Input.Headers = .init()) async throws -> Operations.GetLinkedAccounts.Output {
        try await getLinkedAccounts(Operations.GetLinkedAccounts.Input(headers: headers))
    }
    /// - Remark: HTTP `POST /linked-accounts`.
    /// - Remark: Generated from `#/paths//linked-accounts/post(postLinkedAccounts)`.
    public func postLinkedAccounts(
        headers: Operations.PostLinkedAccounts.Input.Headers = .init(),
        body: Operations.PostLinkedAccounts.Input.Body
    ) async throws -> Operations.PostLinkedAccounts.Output {
        try await postLinkedAccounts(Operations.PostLinkedAccounts.Input(
            headers: headers,
            body: body
        ))
    }
    /// - Remark: HTTP `DELETE /linked-accounts/{linkedAccountID}`.
    /// - Remark: Generated from `#/paths//linked-accounts/{linkedAccountID}/delete(deleteLinkedAccount)`.
    public func deleteLinkedAccount(
        path: Operations.DeleteLinkedAccount.Input.Path,
        headers: Operations.DeleteLinkedAccount.Input.Headers = .init()
    ) async throws -> Operations.DeleteLinkedAccount.Output {
        try await deleteLinkedAccount(Operations.DeleteLinkedAccount.Input(
            path: path,
            headers: headers
        ))
    }
    /// - Remark: HTTP `GET /linked-accounts/fiat-holding-accounts`.
    /// - Remark: Generated from `#/paths//linked-accounts/fiat-holding-accounts/get(getLinkedAccountsFiatHoldingAccounts)`.
    public func getLinkedAccountsFiatHoldingAccounts(
        query: Operations.GetLinkedAccountsFiatHoldingAccounts.Input.Query = .init(),
        headers: Operations.GetLinkedAccountsFiatHoldingAccounts.Input.Headers = .init()
    ) async throws -> Operations.GetLinkedAccountsFiatHoldingAccounts.Output {
        try await getLinkedAccountsFiatHoldingAccounts(Operations.GetLinkedAccountsFiatHoldingAccounts.Input(
            query: query,
            headers: headers
        ))
    }
    /// - Remark: HTTP `GET /linked-accounts/activity`.
    /// - Remark: Generated from `#/paths//linked-accounts/activity/get(getLinkedAccountsActivity)`.
    public func getLinkedAccountsActivity(
        query: Operations.GetLinkedAccountsActivity.Input.Query = .init(),
        headers: Operations.GetLinkedAccountsActivity.Input.Headers = .init()
    ) async throws -> Operations.GetLinkedAccountsActivity.Output {
        try await getLinkedAccountsActivity(Operations.GetLinkedAccountsActivity.Input(
            query: query,
            headers: headers
        ))
    }
}

/// Server URLs defined in the OpenAPI document.
public enum Servers {}

/// Types generated from the components section of the OpenAPI document.
public enum Components {
    /// Types generated from the `#/components/schemas` section of the OpenAPI document.
    public enum Schemas {
        /// - Remark: Generated from `#/components/schemas/AppUser`.
        public struct AppUser: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/AppUser/appKey`.
            public var appKey: Components.Schemas.AppID
            /// - Remark: Generated from `#/components/schemas/AppUser/appSecret`.
            public var appSecret: Components.Schemas.AppAuthorizationToken
            /// - Remark: Generated from `#/components/schemas/AppUser/appUserID`.
            public var appUserID: Components.Schemas.AppUserID?
            /// Creates a new `AppUser`.
            ///
            /// - Parameters:
            ///   - appKey:
            ///   - appSecret:
            ///   - appUserID:
            public init(
                appKey: Components.Schemas.AppID,
                appSecret: Components.Schemas.AppAuthorizationToken,
                appUserID: Components.Schemas.AppUserID? = nil
            ) {
                self.appKey = appKey
                self.appSecret = appSecret
                self.appUserID = appUserID
            }
            public enum CodingKeys: String, CodingKey {
                case appKey
                case appSecret
                case appUserID
            }
            public init(from decoder: any Decoder) throws {
                let container = try decoder.container(keyedBy: CodingKeys.self)
                self.appKey = try container.decode(
                    Components.Schemas.AppID.self,
                    forKey: .appKey
                )
                self.appSecret = try container.decode(
                    Components.Schemas.AppAuthorizationToken.self,
                    forKey: .appSecret
                )
                self.appUserID = try container.decodeIfPresent(
                    Components.Schemas.AppUserID.self,
                    forKey: .appUserID
                )
                try decoder.ensureNoAdditionalProperties(knownKeys: [
                    "appKey",
                    "appSecret",
                    "appUserID"
                ])
            }
        }
        /// - Remark: Generated from `#/components/schemas/AppID`.
        public typealias AppID = Swift.String
        /// - Remark: Generated from `#/components/schemas/AppAuthorizationToken`.
        public typealias AppAuthorizationToken = Swift.String
        /// - Remark: Generated from `#/components/schemas/AppUserID`.
        public typealias AppUserID = Swift.String
        /// - Remark: Generated from `#/components/schemas/LinkedAccount`.
        public struct LinkedAccount: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/LinkedAccount/linkedAccountID`.
            public var linkedAccountID: Components.Schemas.LinkedAccountID
            /// - Remark: Generated from `#/components/schemas/LinkedAccount/provider`.
            public var provider: Components.Schemas.SupportedProvider
            /// - Remark: Generated from `#/components/schemas/LinkedAccount/providerUserID`.
            public var providerUserID: Components.Schemas.ProviderUserID
            /// - Remark: Generated from `#/components/schemas/LinkedAccount/details`.
            public var details: Components.Schemas.LinkedAccountDetails
            /// Creates a new `LinkedAccount`.
            ///
            /// - Parameters:
            ///   - linkedAccountID:
            ///   - provider:
            ///   - providerUserID:
            ///   - details:
            public init(
                linkedAccountID: Components.Schemas.LinkedAccountID,
                provider: Components.Schemas.SupportedProvider,
                providerUserID: Components.Schemas.ProviderUserID,
                details: Components.Schemas.LinkedAccountDetails
            ) {
                self.linkedAccountID = linkedAccountID
                self.provider = provider
                self.providerUserID = providerUserID
                self.details = details
            }
            public enum CodingKeys: String, CodingKey {
                case linkedAccountID
                case provider
                case providerUserID
                case details
            }
            public init(from decoder: any Decoder) throws {
                let container = try decoder.container(keyedBy: CodingKeys.self)
                self.linkedAccountID = try container.decode(
                    Components.Schemas.LinkedAccountID.self,
                    forKey: .linkedAccountID
                )
                self.provider = try container.decode(
                    Components.Schemas.SupportedProvider.self,
                    forKey: .provider
                )
                self.providerUserID = try container.decode(
                    Components.Schemas.ProviderUserID.self,
                    forKey: .providerUserID
                )
                self.details = try container.decode(
                    Components.Schemas.LinkedAccountDetails.self,
                    forKey: .details
                )
                try decoder.ensureNoAdditionalProperties(knownKeys: [
                    "linkedAccountID",
                    "provider",
                    "providerUserID",
                    "details"
                ])
            }
        }
        /// a Universally Unique Identifier
        ///
        /// - Remark: Generated from `#/components/schemas/LinkedAccountID`.
        public typealias LinkedAccountID = Swift.String
        /// - Remark: Generated from `#/components/schemas/SupportedProvider`.
        @frozen public enum SupportedProvider: String, Codable, Hashable, Sendable, CaseIterable {
            case demo = "demo"
            case robinhood = "robinhood"
            case cashApp = "cash_app"
            case apple = "apple"
            case venmo = "venmo"
        }
        /// - Remark: Generated from `#/components/schemas/ProviderUserID`.
        public typealias ProviderUserID = Swift.String
        /// - Remark: Generated from `#/components/schemas/LinkedAccountDetails`.
        @frozen public enum LinkedAccountDetails: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/LinkedAccountDetails/case1`.
            case InactiveLinkedAccountDetails(Components.Schemas.InactiveLinkedAccountDetails)
            /// - Remark: Generated from `#/components/schemas/LinkedAccountDetails/case2`.
            case ActiveLinkedAccountDetails(Components.Schemas.ActiveLinkedAccountDetails)
            public init(from decoder: any Decoder) throws {
                var errors: [any Error] = []
                do {
                    self = .InactiveLinkedAccountDetails(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .ActiveLinkedAccountDetails(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                throw Swift.DecodingError.failedToDecodeOneOfSchema(
                    type: Self.self,
                    codingPath: decoder.codingPath,
                    errors: errors
                )
            }
            public func encode(to encoder: any Encoder) throws {
                switch self {
                case let .InactiveLinkedAccountDetails(value):
                    try value.encode(to: encoder)
                case let .ActiveLinkedAccountDetails(value):
                    try value.encode(to: encoder)
                }
            }
        }
        /// - Remark: Generated from `#/components/schemas/InactiveLinkedAccountDetails`.
        public struct InactiveLinkedAccountDetails: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/InactiveLinkedAccountDetails/state`.
            @frozen public enum StatePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case inactive = "inactive"
            }
            /// - Remark: Generated from `#/components/schemas/InactiveLinkedAccountDetails/state`.
            public var state: Components.Schemas.InactiveLinkedAccountDetails.StatePayload
            /// Creates a new `InactiveLinkedAccountDetails`.
            ///
            /// - Parameters:
            ///   - state:
            public init(state: Components.Schemas.InactiveLinkedAccountDetails.StatePayload) {
                self.state = state
            }
            public enum CodingKeys: String, CodingKey {
                case state
            }
            public init(from decoder: any Decoder) throws {
                let container = try decoder.container(keyedBy: CodingKeys.self)
                self.state = try container.decode(
                    Components.Schemas.InactiveLinkedAccountDetails.StatePayload.self,
                    forKey: .state
                )
                try decoder.ensureNoAdditionalProperties(knownKeys: [
                    "state"
                ])
            }
        }
        /// - Remark: Generated from `#/components/schemas/ActiveLinkedAccountDetails`.
        public struct ActiveLinkedAccountDetails: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/ActiveLinkedAccountDetails/state`.
            @frozen public enum StatePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case active = "active"
            }
            /// - Remark: Generated from `#/components/schemas/ActiveLinkedAccountDetails/state`.
            public var state: Components.Schemas.ActiveLinkedAccountDetails.StatePayload
            /// - Remark: Generated from `#/components/schemas/ActiveLinkedAccountDetails/accountOpened`.
            public var accountOpened: Swift.String
            /// - Remark: Generated from `#/components/schemas/ActiveLinkedAccountDetails/username`.
            public var username: Swift.String
            /// - Remark: Generated from `#/components/schemas/ActiveLinkedAccountDetails/emailAddress`.
            public var emailAddress: Swift.String
            /// - Remark: Generated from `#/components/schemas/ActiveLinkedAccountDetails/legalName`.
            public var legalName: Swift.String
            /// Creates a new `ActiveLinkedAccountDetails`.
            ///
            /// - Parameters:
            ///   - state:
            ///   - accountOpened:
            ///   - username:
            ///   - emailAddress:
            ///   - legalName:
            public init(
                state: Components.Schemas.ActiveLinkedAccountDetails.StatePayload,
                accountOpened: Swift.String,
                username: Swift.String,
                emailAddress: Swift.String,
                legalName: Swift.String
            ) {
                self.state = state
                self.accountOpened = accountOpened
                self.username = username
                self.emailAddress = emailAddress
                self.legalName = legalName
            }
            public enum CodingKeys: String, CodingKey {
                case state
                case accountOpened
                case username
                case emailAddress
                case legalName
            }
            public init(from decoder: any Decoder) throws {
                let container = try decoder.container(keyedBy: CodingKeys.self)
                self.state = try container.decode(
                    Components.Schemas.ActiveLinkedAccountDetails.StatePayload.self,
                    forKey: .state
                )
                self.accountOpened = try container.decode(
                    Swift.String.self,
                    forKey: .accountOpened
                )
                self.username = try container.decode(
                    Swift.String.self,
                    forKey: .username
                )
                self.emailAddress = try container.decode(
                    Swift.String.self,
                    forKey: .emailAddress
                )
                self.legalName = try container.decode(
                    Swift.String.self,
                    forKey: .legalName
                )
                try decoder.ensureNoAdditionalProperties(knownKeys: [
                    "state",
                    "accountOpened",
                    "username",
                    "emailAddress",
                    "legalName"
                ])
            }
        }
        /// - Remark: Generated from `#/components/schemas/LinkRequest`.
        @frozen public enum LinkRequest: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/LinkRequest/case1`.
            case ProviderCredentialsRequest(Components.Schemas.ProviderCredentialsRequest)
            /// - Remark: Generated from `#/components/schemas/LinkRequest/case2`.
            case MFAResponseRequest(Components.Schemas.MFAResponseRequest)
            public init(from decoder: any Decoder) throws {
                var errors: [any Error] = []
                do {
                    self = .ProviderCredentialsRequest(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .MFAResponseRequest(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                throw Swift.DecodingError.failedToDecodeOneOfSchema(
                    type: Self.self,
                    codingPath: decoder.codingPath,
                    errors: errors
                )
            }
            public func encode(to encoder: any Encoder) throws {
                switch self {
                case let .ProviderCredentialsRequest(value):
                    try value.encode(to: encoder)
                case let .MFAResponseRequest(value):
                    try value.encode(to: encoder)
                }
            }
        }
        /// - Remark: Generated from `#/components/schemas/ProviderCredentialsRequest`.
        public struct ProviderCredentialsRequest: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/ProviderCredentialsRequest/step`.
            @frozen public enum StepPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case credentials = "credentials"
            }
            /// - Remark: Generated from `#/components/schemas/ProviderCredentialsRequest/step`.
            public var step: Components.Schemas.ProviderCredentialsRequest.StepPayload
            /// - Remark: Generated from `#/components/schemas/ProviderCredentialsRequest/credentials`.
            public var credentials: Components.Schemas.ProviderCredentials
            /// Creates a new `ProviderCredentialsRequest`.
            ///
            /// - Parameters:
            ///   - step:
            ///   - credentials:
            public init(
                step: Components.Schemas.ProviderCredentialsRequest.StepPayload,
                credentials: Components.Schemas.ProviderCredentials
            ) {
                self.step = step
                self.credentials = credentials
            }
            public enum CodingKeys: String, CodingKey {
                case step
                case credentials
            }
            public init(from decoder: any Decoder) throws {
                let container = try decoder.container(keyedBy: CodingKeys.self)
                self.step = try container.decode(
                    Components.Schemas.ProviderCredentialsRequest.StepPayload.self,
                    forKey: .step
                )
                self.credentials = try container.decode(
                    Components.Schemas.ProviderCredentials.self,
                    forKey: .credentials
                )
                try decoder.ensureNoAdditionalProperties(knownKeys: [
                    "step",
                    "credentials"
                ])
            }
        }
        /// - Remark: Generated from `#/components/schemas/ProviderCredentials`.
        @frozen public enum ProviderCredentials: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/ProviderCredentials/case1`.
            case DemoProviderCredentials(Components.Schemas.DemoProviderCredentials)
            /// - Remark: Generated from `#/components/schemas/ProviderCredentials/case2`.
            case RobinhoodProviderCredentials(Components.Schemas.RobinhoodProviderCredentials)
            /// - Remark: Generated from `#/components/schemas/ProviderCredentials/case3`.
            case VenmoProviderCredentials(Components.Schemas.VenmoProviderCredentials)
            /// - Remark: Generated from `#/components/schemas/ProviderCredentials/case4`.
            case CashAppProviderCredentials(Components.Schemas.CashAppProviderCredentials)
            /// - Remark: Generated from `#/components/schemas/ProviderCredentials/case5`.
            case AppleProviderCredentials(Components.Schemas.AppleProviderCredentials)
            public init(from decoder: any Decoder) throws {
                var errors: [any Error] = []
                do {
                    self = .DemoProviderCredentials(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .RobinhoodProviderCredentials(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .VenmoProviderCredentials(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .CashAppProviderCredentials(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .AppleProviderCredentials(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                throw Swift.DecodingError.failedToDecodeOneOfSchema(
                    type: Self.self,
                    codingPath: decoder.codingPath,
                    errors: errors
                )
            }
            public func encode(to encoder: any Encoder) throws {
                switch self {
                case let .DemoProviderCredentials(value):
                    try value.encode(to: encoder)
                case let .RobinhoodProviderCredentials(value):
                    try value.encode(to: encoder)
                case let .VenmoProviderCredentials(value):
                    try value.encode(to: encoder)
                case let .CashAppProviderCredentials(value):
                    try value.encode(to: encoder)
                case let .AppleProviderCredentials(value):
                    try value.encode(to: encoder)
                }
            }
        }
        /// - Remark: Generated from `#/components/schemas/DemoProviderCredentials`.
        public struct DemoProviderCredentials: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/DemoProviderCredentials/provider`.
            @frozen public enum ProviderPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case demo = "demo"
            }
            /// - Remark: Generated from `#/components/schemas/DemoProviderCredentials/provider`.
            public var provider: Components.Schemas.DemoProviderCredentials.ProviderPayload
            /// - Remark: Generated from `#/components/schemas/DemoProviderCredentials/username`.
            public var username: Swift.String
            /// Creates a new `DemoProviderCredentials`.
            ///
            /// - Parameters:
            ///   - provider:
            ///   - username:
            public init(
                provider: Components.Schemas.DemoProviderCredentials.ProviderPayload,
                username: Swift.String
            ) {
                self.provider = provider
                self.username = username
            }
            public enum CodingKeys: String, CodingKey {
                case provider
                case username
            }
            public init(from decoder: any Decoder) throws {
                let container = try decoder.container(keyedBy: CodingKeys.self)
                self.provider = try container.decode(
                    Components.Schemas.DemoProviderCredentials.ProviderPayload.self,
                    forKey: .provider
                )
                self.username = try container.decode(
                    Swift.String.self,
                    forKey: .username
                )
                try decoder.ensureNoAdditionalProperties(knownKeys: [
                    "provider",
                    "username"
                ])
            }
        }
        /// - Remark: Generated from `#/components/schemas/RobinhoodProviderCredentials`.
        public struct RobinhoodProviderCredentials: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/RobinhoodProviderCredentials/provider`.
            @frozen public enum ProviderPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case robinhood = "robinhood"
            }
            /// - Remark: Generated from `#/components/schemas/RobinhoodProviderCredentials/provider`.
            public var provider: Components.Schemas.RobinhoodProviderCredentials.ProviderPayload
            /// - Remark: Generated from `#/components/schemas/RobinhoodProviderCredentials/username`.
            public var username: Components.Schemas.EmailAddress
            /// - Remark: Generated from `#/components/schemas/RobinhoodProviderCredentials/password`.
            public var password: Components.Schemas.Password
            /// Creates a new `RobinhoodProviderCredentials`.
            ///
            /// - Parameters:
            ///   - provider:
            ///   - username:
            ///   - password:
            public init(
                provider: Components.Schemas.RobinhoodProviderCredentials.ProviderPayload,
                username: Components.Schemas.EmailAddress,
                password: Components.Schemas.Password
            ) {
                self.provider = provider
                self.username = username
                self.password = password
            }
            public enum CodingKeys: String, CodingKey {
                case provider
                case username
                case password
            }
            public init(from decoder: any Decoder) throws {
                let container = try decoder.container(keyedBy: CodingKeys.self)
                self.provider = try container.decode(
                    Components.Schemas.RobinhoodProviderCredentials.ProviderPayload.self,
                    forKey: .provider
                )
                self.username = try container.decode(
                    Components.Schemas.EmailAddress.self,
                    forKey: .username
                )
                self.password = try container.decode(
                    Components.Schemas.Password.self,
                    forKey: .password
                )
                try decoder.ensureNoAdditionalProperties(knownKeys: [
                    "provider",
                    "username",
                    "password"
                ])
            }
        }
        /// a string matching the pattern ^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$
        ///
        /// - Remark: Generated from `#/components/schemas/EmailAddress`.
        public typealias EmailAddress = Swift.String
        /// a non empty string
        ///
        /// - Remark: Generated from `#/components/schemas/Password`.
        public typealias Password = Swift.String
        /// - Remark: Generated from `#/components/schemas/VenmoProviderCredentials`.
        public struct VenmoProviderCredentials: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/VenmoProviderCredentials/provider`.
            @frozen public enum ProviderPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case venmo = "venmo"
            }
            /// - Remark: Generated from `#/components/schemas/VenmoProviderCredentials/provider`.
            public var provider: Components.Schemas.VenmoProviderCredentials.ProviderPayload
            /// - Remark: Generated from `#/components/schemas/VenmoProviderCredentials/username`.
            public var username: Swift.String
            /// - Remark: Generated from `#/components/schemas/VenmoProviderCredentials/password`.
            public var password: Components.Schemas.Password
            /// Creates a new `VenmoProviderCredentials`.
            ///
            /// - Parameters:
            ///   - provider:
            ///   - username:
            ///   - password:
            public init(
                provider: Components.Schemas.VenmoProviderCredentials.ProviderPayload,
                username: Swift.String,
                password: Components.Schemas.Password
            ) {
                self.provider = provider
                self.username = username
                self.password = password
            }
            public enum CodingKeys: String, CodingKey {
                case provider
                case username
                case password
            }
            public init(from decoder: any Decoder) throws {
                let container = try decoder.container(keyedBy: CodingKeys.self)
                self.provider = try container.decode(
                    Components.Schemas.VenmoProviderCredentials.ProviderPayload.self,
                    forKey: .provider
                )
                self.username = try container.decode(
                    Swift.String.self,
                    forKey: .username
                )
                self.password = try container.decode(
                    Components.Schemas.Password.self,
                    forKey: .password
                )
                try decoder.ensureNoAdditionalProperties(knownKeys: [
                    "provider",
                    "username",
                    "password"
                ])
            }
        }
        /// - Remark: Generated from `#/components/schemas/CashAppProviderCredentials`.
        public struct CashAppProviderCredentials: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/CashAppProviderCredentials/provider`.
            @frozen public enum ProviderPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case cashApp = "cash_app"
            }
            /// - Remark: Generated from `#/components/schemas/CashAppProviderCredentials/provider`.
            public var provider: Components.Schemas.CashAppProviderCredentials.ProviderPayload
            /// - Remark: Generated from `#/components/schemas/CashAppProviderCredentials/alias`.
            @frozen public enum AliasPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/CashAppProviderCredentials/alias/case1`.
                case USPhoneNumber(Components.Schemas.USPhoneNumber)
                /// - Remark: Generated from `#/components/schemas/CashAppProviderCredentials/alias/case2`.
                case EmailAddress(Components.Schemas.EmailAddress)
                public init(from decoder: any Decoder) throws {
                    var errors: [any Error] = []
                    do {
                        self = .USPhoneNumber(try decoder.decodeFromSingleValueContainer())
                        return
                    } catch {
                        errors.append(error)
                    }
                    do {
                        self = .EmailAddress(try decoder.decodeFromSingleValueContainer())
                        return
                    } catch {
                        errors.append(error)
                    }
                    throw Swift.DecodingError.failedToDecodeOneOfSchema(
                        type: Self.self,
                        codingPath: decoder.codingPath,
                        errors: errors
                    )
                }
                public func encode(to encoder: any Encoder) throws {
                    switch self {
                    case let .USPhoneNumber(value):
                        try encoder.encodeToSingleValueContainer(value)
                    case let .EmailAddress(value):
                        try encoder.encodeToSingleValueContainer(value)
                    }
                }
            }
            /// - Remark: Generated from `#/components/schemas/CashAppProviderCredentials/alias`.
            public var alias: Components.Schemas.CashAppProviderCredentials.AliasPayload
            /// - Remark: Generated from `#/components/schemas/CashAppProviderCredentials/pin`.
            public var pin: Components.Schemas.Pin
            /// Creates a new `CashAppProviderCredentials`.
            ///
            /// - Parameters:
            ///   - provider:
            ///   - alias:
            ///   - pin:
            public init(
                provider: Components.Schemas.CashAppProviderCredentials.ProviderPayload,
                alias: Components.Schemas.CashAppProviderCredentials.AliasPayload,
                pin: Components.Schemas.Pin
            ) {
                self.provider = provider
                self.alias = alias
                self.pin = pin
            }
            public enum CodingKeys: String, CodingKey {
                case provider
                case alias
                case pin
            }
            public init(from decoder: any Decoder) throws {
                let container = try decoder.container(keyedBy: CodingKeys.self)
                self.provider = try container.decode(
                    Components.Schemas.CashAppProviderCredentials.ProviderPayload.self,
                    forKey: .provider
                )
                self.alias = try container.decode(
                    Components.Schemas.CashAppProviderCredentials.AliasPayload.self,
                    forKey: .alias
                )
                self.pin = try container.decode(
                    Components.Schemas.Pin.self,
                    forKey: .pin
                )
                try decoder.ensureNoAdditionalProperties(knownKeys: [
                    "provider",
                    "alias",
                    "pin"
                ])
            }
        }
        /// a string matching the pattern ^\+1\d{10}$
        ///
        /// - Remark: Generated from `#/components/schemas/USPhoneNumber`.
        public typealias USPhoneNumber = Swift.String
        /// a string matching the pattern ^\d{4}$
        ///
        /// - Remark: Generated from `#/components/schemas/PIN`.
        public typealias Pin = Swift.String
        /// - Remark: Generated from `#/components/schemas/AppleProviderCredentials`.
        public struct AppleProviderCredentials: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/AppleProviderCredentials/provider`.
            @frozen public enum ProviderPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case apple = "apple"
            }
            /// - Remark: Generated from `#/components/schemas/AppleProviderCredentials/provider`.
            public var provider: Components.Schemas.AppleProviderCredentials.ProviderPayload
            /// Creates a new `AppleProviderCredentials`.
            ///
            /// - Parameters:
            ///   - provider:
            public init(provider: Components.Schemas.AppleProviderCredentials.ProviderPayload) {
                self.provider = provider
            }
            public enum CodingKeys: String, CodingKey {
                case provider
            }
            public init(from decoder: any Decoder) throws {
                let container = try decoder.container(keyedBy: CodingKeys.self)
                self.provider = try container.decode(
                    Components.Schemas.AppleProviderCredentials.ProviderPayload.self,
                    forKey: .provider
                )
                try decoder.ensureNoAdditionalProperties(knownKeys: [
                    "provider"
                ])
            }
        }
        /// - Remark: Generated from `#/components/schemas/MFAResponseRequest`.
        public struct MFAResponseRequest: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/MFAResponseRequest/step`.
            @frozen public enum StepPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case mfa = "mfa"
            }
            /// - Remark: Generated from `#/components/schemas/MFAResponseRequest/step`.
            public var step: Components.Schemas.MFAResponseRequest.StepPayload
            /// - Remark: Generated from `#/components/schemas/MFAResponseRequest/response`.
            public var response: Components.Schemas.MFAResponse
            /// Creates a new `MFAResponseRequest`.
            ///
            /// - Parameters:
            ///   - step:
            ///   - response:
            public init(
                step: Components.Schemas.MFAResponseRequest.StepPayload,
                response: Components.Schemas.MFAResponse
            ) {
                self.step = step
                self.response = response
            }
            public enum CodingKeys: String, CodingKey {
                case step
                case response
            }
            public init(from decoder: any Decoder) throws {
                let container = try decoder.container(keyedBy: CodingKeys.self)
                self.step = try container.decode(
                    Components.Schemas.MFAResponseRequest.StepPayload.self,
                    forKey: .step
                )
                self.response = try container.decode(
                    Components.Schemas.MFAResponse.self,
                    forKey: .response
                )
                try decoder.ensureNoAdditionalProperties(knownKeys: [
                    "step",
                    "response"
                ])
            }
        }
        /// - Remark: Generated from `#/components/schemas/MFAResponse`.
        @frozen public enum MFAResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/MFAResponse/case1`.
            case MFACodeResponse(Components.Schemas.MFACodeResponse)
            /// - Remark: Generated from `#/components/schemas/MFAResponse/case2`.
            case MFALinkResponse(Components.Schemas.MFALinkResponse)
            public init(from decoder: any Decoder) throws {
                var errors: [any Error] = []
                do {
                    self = .MFACodeResponse(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .MFALinkResponse(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                throw Swift.DecodingError.failedToDecodeOneOfSchema(
                    type: Self.self,
                    codingPath: decoder.codingPath,
                    errors: errors
                )
            }
            public func encode(to encoder: any Encoder) throws {
                switch self {
                case let .MFACodeResponse(value):
                    try value.encode(to: encoder)
                case let .MFALinkResponse(value):
                    try value.encode(to: encoder)
                }
            }
        }
        /// - Remark: Generated from `#/components/schemas/MFACodeResponse`.
        public struct MFACodeResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/MFACodeResponse/mfaRequired`.
            @frozen public enum MfaRequiredPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case code = "code"
            }
            /// - Remark: Generated from `#/components/schemas/MFACodeResponse/mfaRequired`.
            public var mfaRequired: Components.Schemas.MFACodeResponse.MfaRequiredPayload
            /// - Remark: Generated from `#/components/schemas/MFACodeResponse/code`.
            public var code: Components.Schemas.MFACode
            /// - Remark: Generated from `#/components/schemas/MFACodeResponse/mfaContext`.
            public var mfaContext: Components.Schemas.MFACodeContext
            /// Creates a new `MFACodeResponse`.
            ///
            /// - Parameters:
            ///   - mfaRequired:
            ///   - code:
            ///   - mfaContext:
            public init(
                mfaRequired: Components.Schemas.MFACodeResponse.MfaRequiredPayload,
                code: Components.Schemas.MFACode,
                mfaContext: Components.Schemas.MFACodeContext
            ) {
                self.mfaRequired = mfaRequired
                self.code = code
                self.mfaContext = mfaContext
            }
            public enum CodingKeys: String, CodingKey {
                case mfaRequired
                case code
                case mfaContext
            }
            public init(from decoder: any Decoder) throws {
                let container = try decoder.container(keyedBy: CodingKeys.self)
                self.mfaRequired = try container.decode(
                    Components.Schemas.MFACodeResponse.MfaRequiredPayload.self,
                    forKey: .mfaRequired
                )
                self.code = try container.decode(
                    Components.Schemas.MFACode.self,
                    forKey: .code
                )
                self.mfaContext = try container.decode(
                    Components.Schemas.MFACodeContext.self,
                    forKey: .mfaContext
                )
                try decoder.ensureNoAdditionalProperties(knownKeys: [
                    "mfaRequired",
                    "code",
                    "mfaContext"
                ])
            }
        }
        /// a string matching the pattern ^\d{6}$
        ///
        /// - Remark: Generated from `#/components/schemas/MFACode`.
        public typealias MFACode = Swift.String
        /// - Remark: Generated from `#/components/schemas/MFACodeContext`.
        public typealias MFACodeContext = Swift.String
        /// - Remark: Generated from `#/components/schemas/MFALinkResponse`.
        public struct MFALinkResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/MFALinkResponse/mfaRequired`.
            @frozen public enum MfaRequiredPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case link = "link"
            }
            /// - Remark: Generated from `#/components/schemas/MFALinkResponse/mfaRequired`.
            public var mfaRequired: Components.Schemas.MFALinkResponse.MfaRequiredPayload
            /// - Remark: Generated from `#/components/schemas/MFALinkResponse/link`.
            public var link: Swift.String
            /// - Remark: Generated from `#/components/schemas/MFALinkResponse/mfaContext`.
            public var mfaContext: Components.Schemas.MFALinkContext
            /// Creates a new `MFALinkResponse`.
            ///
            /// - Parameters:
            ///   - mfaRequired:
            ///   - link:
            ///   - mfaContext:
            public init(
                mfaRequired: Components.Schemas.MFALinkResponse.MfaRequiredPayload,
                link: Swift.String,
                mfaContext: Components.Schemas.MFALinkContext
            ) {
                self.mfaRequired = mfaRequired
                self.link = link
                self.mfaContext = mfaContext
            }
            public enum CodingKeys: String, CodingKey {
                case mfaRequired
                case link
                case mfaContext
            }
            public init(from decoder: any Decoder) throws {
                let container = try decoder.container(keyedBy: CodingKeys.self)
                self.mfaRequired = try container.decode(
                    Components.Schemas.MFALinkResponse.MfaRequiredPayload.self,
                    forKey: .mfaRequired
                )
                self.link = try container.decode(
                    Swift.String.self,
                    forKey: .link
                )
                self.mfaContext = try container.decode(
                    Components.Schemas.MFALinkContext.self,
                    forKey: .mfaContext
                )
                try decoder.ensureNoAdditionalProperties(knownKeys: [
                    "mfaRequired",
                    "link",
                    "mfaContext"
                ])
            }
        }
        /// - Remark: Generated from `#/components/schemas/MFALinkContext`.
        public typealias MFALinkContext = Swift.String
        /// - Remark: Generated from `#/components/schemas/MFARequest`.
        @frozen public enum MFARequest: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/MFARequest/case1`.
            case MFACodeRequest(Components.Schemas.MFACodeRequest)
            /// - Remark: Generated from `#/components/schemas/MFARequest/case2`.
            case MFALinkRequest(Components.Schemas.MFALinkRequest)
            public init(from decoder: any Decoder) throws {
                var errors: [any Error] = []
                do {
                    self = .MFACodeRequest(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .MFALinkRequest(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                throw Swift.DecodingError.failedToDecodeOneOfSchema(
                    type: Self.self,
                    codingPath: decoder.codingPath,
                    errors: errors
                )
            }
            public func encode(to encoder: any Encoder) throws {
                switch self {
                case let .MFACodeRequest(value):
                    try value.encode(to: encoder)
                case let .MFALinkRequest(value):
                    try value.encode(to: encoder)
                }
            }
        }
        /// - Remark: Generated from `#/components/schemas/MFACodeRequest`.
        public struct MFACodeRequest: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/MFACodeRequest/mfaRequired`.
            @frozen public enum MfaRequiredPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case code = "code"
            }
            /// - Remark: Generated from `#/components/schemas/MFACodeRequest/mfaRequired`.
            public var mfaRequired: Components.Schemas.MFACodeRequest.MfaRequiredPayload
            /// - Remark: Generated from `#/components/schemas/MFACodeRequest/codeDeliveryLocation`.
            public var codeDeliveryLocation: Components.Schemas.MFACodeDeliveryLocation
            /// - Remark: Generated from `#/components/schemas/MFACodeRequest/mfaContext`.
            public var mfaContext: Components.Schemas.MFACodeContext
            /// Creates a new `MFACodeRequest`.
            ///
            /// - Parameters:
            ///   - mfaRequired:
            ///   - codeDeliveryLocation:
            ///   - mfaContext:
            public init(
                mfaRequired: Components.Schemas.MFACodeRequest.MfaRequiredPayload,
                codeDeliveryLocation: Components.Schemas.MFACodeDeliveryLocation,
                mfaContext: Components.Schemas.MFACodeContext
            ) {
                self.mfaRequired = mfaRequired
                self.codeDeliveryLocation = codeDeliveryLocation
                self.mfaContext = mfaContext
            }
            public enum CodingKeys: String, CodingKey {
                case mfaRequired
                case codeDeliveryLocation
                case mfaContext
            }
            public init(from decoder: any Decoder) throws {
                let container = try decoder.container(keyedBy: CodingKeys.self)
                self.mfaRequired = try container.decode(
                    Components.Schemas.MFACodeRequest.MfaRequiredPayload.self,
                    forKey: .mfaRequired
                )
                self.codeDeliveryLocation = try container.decode(
                    Components.Schemas.MFACodeDeliveryLocation.self,
                    forKey: .codeDeliveryLocation
                )
                self.mfaContext = try container.decode(
                    Components.Schemas.MFACodeContext.self,
                    forKey: .mfaContext
                )
                try decoder.ensureNoAdditionalProperties(knownKeys: [
                    "mfaRequired",
                    "codeDeliveryLocation",
                    "mfaContext"
                ])
            }
        }
        /// - Remark: Generated from `#/components/schemas/MFACodeDeliveryLocation`.
        @frozen public enum MFACodeDeliveryLocation: String, Codable, Hashable, Sendable, CaseIterable {
            case sms = "sms"
            case email = "email"
            case app = "app"
        }
        /// - Remark: Generated from `#/components/schemas/MFALinkRequest`.
        public struct MFALinkRequest: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/MFALinkRequest/mfaRequired`.
            @frozen public enum MfaRequiredPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case link = "link"
            }
            /// - Remark: Generated from `#/components/schemas/MFALinkRequest/mfaRequired`.
            public var mfaRequired: Components.Schemas.MFALinkRequest.MfaRequiredPayload
            /// - Remark: Generated from `#/components/schemas/MFALinkRequest/mfaContext`.
            public var mfaContext: Components.Schemas.MFALinkContext
            /// Creates a new `MFALinkRequest`.
            ///
            /// - Parameters:
            ///   - mfaRequired:
            ///   - mfaContext:
            public init(
                mfaRequired: Components.Schemas.MFALinkRequest.MfaRequiredPayload,
                mfaContext: Components.Schemas.MFALinkContext
            ) {
                self.mfaRequired = mfaRequired
                self.mfaContext = mfaContext
            }
            public enum CodingKeys: String, CodingKey {
                case mfaRequired
                case mfaContext
            }
            public init(from decoder: any Decoder) throws {
                let container = try decoder.container(keyedBy: CodingKeys.self)
                self.mfaRequired = try container.decode(
                    Components.Schemas.MFALinkRequest.MfaRequiredPayload.self,
                    forKey: .mfaRequired
                )
                self.mfaContext = try container.decode(
                    Components.Schemas.MFALinkContext.self,
                    forKey: .mfaContext
                )
                try decoder.ensureNoAdditionalProperties(knownKeys: [
                    "mfaRequired",
                    "mfaContext"
                ])
            }
        }
        /// - Remark: Generated from `#/components/schemas/PrimaryFiatHoldingAccount`.
        public struct PrimaryFiatHoldingAccount: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/PrimaryFiatHoldingAccount/providerFiatHoldingAccountID`.
            public var providerFiatHoldingAccountID: Components.Schemas.ProviderFiatHoldingAccountID
            /// - Remark: Generated from `#/components/schemas/PrimaryFiatHoldingAccount/nickname`.
            public var nickname: Swift.String
            /// - Remark: Generated from `#/components/schemas/PrimaryFiatHoldingAccount/legalAccountKind`.
            public var legalAccountKind: Components.Schemas.LegalAccountKind
            /// - Remark: Generated from `#/components/schemas/PrimaryFiatHoldingAccount/secondaryRefs`.
            public var secondaryRefs: [Components.Schemas.FiatHoldingAccountRef]
            /// - Remark: Generated from `#/components/schemas/PrimaryFiatHoldingAccount/ach`.
            public var ach: Components.Schemas.ACHDetails?
            /// - Remark: Generated from `#/components/schemas/PrimaryFiatHoldingAccount/wire`.
            public var wire: Components.Schemas.WireDetails?
            /// - Remark: Generated from `#/components/schemas/PrimaryFiatHoldingAccount/details`.
            public var details: Components.Schemas.PrimaryFiatHoldingAccountDetails
            /// Creates a new `PrimaryFiatHoldingAccount`.
            ///
            /// - Parameters:
            ///   - providerFiatHoldingAccountID:
            ///   - nickname:
            ///   - legalAccountKind:
            ///   - secondaryRefs:
            ///   - ach:
            ///   - wire:
            ///   - details:
            public init(
                providerFiatHoldingAccountID: Components.Schemas.ProviderFiatHoldingAccountID,
                nickname: Swift.String,
                legalAccountKind: Components.Schemas.LegalAccountKind,
                secondaryRefs: [Components.Schemas.FiatHoldingAccountRef],
                ach: Components.Schemas.ACHDetails? = nil,
                wire: Components.Schemas.WireDetails? = nil,
                details: Components.Schemas.PrimaryFiatHoldingAccountDetails
            ) {
                self.providerFiatHoldingAccountID = providerFiatHoldingAccountID
                self.nickname = nickname
                self.legalAccountKind = legalAccountKind
                self.secondaryRefs = secondaryRefs
                self.ach = ach
                self.wire = wire
                self.details = details
            }
            public enum CodingKeys: String, CodingKey {
                case providerFiatHoldingAccountID
                case nickname
                case legalAccountKind
                case secondaryRefs
                case ach
                case wire
                case details
            }
            public init(from decoder: any Decoder) throws {
                let container = try decoder.container(keyedBy: CodingKeys.self)
                self.providerFiatHoldingAccountID = try container.decode(
                    Components.Schemas.ProviderFiatHoldingAccountID.self,
                    forKey: .providerFiatHoldingAccountID
                )
                self.nickname = try container.decode(
                    Swift.String.self,
                    forKey: .nickname
                )
                self.legalAccountKind = try container.decode(
                    Components.Schemas.LegalAccountKind.self,
                    forKey: .legalAccountKind
                )
                self.secondaryRefs = try container.decode(
                    [Components.Schemas.FiatHoldingAccountRef].self,
                    forKey: .secondaryRefs
                )
                self.ach = try container.decodeIfPresent(
                    Components.Schemas.ACHDetails.self,
                    forKey: .ach
                )
                self.wire = try container.decodeIfPresent(
                    Components.Schemas.WireDetails.self,
                    forKey: .wire
                )
                self.details = try container.decode(
                    Components.Schemas.PrimaryFiatHoldingAccountDetails.self,
                    forKey: .details
                )
                try decoder.ensureNoAdditionalProperties(knownKeys: [
                    "providerFiatHoldingAccountID",
                    "nickname",
                    "legalAccountKind",
                    "secondaryRefs",
                    "ach",
                    "wire",
                    "details"
                ])
            }
        }
        /// - Remark: Generated from `#/components/schemas/ProviderFiatHoldingAccountID`.
        public typealias ProviderFiatHoldingAccountID = Swift.String
        /// - Remark: Generated from `#/components/schemas/LegalAccountKind`.
        @frozen public enum LegalAccountKind: String, Codable, Hashable, Sendable, CaseIterable {
            case individual = "individual"
            case joint = "joint"
            case traditionalIra = "traditional_ira"
            case rothIra = "roth_ira"
        }
        /// - Remark: Generated from `#/components/schemas/FiatHoldingAccountRef`.
        public struct FiatHoldingAccountRef: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/FiatHoldingAccountRef/linkedAccountID`.
            public var linkedAccountID: Components.Schemas.LinkedAccountID
            /// - Remark: Generated from `#/components/schemas/FiatHoldingAccountRef/refKind`.
            @frozen public enum RefKindPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case owner_banking = "owner.banking"
                case owner_investing = "owner.investing"
                case link = "link"
            }
            /// - Remark: Generated from `#/components/schemas/FiatHoldingAccountRef/refKind`.
            public var refKind: Components.Schemas.FiatHoldingAccountRef.RefKindPayload
            /// - Remark: Generated from `#/components/schemas/FiatHoldingAccountRef/providerFiatHoldingAccountID`.
            public var providerFiatHoldingAccountID: Components.Schemas.ProviderFiatHoldingAccountID
            /// Creates a new `FiatHoldingAccountRef`.
            ///
            /// - Parameters:
            ///   - linkedAccountID:
            ///   - refKind:
            ///   - providerFiatHoldingAccountID:
            public init(
                linkedAccountID: Components.Schemas.LinkedAccountID,
                refKind: Components.Schemas.FiatHoldingAccountRef.RefKindPayload,
                providerFiatHoldingAccountID: Components.Schemas.ProviderFiatHoldingAccountID
            ) {
                self.linkedAccountID = linkedAccountID
                self.refKind = refKind
                self.providerFiatHoldingAccountID = providerFiatHoldingAccountID
            }
            public enum CodingKeys: String, CodingKey {
                case linkedAccountID
                case refKind
                case providerFiatHoldingAccountID
            }
            public init(from decoder: any Decoder) throws {
                let container = try decoder.container(keyedBy: CodingKeys.self)
                self.linkedAccountID = try container.decode(
                    Components.Schemas.LinkedAccountID.self,
                    forKey: .linkedAccountID
                )
                self.refKind = try container.decode(
                    Components.Schemas.FiatHoldingAccountRef.RefKindPayload.self,
                    forKey: .refKind
                )
                self.providerFiatHoldingAccountID = try container.decode(
                    Components.Schemas.ProviderFiatHoldingAccountID.self,
                    forKey: .providerFiatHoldingAccountID
                )
                try decoder.ensureNoAdditionalProperties(knownKeys: [
                    "linkedAccountID",
                    "refKind",
                    "providerFiatHoldingAccountID"
                ])
            }
        }
        /// - Remark: Generated from `#/components/schemas/ACHDetails`.
        public struct ACHDetails: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/ACHDetails/accountNumber`.
            public var accountNumber: Swift.String
            /// - Remark: Generated from `#/components/schemas/ACHDetails/routingNumber`.
            public var routingNumber: Swift.String
            /// - Remark: Generated from `#/components/schemas/ACHDetails/accountKind`.
            public var accountKind: Components.Schemas.ACHAccountKind
            /// Creates a new `ACHDetails`.
            ///
            /// - Parameters:
            ///   - accountNumber:
            ///   - routingNumber:
            ///   - accountKind:
            public init(
                accountNumber: Swift.String,
                routingNumber: Swift.String,
                accountKind: Components.Schemas.ACHAccountKind
            ) {
                self.accountNumber = accountNumber
                self.routingNumber = routingNumber
                self.accountKind = accountKind
            }
            public enum CodingKeys: String, CodingKey {
                case accountNumber
                case routingNumber
                case accountKind
            }
            public init(from decoder: any Decoder) throws {
                let container = try decoder.container(keyedBy: CodingKeys.self)
                self.accountNumber = try container.decode(
                    Swift.String.self,
                    forKey: .accountNumber
                )
                self.routingNumber = try container.decode(
                    Swift.String.self,
                    forKey: .routingNumber
                )
                self.accountKind = try container.decode(
                    Components.Schemas.ACHAccountKind.self,
                    forKey: .accountKind
                )
                try decoder.ensureNoAdditionalProperties(knownKeys: [
                    "accountNumber",
                    "routingNumber",
                    "accountKind"
                ])
            }
        }
        /// - Remark: Generated from `#/components/schemas/ACHAccountKind`.
        @frozen public enum ACHAccountKind: String, Codable, Hashable, Sendable, CaseIterable {
            case checking = "checking"
            case savings = "savings"
        }
        /// - Remark: Generated from `#/components/schemas/WireDetails`.
        public struct WireDetails: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/WireDetails/accountNumber`.
            public var accountNumber: Swift.String
            /// - Remark: Generated from `#/components/schemas/WireDetails/routingNumber`.
            public var routingNumber: Swift.String
            /// Creates a new `WireDetails`.
            ///
            /// - Parameters:
            ///   - accountNumber:
            ///   - routingNumber:
            public init(
                accountNumber: Swift.String,
                routingNumber: Swift.String
            ) {
                self.accountNumber = accountNumber
                self.routingNumber = routingNumber
            }
            public enum CodingKeys: String, CodingKey {
                case accountNumber
                case routingNumber
            }
            public init(from decoder: any Decoder) throws {
                let container = try decoder.container(keyedBy: CodingKeys.self)
                self.accountNumber = try container.decode(
                    Swift.String.self,
                    forKey: .accountNumber
                )
                self.routingNumber = try container.decode(
                    Swift.String.self,
                    forKey: .routingNumber
                )
                try decoder.ensureNoAdditionalProperties(knownKeys: [
                    "accountNumber",
                    "routingNumber"
                ])
            }
        }
        /// - Remark: Generated from `#/components/schemas/PrimaryFiatHoldingAccountDetails`.
        @frozen public enum PrimaryFiatHoldingAccountDetails: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/PrimaryFiatHoldingAccountDetails/case1`.
            case OwnerFiatHoldingAccountDetails(Components.Schemas.OwnerFiatHoldingAccountDetails)
            /// - Remark: Generated from `#/components/schemas/PrimaryFiatHoldingAccountDetails/case2`.
            case LinkFiatHoldingAccountDetails(Components.Schemas.LinkFiatHoldingAccountDetails)
            public init(from decoder: any Decoder) throws {
                var errors: [any Error] = []
                do {
                    self = .OwnerFiatHoldingAccountDetails(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .LinkFiatHoldingAccountDetails(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                throw Swift.DecodingError.failedToDecodeOneOfSchema(
                    type: Self.self,
                    codingPath: decoder.codingPath,
                    errors: errors
                )
            }
            public func encode(to encoder: any Encoder) throws {
                switch self {
                case let .OwnerFiatHoldingAccountDetails(value):
                    try value.encode(to: encoder)
                case let .LinkFiatHoldingAccountDetails(value):
                    try value.encode(to: encoder)
                }
            }
        }
        /// - Remark: Generated from `#/components/schemas/OwnerFiatHoldingAccountDetails`.
        public struct OwnerFiatHoldingAccountDetails: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/OwnerFiatHoldingAccountDetails/refKind`.
            @frozen public enum RefKindPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case owner_banking = "owner.banking"
                case owner_investing = "owner.investing"
            }
            /// - Remark: Generated from `#/components/schemas/OwnerFiatHoldingAccountDetails/refKind`.
            public var refKind: Components.Schemas.OwnerFiatHoldingAccountDetails.RefKindPayload
            /// - Remark: Generated from `#/components/schemas/OwnerFiatHoldingAccountDetails/provider`.
            public var provider: Components.Schemas.SupportedProvider
            /// - Remark: Generated from `#/components/schemas/OwnerFiatHoldingAccountDetails/availableCashValue`.
            public var availableCashValue: Swift.Double
            /// - Remark: Generated from `#/components/schemas/OwnerFiatHoldingAccountDetails/linkedAccountID`.
            public var linkedAccountID: Components.Schemas.LinkedAccountID
            /// Creates a new `OwnerFiatHoldingAccountDetails`.
            ///
            /// - Parameters:
            ///   - refKind:
            ///   - provider:
            ///   - availableCashValue:
            ///   - linkedAccountID:
            public init(
                refKind: Components.Schemas.OwnerFiatHoldingAccountDetails.RefKindPayload,
                provider: Components.Schemas.SupportedProvider,
                availableCashValue: Swift.Double,
                linkedAccountID: Components.Schemas.LinkedAccountID
            ) {
                self.refKind = refKind
                self.provider = provider
                self.availableCashValue = availableCashValue
                self.linkedAccountID = linkedAccountID
            }
            public enum CodingKeys: String, CodingKey {
                case refKind
                case provider
                case availableCashValue
                case linkedAccountID
            }
            public init(from decoder: any Decoder) throws {
                let container = try decoder.container(keyedBy: CodingKeys.self)
                self.refKind = try container.decode(
                    Components.Schemas.OwnerFiatHoldingAccountDetails.RefKindPayload.self,
                    forKey: .refKind
                )
                self.provider = try container.decode(
                    Components.Schemas.SupportedProvider.self,
                    forKey: .provider
                )
                self.availableCashValue = try container.decode(
                    Swift.Double.self,
                    forKey: .availableCashValue
                )
                self.linkedAccountID = try container.decode(
                    Components.Schemas.LinkedAccountID.self,
                    forKey: .linkedAccountID
                )
                try decoder.ensureNoAdditionalProperties(knownKeys: [
                    "refKind",
                    "provider",
                    "availableCashValue",
                    "linkedAccountID"
                ])
            }
        }
        /// - Remark: Generated from `#/components/schemas/LinkFiatHoldingAccountDetails`.
        public struct LinkFiatHoldingAccountDetails: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/LinkFiatHoldingAccountDetails/refKind`.
            @frozen public enum RefKindPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case link = "link"
            }
            /// - Remark: Generated from `#/components/schemas/LinkFiatHoldingAccountDetails/refKind`.
            public var refKind: Components.Schemas.LinkFiatHoldingAccountDetails.RefKindPayload
            /// - Remark: Generated from `#/components/schemas/LinkFiatHoldingAccountDetails/provider`.
            public var provider: Components.Schemas.Provider
            /// Creates a new `LinkFiatHoldingAccountDetails`.
            ///
            /// - Parameters:
            ///   - refKind:
            ///   - provider:
            public init(
                refKind: Components.Schemas.LinkFiatHoldingAccountDetails.RefKindPayload,
                provider: Components.Schemas.Provider
            ) {
                self.refKind = refKind
                self.provider = provider
            }
            public enum CodingKeys: String, CodingKey {
                case refKind
                case provider
            }
            public init(from decoder: any Decoder) throws {
                let container = try decoder.container(keyedBy: CodingKeys.self)
                self.refKind = try container.decode(
                    Components.Schemas.LinkFiatHoldingAccountDetails.RefKindPayload.self,
                    forKey: .refKind
                )
                self.provider = try container.decode(
                    Components.Schemas.Provider.self,
                    forKey: .provider
                )
                try decoder.ensureNoAdditionalProperties(knownKeys: [
                    "refKind",
                    "provider"
                ])
            }
        }
        /// - Remark: Generated from `#/components/schemas/Provider`.
        @frozen public enum Provider: String, Codable, Hashable, Sendable, CaseIterable {
            case demo = "demo"
            case robinhood = "robinhood"
            case cashApp = "cash_app"
            case apple = "apple"
            case venmo = "venmo"
            case unknown = "unknown"
            case chime = "chime"
            case paypal = "paypal"
            case coinbase = "coinbase"
            case discover = "discover"
            case americanExpress = "american_express"
            case jpmorganChase = "jpmorgan_chase"
            case bankOfAmerica = "bank_of_america"
            case capitalOne = "capital_one"
            case citibank = "citibank"
            case vanguard = "vanguard"
            case wellsFargo = "wells_fargo"
            case charlesSchwab = "charles_schwab"
        }
        /// - Remark: Generated from `#/components/schemas/AssetKind`.
        @frozen public enum AssetKind: String, Codable, Hashable, Sendable, CaseIterable {
            case stock = "stock"
            case crypto = "crypto"
        }
        /// - Remark: Generated from `#/components/schemas/PortfolioActivityItem`.
        @frozen public enum PortfolioActivityItem: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/PortfolioActivityItem/case1`.
            case TransactionActivityItem(Components.Schemas.TransactionActivityItem)
            /// - Remark: Generated from `#/components/schemas/PortfolioActivityItem/case2`.
            case OrderActivityItem(Components.Schemas.OrderActivityItem)
            public init(from decoder: any Decoder) throws {
                var errors: [any Error] = []
                do {
                    self = .TransactionActivityItem(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .OrderActivityItem(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                throw Swift.DecodingError.failedToDecodeOneOfSchema(
                    type: Self.self,
                    codingPath: decoder.codingPath,
                    errors: errors
                )
            }
            public func encode(to encoder: any Encoder) throws {
                switch self {
                case let .TransactionActivityItem(value):
                    try value.encode(to: encoder)
                case let .OrderActivityItem(value):
                    try value.encode(to: encoder)
                }
            }
        }
        /// - Remark: Generated from `#/components/schemas/TransactionActivityItem`.
        public struct TransactionActivityItem: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/TransactionActivityItem/activityKind`.
            @frozen public enum ActivityKindPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case transaction = "transaction"
            }
            /// - Remark: Generated from `#/components/schemas/TransactionActivityItem/activityKind`.
            public var activityKind: Components.Schemas.TransactionActivityItem.ActivityKindPayload
            /// - Remark: Generated from `#/components/schemas/TransactionActivityItem/providerTransactionID`.
            public var providerTransactionID: Swift.String
            /// - Remark: Generated from `#/components/schemas/TransactionActivityItem/dateTime`.
            public var dateTime: Swift.String
            /// - Remark: Generated from `#/components/schemas/TransactionActivityItem/state`.
            @frozen public enum StatePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case success = "success"
                case inProgress = "in_progress"
                case failed = "failed"
            }
            /// - Remark: Generated from `#/components/schemas/TransactionActivityItem/state`.
            public var state: Components.Schemas.TransactionActivityItem.StatePayload
            /// - Remark: Generated from `#/components/schemas/TransactionActivityItem/amount`.
            public var amount: Swift.Double
            /// - Remark: Generated from `#/components/schemas/TransactionActivityItem/counterparty`.
            public var counterparty: Components.Schemas.TransactionCounterparty
            /// - Remark: Generated from `#/components/schemas/TransactionActivityItem/linkedAccountID`.
            public var linkedAccountID: Components.Schemas.LinkedAccountID
            /// - Remark: Generated from `#/components/schemas/TransactionActivityItem/provider`.
            public var provider: Components.Schemas.SupportedProvider
            /// Creates a new `TransactionActivityItem`.
            ///
            /// - Parameters:
            ///   - activityKind:
            ///   - providerTransactionID:
            ///   - dateTime:
            ///   - state:
            ///   - amount:
            ///   - counterparty:
            ///   - linkedAccountID:
            ///   - provider:
            public init(
                activityKind: Components.Schemas.TransactionActivityItem.ActivityKindPayload,
                providerTransactionID: Swift.String,
                dateTime: Swift.String,
                state: Components.Schemas.TransactionActivityItem.StatePayload,
                amount: Swift.Double,
                counterparty: Components.Schemas.TransactionCounterparty,
                linkedAccountID: Components.Schemas.LinkedAccountID,
                provider: Components.Schemas.SupportedProvider
            ) {
                self.activityKind = activityKind
                self.providerTransactionID = providerTransactionID
                self.dateTime = dateTime
                self.state = state
                self.amount = amount
                self.counterparty = counterparty
                self.linkedAccountID = linkedAccountID
                self.provider = provider
            }
            public enum CodingKeys: String, CodingKey {
                case activityKind
                case providerTransactionID
                case dateTime
                case state
                case amount
                case counterparty
                case linkedAccountID
                case provider
            }
            public init(from decoder: any Decoder) throws {
                let container = try decoder.container(keyedBy: CodingKeys.self)
                self.activityKind = try container.decode(
                    Components.Schemas.TransactionActivityItem.ActivityKindPayload.self,
                    forKey: .activityKind
                )
                self.providerTransactionID = try container.decode(
                    Swift.String.self,
                    forKey: .providerTransactionID
                )
                self.dateTime = try container.decode(
                    Swift.String.self,
                    forKey: .dateTime
                )
                self.state = try container.decode(
                    Components.Schemas.TransactionActivityItem.StatePayload.self,
                    forKey: .state
                )
                self.amount = try container.decode(
                    Swift.Double.self,
                    forKey: .amount
                )
                self.counterparty = try container.decode(
                    Components.Schemas.TransactionCounterparty.self,
                    forKey: .counterparty
                )
                self.linkedAccountID = try container.decode(
                    Components.Schemas.LinkedAccountID.self,
                    forKey: .linkedAccountID
                )
                self.provider = try container.decode(
                    Components.Schemas.SupportedProvider.self,
                    forKey: .provider
                )
                try decoder.ensureNoAdditionalProperties(knownKeys: [
                    "activityKind",
                    "providerTransactionID",
                    "dateTime",
                    "state",
                    "amount",
                    "counterparty",
                    "linkedAccountID",
                    "provider"
                ])
            }
        }
        /// - Remark: Generated from `#/components/schemas/TransactionCounterparty`.
        public struct TransactionCounterparty: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/TransactionCounterparty/name`.
            public var name: Swift.String
            /// - Remark: Generated from `#/components/schemas/TransactionCounterparty/location`.
            public var location: Components.Schemas.TransactionLocation?
            /// - Remark: Generated from `#/components/schemas/TransactionCounterparty/logoURL`.
            public var logoURL: Swift.String
            /// Creates a new `TransactionCounterparty`.
            ///
            /// - Parameters:
            ///   - name:
            ///   - location:
            ///   - logoURL:
            public init(
                name: Swift.String,
                location: Components.Schemas.TransactionLocation? = nil,
                logoURL: Swift.String
            ) {
                self.name = name
                self.location = location
                self.logoURL = logoURL
            }
            public enum CodingKeys: String, CodingKey {
                case name
                case location
                case logoURL
            }
            public init(from decoder: any Decoder) throws {
                let container = try decoder.container(keyedBy: CodingKeys.self)
                self.name = try container.decode(
                    Swift.String.self,
                    forKey: .name
                )
                self.location = try container.decodeIfPresent(
                    Components.Schemas.TransactionLocation.self,
                    forKey: .location
                )
                self.logoURL = try container.decode(
                    Swift.String.self,
                    forKey: .logoURL
                )
                try decoder.ensureNoAdditionalProperties(knownKeys: [
                    "name",
                    "location",
                    "logoURL"
                ])
            }
        }
        /// - Remark: Generated from `#/components/schemas/TransactionLocation`.
        public struct TransactionLocation: Codable, Hashable, Sendable {
            /// a string matching the pattern ^[A-Z]{2}$
            ///
            /// - Remark: Generated from `#/components/schemas/TransactionLocation/countryCode`.
            public var countryCode: Swift.String
            /// - Remark: Generated from `#/components/schemas/TransactionLocation/countrySubdivisionCode`.
            public var countrySubdivisionCode: Swift.String
            /// - Remark: Generated from `#/components/schemas/TransactionLocation/localityName`.
            public var localityName: Swift.String
            /// Creates a new `TransactionLocation`.
            ///
            /// - Parameters:
            ///   - countryCode: a string matching the pattern ^[A-Z]{2}$
            ///   - countrySubdivisionCode:
            ///   - localityName:
            public init(
                countryCode: Swift.String,
                countrySubdivisionCode: Swift.String,
                localityName: Swift.String
            ) {
                self.countryCode = countryCode
                self.countrySubdivisionCode = countrySubdivisionCode
                self.localityName = localityName
            }
            public enum CodingKeys: String, CodingKey {
                case countryCode
                case countrySubdivisionCode
                case localityName
            }
            public init(from decoder: any Decoder) throws {
                let container = try decoder.container(keyedBy: CodingKeys.self)
                self.countryCode = try container.decode(
                    Swift.String.self,
                    forKey: .countryCode
                )
                self.countrySubdivisionCode = try container.decode(
                    Swift.String.self,
                    forKey: .countrySubdivisionCode
                )
                self.localityName = try container.decode(
                    Swift.String.self,
                    forKey: .localityName
                )
                try decoder.ensureNoAdditionalProperties(knownKeys: [
                    "countryCode",
                    "countrySubdivisionCode",
                    "localityName"
                ])
            }
        }
        /// - Remark: Generated from `#/components/schemas/OrderActivityItem`.
        public struct OrderActivityItem: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/OrderActivityItem/activityKind`.
            @frozen public enum ActivityKindPayload: String, Codable, Hashable, Sendable, CaseIterable {
                case order = "order"
            }
            /// - Remark: Generated from `#/components/schemas/OrderActivityItem/activityKind`.
            public var activityKind: Components.Schemas.OrderActivityItem.ActivityKindPayload
            /// - Remark: Generated from `#/components/schemas/OrderActivityItem/providerOrderID`.
            public var providerOrderID: Swift.String
            /// - Remark: Generated from `#/components/schemas/OrderActivityItem/orderKind`.
            public var orderKind: Components.Schemas.OrderKind
            /// - Remark: Generated from `#/components/schemas/OrderActivityItem/assetKind`.
            public var assetKind: Components.Schemas.AssetKind
            /// - Remark: Generated from `#/components/schemas/OrderActivityItem/linkedAccountID`.
            public var linkedAccountID: Components.Schemas.LinkedAccountID
            /// - Remark: Generated from `#/components/schemas/OrderActivityItem/dateTime`.
            public var dateTime: Swift.String
            /// - Remark: Generated from `#/components/schemas/OrderActivityItem/amount`.
            public var amount: Swift.Double
            /// - Remark: Generated from `#/components/schemas/OrderActivityItem/details`.
            public var details: Components.Schemas.OrderDetails
            /// - Remark: Generated from `#/components/schemas/OrderActivityItem/symbol`.
            public var symbol: Swift.String
            /// - Remark: Generated from `#/components/schemas/OrderActivityItem/providerAssetID`.
            public var providerAssetID: Components.Schemas.ProviderAssetID
            /// - Remark: Generated from `#/components/schemas/OrderActivityItem/providerAssetHoldingAccountID`.
            public var providerAssetHoldingAccountID: Components.Schemas.ProviderAssetHoldingAccountID
            /// - Remark: Generated from `#/components/schemas/OrderActivityItem/provider`.
            public var provider: Components.Schemas.SupportedProvider
            /// - Remark: Generated from `#/components/schemas/OrderActivityItem/name`.
            public var name: Swift.String
            /// a string matching the pattern ^#[0-9A-Fa-f]{6}$
            ///
            /// - Remark: Generated from `#/components/schemas/OrderActivityItem/color`.
            public var color: Swift.String
            /// - Remark: Generated from `#/components/schemas/OrderActivityItem/logoURL`.
            public var logoURL: Swift.String
            /// Creates a new `OrderActivityItem`.
            ///
            /// - Parameters:
            ///   - activityKind:
            ///   - providerOrderID:
            ///   - orderKind:
            ///   - assetKind:
            ///   - linkedAccountID:
            ///   - dateTime:
            ///   - amount:
            ///   - details:
            ///   - symbol:
            ///   - providerAssetID:
            ///   - providerAssetHoldingAccountID:
            ///   - provider:
            ///   - name:
            ///   - color: a string matching the pattern ^#[0-9A-Fa-f]{6}$
            ///   - logoURL:
            public init(
                activityKind: Components.Schemas.OrderActivityItem.ActivityKindPayload,
                providerOrderID: Swift.String,
                orderKind: Components.Schemas.OrderKind,
                assetKind: Components.Schemas.AssetKind,
                linkedAccountID: Components.Schemas.LinkedAccountID,
                dateTime: Swift.String,
                amount: Swift.Double,
                details: Components.Schemas.OrderDetails,
                symbol: Swift.String,
                providerAssetID: Components.Schemas.ProviderAssetID,
                providerAssetHoldingAccountID: Components.Schemas.ProviderAssetHoldingAccountID,
                provider: Components.Schemas.SupportedProvider,
                name: Swift.String,
                color: Swift.String,
                logoURL: Swift.String
            ) {
                self.activityKind = activityKind
                self.providerOrderID = providerOrderID
                self.orderKind = orderKind
                self.assetKind = assetKind
                self.linkedAccountID = linkedAccountID
                self.dateTime = dateTime
                self.amount = amount
                self.details = details
                self.symbol = symbol
                self.providerAssetID = providerAssetID
                self.providerAssetHoldingAccountID = providerAssetHoldingAccountID
                self.provider = provider
                self.name = name
                self.color = color
                self.logoURL = logoURL
            }
            public enum CodingKeys: String, CodingKey {
                case activityKind
                case providerOrderID
                case orderKind
                case assetKind
                case linkedAccountID
                case dateTime
                case amount
                case details
                case symbol
                case providerAssetID
                case providerAssetHoldingAccountID
                case provider
                case name
                case color
                case logoURL
            }
            public init(from decoder: any Decoder) throws {
                let container = try decoder.container(keyedBy: CodingKeys.self)
                self.activityKind = try container.decode(
                    Components.Schemas.OrderActivityItem.ActivityKindPayload.self,
                    forKey: .activityKind
                )
                self.providerOrderID = try container.decode(
                    Swift.String.self,
                    forKey: .providerOrderID
                )
                self.orderKind = try container.decode(
                    Components.Schemas.OrderKind.self,
                    forKey: .orderKind
                )
                self.assetKind = try container.decode(
                    Components.Schemas.AssetKind.self,
                    forKey: .assetKind
                )
                self.linkedAccountID = try container.decode(
                    Components.Schemas.LinkedAccountID.self,
                    forKey: .linkedAccountID
                )
                self.dateTime = try container.decode(
                    Swift.String.self,
                    forKey: .dateTime
                )
                self.amount = try container.decode(
                    Swift.Double.self,
                    forKey: .amount
                )
                self.details = try container.decode(
                    Components.Schemas.OrderDetails.self,
                    forKey: .details
                )
                self.symbol = try container.decode(
                    Swift.String.self,
                    forKey: .symbol
                )
                self.providerAssetID = try container.decode(
                    Components.Schemas.ProviderAssetID.self,
                    forKey: .providerAssetID
                )
                self.providerAssetHoldingAccountID = try container.decode(
                    Components.Schemas.ProviderAssetHoldingAccountID.self,
                    forKey: .providerAssetHoldingAccountID
                )
                self.provider = try container.decode(
                    Components.Schemas.SupportedProvider.self,
                    forKey: .provider
                )
                self.name = try container.decode(
                    Swift.String.self,
                    forKey: .name
                )
                self.color = try container.decode(
                    Swift.String.self,
                    forKey: .color
                )
                self.logoURL = try container.decode(
                    Swift.String.self,
                    forKey: .logoURL
                )
                try decoder.ensureNoAdditionalProperties(knownKeys: [
                    "activityKind",
                    "providerOrderID",
                    "orderKind",
                    "assetKind",
                    "linkedAccountID",
                    "dateTime",
                    "amount",
                    "details",
                    "symbol",
                    "providerAssetID",
                    "providerAssetHoldingAccountID",
                    "provider",
                    "name",
                    "color",
                    "logoURL"
                ])
            }
        }
        /// - Remark: Generated from `#/components/schemas/OrderKind`.
        @frozen public enum OrderKind: String, Codable, Hashable, Sendable, CaseIterable {
            case reward = "reward"
            case fiat = "fiat"
        }
        /// - Remark: Generated from `#/components/schemas/OrderDetails`.
        @frozen public enum OrderDetails: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/OrderDetails/case1`.
            case OrderEmptyDetails(Components.Schemas.OrderEmptyDetails)
            /// - Remark: Generated from `#/components/schemas/OrderDetails/case2`.
            case OrderValueDetails(Components.Schemas.OrderValueDetails)
            public init(from decoder: any Decoder) throws {
                var errors: [any Error] = []
                do {
                    self = .OrderEmptyDetails(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                do {
                    self = .OrderValueDetails(try .init(from: decoder))
                    return
                } catch {
                    errors.append(error)
                }
                throw Swift.DecodingError.failedToDecodeOneOfSchema(
                    type: Self.self,
                    codingPath: decoder.codingPath,
                    errors: errors
                )
            }
            public func encode(to encoder: any Encoder) throws {
                switch self {
                case let .OrderEmptyDetails(value):
                    try value.encode(to: encoder)
                case let .OrderValueDetails(value):
                    try value.encode(to: encoder)
                }
            }
        }
        /// - Remark: Generated from `#/components/schemas/OrderEmptyDetails`.
        public struct OrderEmptyDetails: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/OrderEmptyDetails/state`.
            @frozen public enum StatePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case inProgress = "in_progress"
                case failure = "failure"
            }
            /// - Remark: Generated from `#/components/schemas/OrderEmptyDetails/state`.
            public var state: Components.Schemas.OrderEmptyDetails.StatePayload
            /// Creates a new `OrderEmptyDetails`.
            ///
            /// - Parameters:
            ///   - state:
            public init(state: Components.Schemas.OrderEmptyDetails.StatePayload) {
                self.state = state
            }
            public enum CodingKeys: String, CodingKey {
                case state
            }
            public init(from decoder: any Decoder) throws {
                let container = try decoder.container(keyedBy: CodingKeys.self)
                self.state = try container.decode(
                    Components.Schemas.OrderEmptyDetails.StatePayload.self,
                    forKey: .state
                )
                try decoder.ensureNoAdditionalProperties(knownKeys: [
                    "state"
                ])
            }
        }
        /// - Remark: Generated from `#/components/schemas/OrderValueDetails`.
        public struct OrderValueDetails: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/OrderValueDetails/state`.
            @frozen public enum StatePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case success = "success"
            }
            /// - Remark: Generated from `#/components/schemas/OrderValueDetails/state`.
            public var state: Components.Schemas.OrderValueDetails.StatePayload
            /// - Remark: Generated from `#/components/schemas/OrderValueDetails/value`.
            public var value: Swift.Double
            /// Creates a new `OrderValueDetails`.
            ///
            /// - Parameters:
            ///   - state:
            ///   - value:
            public init(
                state: Components.Schemas.OrderValueDetails.StatePayload,
                value: Swift.Double
            ) {
                self.state = state
                self.value = value
            }
            public enum CodingKeys: String, CodingKey {
                case state
                case value
            }
            public init(from decoder: any Decoder) throws {
                let container = try decoder.container(keyedBy: CodingKeys.self)
                self.state = try container.decode(
                    Components.Schemas.OrderValueDetails.StatePayload.self,
                    forKey: .state
                )
                self.value = try container.decode(
                    Swift.Double.self,
                    forKey: .value
                )
                try decoder.ensureNoAdditionalProperties(knownKeys: [
                    "state",
                    "value"
                ])
            }
        }
        /// - Remark: Generated from `#/components/schemas/ProviderAssetID`.
        public typealias ProviderAssetID = Swift.String
        /// - Remark: Generated from `#/components/schemas/ProviderAssetHoldingAccountID`.
        public typealias ProviderAssetHoldingAccountID = Swift.String
    }
    /// Types generated from the `#/components/parameters` section of the OpenAPI document.
    public enum Parameters {}
    /// Types generated from the `#/components/requestBodies` section of the OpenAPI document.
    public enum RequestBodies {}
    /// Types generated from the `#/components/responses` section of the OpenAPI document.
    public enum Responses {}
    /// Types generated from the `#/components/headers` section of the OpenAPI document.
    public enum Headers {}
}

/// API operations, with input and output types, generated from `#/paths` in the OpenAPI document.
public enum Operations {
    /// - Remark: HTTP `POST /users`.
    /// - Remark: Generated from `#/paths//users/post(postUsers)`.
    public enum PostUsers {
        public static let id: Swift.String = "postUsers"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/users/POST/header`.
            public struct Headers: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/users/POST/header/anonymous-user-id`.
                public var anonymousUserId: Swift.String
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.PostUsers.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - anonymousUserId:
                ///   - accept:
                public init(
                    anonymousUserId: Swift.String,
                    accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.PostUsers.AcceptableContentType>] = .defaultValues()
                ) {
                    self.anonymousUserId = anonymousUserId
                    self.accept = accept
                }
            }
            public var headers: Operations.PostUsers.Input.Headers
            /// - Remark: Generated from `#/paths/users/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/users/POST/requestBody/content/application\/json`.
                case json(Components.Schemas.AppUser)
            }
            public var body: Operations.PostUsers.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.PostUsers.Input.Headers,
                body: Operations.PostUsers.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Created: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/users/POST/responses/201/headers`.
                public struct Headers: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/users/POST/responses/201/headers/authorization`.
                    public var authorization: Swift.String
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - authorization:
                    public init(authorization: Swift.String) {
                        self.authorization = authorization
                    }
                }
                /// Received HTTP response headers
                public var headers: Operations.PostUsers.Output.Created.Headers
                /// Creates a new `Created`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                public init(headers: Operations.PostUsers.Output.Created.Headers) {
                    self.headers = headers
                }
            }
            /// FIXME
            ///
            /// - Remark: Generated from `#/paths//users/post(postUsers)/responses/201`.
            ///
            /// HTTP response code: `201 created`.
            case created(Operations.PostUsers.Output.Created)
            /// The associated value of the enum case if `self` is `.created`.
            ///
            /// - Throws: An error if `self` is not `.created`.
            /// - SeeAlso: `.created`.
            public var created: Operations.PostUsers.Output.Created {
                get throws {
                    switch self {
                    case let .created(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "created",
                            response: self
                        )
                    }
                }
            }
            public struct Unauthorized: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/users/POST/responses/401/headers`.
                public struct Headers: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/users/POST/responses/401/headers/Content-Type`.
                    @frozen public enum ContentTypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                        case applicationJson = "application/json"
                    }
                    /// - Remark: Generated from `#/paths/users/POST/responses/401/headers/Content-Type`.
                    public var contentType: Operations.PostUsers.Output.Unauthorized.Headers.ContentTypePayload?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - contentType:
                    public init(contentType: Operations.PostUsers.Output.Unauthorized.Headers.ContentTypePayload? = nil) {
                        self.contentType = contentType
                    }
                }
                /// Received HTTP response headers
                public var headers: Operations.PostUsers.Output.Unauthorized.Headers
                /// - Remark: Generated from `#/paths/users/POST/responses/401/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/users/POST/responses/401/content/json`.
                    public struct JsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/users/POST/responses/401/content/json/kind`.
                        @frozen public enum KindPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case badAuthorization_app = "bad_authorization.app"
                        }
                        /// - Remark: Generated from `#/paths/users/POST/responses/401/content/json/kind`.
                        public var kind: Operations.PostUsers.Output.Unauthorized.Body.JsonPayload.KindPayload
                        /// - Remark: Generated from `#/paths/users/POST/responses/401/content/json/message`.
                        public var message: Swift.String
                        /// - Remark: Generated from `#/paths/users/POST/responses/401/content/json/details`.
                        public var details: Swift.String?
                        /// Creates a new `JsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - kind:
                        ///   - message:
                        ///   - details:
                        public init(
                            kind: Operations.PostUsers.Output.Unauthorized.Body.JsonPayload.KindPayload,
                            message: Swift.String,
                            details: Swift.String? = nil
                        ) {
                            self.kind = kind
                            self.message = message
                            self.details = details
                        }
                        public enum CodingKeys: String, CodingKey {
                            case kind
                            case message
                            case details
                        }
                        public init(from decoder: any Decoder) throws {
                            let container = try decoder.container(keyedBy: CodingKeys.self)
                            self.kind = try container.decode(
                                Operations.PostUsers.Output.Unauthorized.Body.JsonPayload.KindPayload.self,
                                forKey: .kind
                            )
                            self.message = try container.decode(
                                Swift.String.self,
                                forKey: .message
                            )
                            self.details = try container.decodeIfPresent(
                                Swift.String.self,
                                forKey: .details
                            )
                            try decoder.ensureNoAdditionalProperties(knownKeys: [
                                "kind",
                                "message",
                                "details"
                            ])
                        }
                    }
                    /// - Remark: Generated from `#/paths/users/POST/responses/401/content/application\/json`.
                    case json(Operations.PostUsers.Output.Unauthorized.Body.JsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.PostUsers.Output.Unauthorized.Body.JsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.PostUsers.Output.Unauthorized.Body
                /// Creates a new `Unauthorized`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                public init(
                    headers: Operations.PostUsers.Output.Unauthorized.Headers = .init(),
                    body: Operations.PostUsers.Output.Unauthorized.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// FIXME
            ///
            /// - Remark: Generated from `#/paths//users/post(postUsers)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Operations.PostUsers.Output.Unauthorized)
            /// The associated value of the enum case if `self` is `.unauthorized`.
            ///
            /// - Throws: An error if `self` is not `.unauthorized`.
            /// - SeeAlso: `.unauthorized`.
            public var unauthorized: Operations.PostUsers.Output.Unauthorized {
                get throws {
                    switch self {
                    case let .unauthorized(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unauthorized",
                            response: self
                        )
                    }
                }
            }
            public struct Forbidden: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/users/POST/responses/403/headers`.
                public struct Headers: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/users/POST/responses/403/headers/Content-Type`.
                    @frozen public enum ContentTypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                        case applicationJson = "application/json"
                    }
                    /// - Remark: Generated from `#/paths/users/POST/responses/403/headers/Content-Type`.
                    public var contentType: Operations.PostUsers.Output.Forbidden.Headers.ContentTypePayload?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - contentType:
                    public init(contentType: Operations.PostUsers.Output.Forbidden.Headers.ContentTypePayload? = nil) {
                        self.contentType = contentType
                    }
                }
                /// Received HTTP response headers
                public var headers: Operations.PostUsers.Output.Forbidden.Headers
                /// - Remark: Generated from `#/paths/users/POST/responses/403/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/users/POST/responses/403/content/json`.
                    public struct JsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/users/POST/responses/403/content/json/kind`.
                        @frozen public enum KindPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case disabledPendingPayment_app = "disabled_pending_payment.app"
                        }
                        /// - Remark: Generated from `#/paths/users/POST/responses/403/content/json/kind`.
                        public var kind: Operations.PostUsers.Output.Forbidden.Body.JsonPayload.KindPayload
                        /// - Remark: Generated from `#/paths/users/POST/responses/403/content/json/message`.
                        public var message: Swift.String
                        /// - Remark: Generated from `#/paths/users/POST/responses/403/content/json/details`.
                        public var details: Swift.String?
                        /// Creates a new `JsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - kind:
                        ///   - message:
                        ///   - details:
                        public init(
                            kind: Operations.PostUsers.Output.Forbidden.Body.JsonPayload.KindPayload,
                            message: Swift.String,
                            details: Swift.String? = nil
                        ) {
                            self.kind = kind
                            self.message = message
                            self.details = details
                        }
                        public enum CodingKeys: String, CodingKey {
                            case kind
                            case message
                            case details
                        }
                        public init(from decoder: any Decoder) throws {
                            let container = try decoder.container(keyedBy: CodingKeys.self)
                            self.kind = try container.decode(
                                Operations.PostUsers.Output.Forbidden.Body.JsonPayload.KindPayload.self,
                                forKey: .kind
                            )
                            self.message = try container.decode(
                                Swift.String.self,
                                forKey: .message
                            )
                            self.details = try container.decodeIfPresent(
                                Swift.String.self,
                                forKey: .details
                            )
                            try decoder.ensureNoAdditionalProperties(knownKeys: [
                                "kind",
                                "message",
                                "details"
                            ])
                        }
                    }
                    /// - Remark: Generated from `#/paths/users/POST/responses/403/content/application\/json`.
                    case json(Operations.PostUsers.Output.Forbidden.Body.JsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.PostUsers.Output.Forbidden.Body.JsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.PostUsers.Output.Forbidden.Body
                /// Creates a new `Forbidden`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                public init(
                    headers: Operations.PostUsers.Output.Forbidden.Headers = .init(),
                    body: Operations.PostUsers.Output.Forbidden.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// FIXME
            ///
            /// - Remark: Generated from `#/paths//users/post(postUsers)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Operations.PostUsers.Output.Forbidden)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            public var forbidden: Operations.PostUsers.Output.Forbidden {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            public struct NotFound: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/users/POST/responses/404/headers`.
                public struct Headers: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/users/POST/responses/404/headers/Content-Type`.
                    @frozen public enum ContentTypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                        case applicationJson = "application/json"
                    }
                    /// - Remark: Generated from `#/paths/users/POST/responses/404/headers/Content-Type`.
                    public var contentType: Operations.PostUsers.Output.NotFound.Headers.ContentTypePayload?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - contentType:
                    public init(contentType: Operations.PostUsers.Output.NotFound.Headers.ContentTypePayload? = nil) {
                        self.contentType = contentType
                    }
                }
                /// Received HTTP response headers
                public var headers: Operations.PostUsers.Output.NotFound.Headers
                /// - Remark: Generated from `#/paths/users/POST/responses/404/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/users/POST/responses/404/content/json`.
                    public struct JsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/users/POST/responses/404/content/json/kind`.
                        @frozen public enum KindPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case notFound_app = "not_found.app"
                        }
                        /// - Remark: Generated from `#/paths/users/POST/responses/404/content/json/kind`.
                        public var kind: Operations.PostUsers.Output.NotFound.Body.JsonPayload.KindPayload
                        /// - Remark: Generated from `#/paths/users/POST/responses/404/content/json/message`.
                        public var message: Swift.String
                        /// - Remark: Generated from `#/paths/users/POST/responses/404/content/json/details`.
                        public var details: Swift.String?
                        /// Creates a new `JsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - kind:
                        ///   - message:
                        ///   - details:
                        public init(
                            kind: Operations.PostUsers.Output.NotFound.Body.JsonPayload.KindPayload,
                            message: Swift.String,
                            details: Swift.String? = nil
                        ) {
                            self.kind = kind
                            self.message = message
                            self.details = details
                        }
                        public enum CodingKeys: String, CodingKey {
                            case kind
                            case message
                            case details
                        }
                        public init(from decoder: any Decoder) throws {
                            let container = try decoder.container(keyedBy: CodingKeys.self)
                            self.kind = try container.decode(
                                Operations.PostUsers.Output.NotFound.Body.JsonPayload.KindPayload.self,
                                forKey: .kind
                            )
                            self.message = try container.decode(
                                Swift.String.self,
                                forKey: .message
                            )
                            self.details = try container.decodeIfPresent(
                                Swift.String.self,
                                forKey: .details
                            )
                            try decoder.ensureNoAdditionalProperties(knownKeys: [
                                "kind",
                                "message",
                                "details"
                            ])
                        }
                    }
                    /// - Remark: Generated from `#/paths/users/POST/responses/404/content/application\/json`.
                    case json(Operations.PostUsers.Output.NotFound.Body.JsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.PostUsers.Output.NotFound.Body.JsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.PostUsers.Output.NotFound.Body
                /// Creates a new `NotFound`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                public init(
                    headers: Operations.PostUsers.Output.NotFound.Headers = .init(),
                    body: Operations.PostUsers.Output.NotFound.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// FIXME
            ///
            /// - Remark: Generated from `#/paths//users/post(postUsers)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Operations.PostUsers.Output.NotFound)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Operations.PostUsers.Output.NotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            public struct UnprocessableContent: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/users/POST/responses/422/headers`.
                public struct Headers: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/users/POST/responses/422/headers/Content-Type`.
                    @frozen public enum ContentTypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                        case applicationJson = "application/json"
                    }
                    /// - Remark: Generated from `#/paths/users/POST/responses/422/headers/Content-Type`.
                    public var contentType: Operations.PostUsers.Output.UnprocessableContent.Headers.ContentTypePayload?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - contentType:
                    public init(contentType: Operations.PostUsers.Output.UnprocessableContent.Headers.ContentTypePayload? = nil) {
                        self.contentType = contentType
                    }
                }
                /// Received HTTP response headers
                public var headers: Operations.PostUsers.Output.UnprocessableContent.Headers
                /// - Remark: Generated from `#/paths/users/POST/responses/422/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/users/POST/responses/422/content/json`.
                    public struct JsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/users/POST/responses/422/content/json/kind`.
                        @frozen public enum KindPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case schemaInvalid_request = "schema_invalid.request"
                        }
                        /// - Remark: Generated from `#/paths/users/POST/responses/422/content/json/kind`.
                        public var kind: Operations.PostUsers.Output.UnprocessableContent.Body.JsonPayload.KindPayload
                        /// - Remark: Generated from `#/paths/users/POST/responses/422/content/json/message`.
                        public var message: Swift.String
                        /// - Remark: Generated from `#/paths/users/POST/responses/422/content/json/details`.
                        public var details: Swift.String?
                        /// Creates a new `JsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - kind:
                        ///   - message:
                        ///   - details:
                        public init(
                            kind: Operations.PostUsers.Output.UnprocessableContent.Body.JsonPayload.KindPayload,
                            message: Swift.String,
                            details: Swift.String? = nil
                        ) {
                            self.kind = kind
                            self.message = message
                            self.details = details
                        }
                        public enum CodingKeys: String, CodingKey {
                            case kind
                            case message
                            case details
                        }
                        public init(from decoder: any Decoder) throws {
                            let container = try decoder.container(keyedBy: CodingKeys.self)
                            self.kind = try container.decode(
                                Operations.PostUsers.Output.UnprocessableContent.Body.JsonPayload.KindPayload.self,
                                forKey: .kind
                            )
                            self.message = try container.decode(
                                Swift.String.self,
                                forKey: .message
                            )
                            self.details = try container.decodeIfPresent(
                                Swift.String.self,
                                forKey: .details
                            )
                            try decoder.ensureNoAdditionalProperties(knownKeys: [
                                "kind",
                                "message",
                                "details"
                            ])
                        }
                    }
                    /// - Remark: Generated from `#/paths/users/POST/responses/422/content/application\/json`.
                    case json(Operations.PostUsers.Output.UnprocessableContent.Body.JsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.PostUsers.Output.UnprocessableContent.Body.JsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.PostUsers.Output.UnprocessableContent.Body
                /// Creates a new `UnprocessableContent`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                public init(
                    headers: Operations.PostUsers.Output.UnprocessableContent.Headers = .init(),
                    body: Operations.PostUsers.Output.UnprocessableContent.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// FIXME
            ///
            /// - Remark: Generated from `#/paths//users/post(postUsers)/responses/422`.
            ///
            /// HTTP response code: `422 unprocessableContent`.
            case unprocessableContent(Operations.PostUsers.Output.UnprocessableContent)
            /// The associated value of the enum case if `self` is `.unprocessableContent`.
            ///
            /// - Throws: An error if `self` is not `.unprocessableContent`.
            /// - SeeAlso: `.unprocessableContent`.
            public var unprocessableContent: Operations.PostUsers.Output.UnprocessableContent {
                get throws {
                    switch self {
                    case let .unprocessableContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unprocessableContent",
                            response: self
                        )
                    }
                }
            }
            public struct TooManyRequests: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/users/POST/responses/429/headers`.
                public struct Headers: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/users/POST/responses/429/headers/Content-Type`.
                    @frozen public enum ContentTypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                        case applicationJson = "application/json"
                    }
                    /// - Remark: Generated from `#/paths/users/POST/responses/429/headers/Content-Type`.
                    public var contentType: Operations.PostUsers.Output.TooManyRequests.Headers.ContentTypePayload?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - contentType:
                    public init(contentType: Operations.PostUsers.Output.TooManyRequests.Headers.ContentTypePayload? = nil) {
                        self.contentType = contentType
                    }
                }
                /// Received HTTP response headers
                public var headers: Operations.PostUsers.Output.TooManyRequests.Headers
                /// - Remark: Generated from `#/paths/users/POST/responses/429/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/users/POST/responses/429/content/json`.
                    public struct JsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/users/POST/responses/429/content/json/kind`.
                        @frozen public enum KindPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case overUserLimit_app = "over_user_limit.app"
                        }
                        /// - Remark: Generated from `#/paths/users/POST/responses/429/content/json/kind`.
                        public var kind: Operations.PostUsers.Output.TooManyRequests.Body.JsonPayload.KindPayload
                        /// - Remark: Generated from `#/paths/users/POST/responses/429/content/json/message`.
                        public var message: Swift.String
                        /// - Remark: Generated from `#/paths/users/POST/responses/429/content/json/details`.
                        public var details: Swift.String?
                        /// Creates a new `JsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - kind:
                        ///   - message:
                        ///   - details:
                        public init(
                            kind: Operations.PostUsers.Output.TooManyRequests.Body.JsonPayload.KindPayload,
                            message: Swift.String,
                            details: Swift.String? = nil
                        ) {
                            self.kind = kind
                            self.message = message
                            self.details = details
                        }
                        public enum CodingKeys: String, CodingKey {
                            case kind
                            case message
                            case details
                        }
                        public init(from decoder: any Decoder) throws {
                            let container = try decoder.container(keyedBy: CodingKeys.self)
                            self.kind = try container.decode(
                                Operations.PostUsers.Output.TooManyRequests.Body.JsonPayload.KindPayload.self,
                                forKey: .kind
                            )
                            self.message = try container.decode(
                                Swift.String.self,
                                forKey: .message
                            )
                            self.details = try container.decodeIfPresent(
                                Swift.String.self,
                                forKey: .details
                            )
                            try decoder.ensureNoAdditionalProperties(knownKeys: [
                                "kind",
                                "message",
                                "details"
                            ])
                        }
                    }
                    /// - Remark: Generated from `#/paths/users/POST/responses/429/content/application\/json`.
                    case json(Operations.PostUsers.Output.TooManyRequests.Body.JsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.PostUsers.Output.TooManyRequests.Body.JsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.PostUsers.Output.TooManyRequests.Body
                /// Creates a new `TooManyRequests`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                public init(
                    headers: Operations.PostUsers.Output.TooManyRequests.Headers = .init(),
                    body: Operations.PostUsers.Output.TooManyRequests.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// FIXME
            ///
            /// - Remark: Generated from `#/paths//users/post(postUsers)/responses/429`.
            ///
            /// HTTP response code: `429 tooManyRequests`.
            case tooManyRequests(Operations.PostUsers.Output.TooManyRequests)
            /// The associated value of the enum case if `self` is `.tooManyRequests`.
            ///
            /// - Throws: An error if `self` is not `.tooManyRequests`.
            /// - SeeAlso: `.tooManyRequests`.
            public var tooManyRequests: Operations.PostUsers.Output.TooManyRequests {
                get throws {
                    switch self {
                    case let .tooManyRequests(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "tooManyRequests",
                            response: self
                        )
                    }
                }
            }
            public struct InternalServerError: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/users/POST/responses/500/headers`.
                public struct Headers: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/users/POST/responses/500/headers/Content-Type`.
                    @frozen public enum ContentTypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                        case applicationJson = "application/json"
                    }
                    /// - Remark: Generated from `#/paths/users/POST/responses/500/headers/Content-Type`.
                    public var contentType: Operations.PostUsers.Output.InternalServerError.Headers.ContentTypePayload?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - contentType:
                    public init(contentType: Operations.PostUsers.Output.InternalServerError.Headers.ContentTypePayload? = nil) {
                        self.contentType = contentType
                    }
                }
                /// Received HTTP response headers
                public var headers: Operations.PostUsers.Output.InternalServerError.Headers
                /// - Remark: Generated from `#/paths/users/POST/responses/500/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/users/POST/responses/500/content/json`.
                    public struct JsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/users/POST/responses/500/content/json/kind`.
                        @frozen public enum KindPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case unexpected = "unexpected"
                        }
                        /// - Remark: Generated from `#/paths/users/POST/responses/500/content/json/kind`.
                        public var kind: Operations.PostUsers.Output.InternalServerError.Body.JsonPayload.KindPayload
                        /// - Remark: Generated from `#/paths/users/POST/responses/500/content/json/message`.
                        public var message: Swift.String
                        /// - Remark: Generated from `#/paths/users/POST/responses/500/content/json/details`.
                        public var details: Swift.String?
                        /// Creates a new `JsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - kind:
                        ///   - message:
                        ///   - details:
                        public init(
                            kind: Operations.PostUsers.Output.InternalServerError.Body.JsonPayload.KindPayload,
                            message: Swift.String,
                            details: Swift.String? = nil
                        ) {
                            self.kind = kind
                            self.message = message
                            self.details = details
                        }
                        public enum CodingKeys: String, CodingKey {
                            case kind
                            case message
                            case details
                        }
                        public init(from decoder: any Decoder) throws {
                            let container = try decoder.container(keyedBy: CodingKeys.self)
                            self.kind = try container.decode(
                                Operations.PostUsers.Output.InternalServerError.Body.JsonPayload.KindPayload.self,
                                forKey: .kind
                            )
                            self.message = try container.decode(
                                Swift.String.self,
                                forKey: .message
                            )
                            self.details = try container.decodeIfPresent(
                                Swift.String.self,
                                forKey: .details
                            )
                            try decoder.ensureNoAdditionalProperties(knownKeys: [
                                "kind",
                                "message",
                                "details"
                            ])
                        }
                    }
                    /// - Remark: Generated from `#/paths/users/POST/responses/500/content/application\/json`.
                    case json(Operations.PostUsers.Output.InternalServerError.Body.JsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.PostUsers.Output.InternalServerError.Body.JsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.PostUsers.Output.InternalServerError.Body
                /// Creates a new `InternalServerError`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                public init(
                    headers: Operations.PostUsers.Output.InternalServerError.Headers = .init(),
                    body: Operations.PostUsers.Output.InternalServerError.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// FIXME
            ///
            /// - Remark: Generated from `#/paths//users/post(postUsers)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Operations.PostUsers.Output.InternalServerError)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            public var internalServerError: Operations.PostUsers.Output.InternalServerError {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// - Remark: HTTP `PUT /users`.
    /// - Remark: Generated from `#/paths//users/put(putUsers)`.
    public enum PutUsers {
        public static let id: Swift.String = "putUsers"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/users/PUT/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.PutUsers.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.PutUsers.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.PutUsers.Input.Headers
            /// - Remark: Generated from `#/paths/users/PUT/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/users/PUT/requestBody/content/application\/json`.
                case json(Components.Schemas.AppUser)
            }
            public var body: Operations.PutUsers.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.PutUsers.Input.Headers = .init(),
                body: Operations.PutUsers.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct NoContent: Sendable, Hashable {
                /// Creates a new `NoContent`.
                public init() {}
            }
            /// FIXME
            ///
            /// - Remark: Generated from `#/paths//users/put(putUsers)/responses/204`.
            ///
            /// HTTP response code: `204 noContent`.
            case noContent(Operations.PutUsers.Output.NoContent)
            /// FIXME
            ///
            /// - Remark: Generated from `#/paths//users/put(putUsers)/responses/204`.
            ///
            /// HTTP response code: `204 noContent`.
            public static var noContent: Self {
                .noContent(.init())
            }
            /// The associated value of the enum case if `self` is `.noContent`.
            ///
            /// - Throws: An error if `self` is not `.noContent`.
            /// - SeeAlso: `.noContent`.
            public var noContent: Operations.PutUsers.Output.NoContent {
                get throws {
                    switch self {
                    case let .noContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "noContent",
                            response: self
                        )
                    }
                }
            }
            public struct Unauthorized: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/users/PUT/responses/401/headers`.
                public struct Headers: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/users/PUT/responses/401/headers/Content-Type`.
                    @frozen public enum ContentTypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                        case applicationJson = "application/json"
                    }
                    /// - Remark: Generated from `#/paths/users/PUT/responses/401/headers/Content-Type`.
                    public var contentType: Operations.PutUsers.Output.Unauthorized.Headers.ContentTypePayload?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - contentType:
                    public init(contentType: Operations.PutUsers.Output.Unauthorized.Headers.ContentTypePayload? = nil) {
                        self.contentType = contentType
                    }
                }
                /// Received HTTP response headers
                public var headers: Operations.PutUsers.Output.Unauthorized.Headers
                /// - Remark: Generated from `#/paths/users/PUT/responses/401/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/users/PUT/responses/401/content/json`.
                    public struct JsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/users/PUT/responses/401/content/json/kind`.
                        @frozen public enum KindPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case badAuthorization_user = "bad_authorization.user"
                            case badAuthorization_app = "bad_authorization.app"
                        }
                        /// - Remark: Generated from `#/paths/users/PUT/responses/401/content/json/kind`.
                        public var kind: Operations.PutUsers.Output.Unauthorized.Body.JsonPayload.KindPayload
                        /// - Remark: Generated from `#/paths/users/PUT/responses/401/content/json/message`.
                        public var message: Swift.String
                        /// - Remark: Generated from `#/paths/users/PUT/responses/401/content/json/details`.
                        public var details: Swift.String?
                        /// Creates a new `JsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - kind:
                        ///   - message:
                        ///   - details:
                        public init(
                            kind: Operations.PutUsers.Output.Unauthorized.Body.JsonPayload.KindPayload,
                            message: Swift.String,
                            details: Swift.String? = nil
                        ) {
                            self.kind = kind
                            self.message = message
                            self.details = details
                        }
                        public enum CodingKeys: String, CodingKey {
                            case kind
                            case message
                            case details
                        }
                        public init(from decoder: any Decoder) throws {
                            let container = try decoder.container(keyedBy: CodingKeys.self)
                            self.kind = try container.decode(
                                Operations.PutUsers.Output.Unauthorized.Body.JsonPayload.KindPayload.self,
                                forKey: .kind
                            )
                            self.message = try container.decode(
                                Swift.String.self,
                                forKey: .message
                            )
                            self.details = try container.decodeIfPresent(
                                Swift.String.self,
                                forKey: .details
                            )
                            try decoder.ensureNoAdditionalProperties(knownKeys: [
                                "kind",
                                "message",
                                "details"
                            ])
                        }
                    }
                    /// - Remark: Generated from `#/paths/users/PUT/responses/401/content/application\/json`.
                    case json(Operations.PutUsers.Output.Unauthorized.Body.JsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.PutUsers.Output.Unauthorized.Body.JsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.PutUsers.Output.Unauthorized.Body
                /// Creates a new `Unauthorized`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                public init(
                    headers: Operations.PutUsers.Output.Unauthorized.Headers = .init(),
                    body: Operations.PutUsers.Output.Unauthorized.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// FIXME
            ///
            /// - Remark: Generated from `#/paths//users/put(putUsers)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Operations.PutUsers.Output.Unauthorized)
            /// The associated value of the enum case if `self` is `.unauthorized`.
            ///
            /// - Throws: An error if `self` is not `.unauthorized`.
            /// - SeeAlso: `.unauthorized`.
            public var unauthorized: Operations.PutUsers.Output.Unauthorized {
                get throws {
                    switch self {
                    case let .unauthorized(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unauthorized",
                            response: self
                        )
                    }
                }
            }
            public struct Forbidden: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/users/PUT/responses/403/headers`.
                public struct Headers: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/users/PUT/responses/403/headers/Content-Type`.
                    @frozen public enum ContentTypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                        case applicationJson = "application/json"
                    }
                    /// - Remark: Generated from `#/paths/users/PUT/responses/403/headers/Content-Type`.
                    public var contentType: Operations.PutUsers.Output.Forbidden.Headers.ContentTypePayload?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - contentType:
                    public init(contentType: Operations.PutUsers.Output.Forbidden.Headers.ContentTypePayload? = nil) {
                        self.contentType = contentType
                    }
                }
                /// Received HTTP response headers
                public var headers: Operations.PutUsers.Output.Forbidden.Headers
                /// - Remark: Generated from `#/paths/users/PUT/responses/403/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/users/PUT/responses/403/content/json`.
                    public struct JsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/users/PUT/responses/403/content/json/kind`.
                        @frozen public enum KindPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case disabledPendingPayment_app = "disabled_pending_payment.app"
                        }
                        /// - Remark: Generated from `#/paths/users/PUT/responses/403/content/json/kind`.
                        public var kind: Operations.PutUsers.Output.Forbidden.Body.JsonPayload.KindPayload
                        /// - Remark: Generated from `#/paths/users/PUT/responses/403/content/json/message`.
                        public var message: Swift.String
                        /// - Remark: Generated from `#/paths/users/PUT/responses/403/content/json/details`.
                        public var details: Swift.String?
                        /// Creates a new `JsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - kind:
                        ///   - message:
                        ///   - details:
                        public init(
                            kind: Operations.PutUsers.Output.Forbidden.Body.JsonPayload.KindPayload,
                            message: Swift.String,
                            details: Swift.String? = nil
                        ) {
                            self.kind = kind
                            self.message = message
                            self.details = details
                        }
                        public enum CodingKeys: String, CodingKey {
                            case kind
                            case message
                            case details
                        }
                        public init(from decoder: any Decoder) throws {
                            let container = try decoder.container(keyedBy: CodingKeys.self)
                            self.kind = try container.decode(
                                Operations.PutUsers.Output.Forbidden.Body.JsonPayload.KindPayload.self,
                                forKey: .kind
                            )
                            self.message = try container.decode(
                                Swift.String.self,
                                forKey: .message
                            )
                            self.details = try container.decodeIfPresent(
                                Swift.String.self,
                                forKey: .details
                            )
                            try decoder.ensureNoAdditionalProperties(knownKeys: [
                                "kind",
                                "message",
                                "details"
                            ])
                        }
                    }
                    /// - Remark: Generated from `#/paths/users/PUT/responses/403/content/application\/json`.
                    case json(Operations.PutUsers.Output.Forbidden.Body.JsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.PutUsers.Output.Forbidden.Body.JsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.PutUsers.Output.Forbidden.Body
                /// Creates a new `Forbidden`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                public init(
                    headers: Operations.PutUsers.Output.Forbidden.Headers = .init(),
                    body: Operations.PutUsers.Output.Forbidden.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// FIXME
            ///
            /// - Remark: Generated from `#/paths//users/put(putUsers)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Operations.PutUsers.Output.Forbidden)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            public var forbidden: Operations.PutUsers.Output.Forbidden {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            public struct NotFound: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/users/PUT/responses/404/headers`.
                public struct Headers: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/users/PUT/responses/404/headers/Content-Type`.
                    @frozen public enum ContentTypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                        case applicationJson = "application/json"
                    }
                    /// - Remark: Generated from `#/paths/users/PUT/responses/404/headers/Content-Type`.
                    public var contentType: Operations.PutUsers.Output.NotFound.Headers.ContentTypePayload?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - contentType:
                    public init(contentType: Operations.PutUsers.Output.NotFound.Headers.ContentTypePayload? = nil) {
                        self.contentType = contentType
                    }
                }
                /// Received HTTP response headers
                public var headers: Operations.PutUsers.Output.NotFound.Headers
                /// - Remark: Generated from `#/paths/users/PUT/responses/404/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/users/PUT/responses/404/content/json`.
                    public struct JsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/users/PUT/responses/404/content/json/kind`.
                        @frozen public enum KindPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case notFound_user = "not_found.user"
                            case notFound_app = "not_found.app"
                        }
                        /// - Remark: Generated from `#/paths/users/PUT/responses/404/content/json/kind`.
                        public var kind: Operations.PutUsers.Output.NotFound.Body.JsonPayload.KindPayload
                        /// - Remark: Generated from `#/paths/users/PUT/responses/404/content/json/message`.
                        public var message: Swift.String
                        /// - Remark: Generated from `#/paths/users/PUT/responses/404/content/json/details`.
                        public var details: Swift.String?
                        /// Creates a new `JsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - kind:
                        ///   - message:
                        ///   - details:
                        public init(
                            kind: Operations.PutUsers.Output.NotFound.Body.JsonPayload.KindPayload,
                            message: Swift.String,
                            details: Swift.String? = nil
                        ) {
                            self.kind = kind
                            self.message = message
                            self.details = details
                        }
                        public enum CodingKeys: String, CodingKey {
                            case kind
                            case message
                            case details
                        }
                        public init(from decoder: any Decoder) throws {
                            let container = try decoder.container(keyedBy: CodingKeys.self)
                            self.kind = try container.decode(
                                Operations.PutUsers.Output.NotFound.Body.JsonPayload.KindPayload.self,
                                forKey: .kind
                            )
                            self.message = try container.decode(
                                Swift.String.self,
                                forKey: .message
                            )
                            self.details = try container.decodeIfPresent(
                                Swift.String.self,
                                forKey: .details
                            )
                            try decoder.ensureNoAdditionalProperties(knownKeys: [
                                "kind",
                                "message",
                                "details"
                            ])
                        }
                    }
                    /// - Remark: Generated from `#/paths/users/PUT/responses/404/content/application\/json`.
                    case json(Operations.PutUsers.Output.NotFound.Body.JsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.PutUsers.Output.NotFound.Body.JsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.PutUsers.Output.NotFound.Body
                /// Creates a new `NotFound`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                public init(
                    headers: Operations.PutUsers.Output.NotFound.Headers = .init(),
                    body: Operations.PutUsers.Output.NotFound.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// FIXME
            ///
            /// - Remark: Generated from `#/paths//users/put(putUsers)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Operations.PutUsers.Output.NotFound)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Operations.PutUsers.Output.NotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            public struct Conflict: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/users/PUT/responses/409/headers`.
                public struct Headers: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/users/PUT/responses/409/headers/Content-Type`.
                    @frozen public enum ContentTypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                        case applicationJson = "application/json"
                    }
                    /// - Remark: Generated from `#/paths/users/PUT/responses/409/headers/Content-Type`.
                    public var contentType: Operations.PutUsers.Output.Conflict.Headers.ContentTypePayload?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - contentType:
                    public init(contentType: Operations.PutUsers.Output.Conflict.Headers.ContentTypePayload? = nil) {
                        self.contentType = contentType
                    }
                }
                /// Received HTTP response headers
                public var headers: Operations.PutUsers.Output.Conflict.Headers
                /// - Remark: Generated from `#/paths/users/PUT/responses/409/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/users/PUT/responses/409/content/json`.
                    public struct JsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/users/PUT/responses/409/content/json/kind`.
                        @frozen public enum KindPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case different_app = "different.app"
                            case different_appUser = "different.app_user"
                        }
                        /// - Remark: Generated from `#/paths/users/PUT/responses/409/content/json/kind`.
                        public var kind: Operations.PutUsers.Output.Conflict.Body.JsonPayload.KindPayload
                        /// - Remark: Generated from `#/paths/users/PUT/responses/409/content/json/message`.
                        public var message: Swift.String
                        /// - Remark: Generated from `#/paths/users/PUT/responses/409/content/json/details`.
                        public var details: Swift.String?
                        /// Creates a new `JsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - kind:
                        ///   - message:
                        ///   - details:
                        public init(
                            kind: Operations.PutUsers.Output.Conflict.Body.JsonPayload.KindPayload,
                            message: Swift.String,
                            details: Swift.String? = nil
                        ) {
                            self.kind = kind
                            self.message = message
                            self.details = details
                        }
                        public enum CodingKeys: String, CodingKey {
                            case kind
                            case message
                            case details
                        }
                        public init(from decoder: any Decoder) throws {
                            let container = try decoder.container(keyedBy: CodingKeys.self)
                            self.kind = try container.decode(
                                Operations.PutUsers.Output.Conflict.Body.JsonPayload.KindPayload.self,
                                forKey: .kind
                            )
                            self.message = try container.decode(
                                Swift.String.self,
                                forKey: .message
                            )
                            self.details = try container.decodeIfPresent(
                                Swift.String.self,
                                forKey: .details
                            )
                            try decoder.ensureNoAdditionalProperties(knownKeys: [
                                "kind",
                                "message",
                                "details"
                            ])
                        }
                    }
                    /// - Remark: Generated from `#/paths/users/PUT/responses/409/content/application\/json`.
                    case json(Operations.PutUsers.Output.Conflict.Body.JsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.PutUsers.Output.Conflict.Body.JsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.PutUsers.Output.Conflict.Body
                /// Creates a new `Conflict`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                public init(
                    headers: Operations.PutUsers.Output.Conflict.Headers = .init(),
                    body: Operations.PutUsers.Output.Conflict.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// FIXME
            ///
            /// - Remark: Generated from `#/paths//users/put(putUsers)/responses/409`.
            ///
            /// HTTP response code: `409 conflict`.
            case conflict(Operations.PutUsers.Output.Conflict)
            /// The associated value of the enum case if `self` is `.conflict`.
            ///
            /// - Throws: An error if `self` is not `.conflict`.
            /// - SeeAlso: `.conflict`.
            public var conflict: Operations.PutUsers.Output.Conflict {
                get throws {
                    switch self {
                    case let .conflict(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "conflict",
                            response: self
                        )
                    }
                }
            }
            public struct UnprocessableContent: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/users/PUT/responses/422/headers`.
                public struct Headers: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/users/PUT/responses/422/headers/Content-Type`.
                    @frozen public enum ContentTypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                        case applicationJson = "application/json"
                    }
                    /// - Remark: Generated from `#/paths/users/PUT/responses/422/headers/Content-Type`.
                    public var contentType: Operations.PutUsers.Output.UnprocessableContent.Headers.ContentTypePayload?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - contentType:
                    public init(contentType: Operations.PutUsers.Output.UnprocessableContent.Headers.ContentTypePayload? = nil) {
                        self.contentType = contentType
                    }
                }
                /// Received HTTP response headers
                public var headers: Operations.PutUsers.Output.UnprocessableContent.Headers
                /// - Remark: Generated from `#/paths/users/PUT/responses/422/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/users/PUT/responses/422/content/json`.
                    public struct JsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/users/PUT/responses/422/content/json/kind`.
                        @frozen public enum KindPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case schemaInvalid_request = "schema_invalid.request"
                        }
                        /// - Remark: Generated from `#/paths/users/PUT/responses/422/content/json/kind`.
                        public var kind: Operations.PutUsers.Output.UnprocessableContent.Body.JsonPayload.KindPayload
                        /// - Remark: Generated from `#/paths/users/PUT/responses/422/content/json/message`.
                        public var message: Swift.String
                        /// - Remark: Generated from `#/paths/users/PUT/responses/422/content/json/details`.
                        public var details: Swift.String?
                        /// Creates a new `JsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - kind:
                        ///   - message:
                        ///   - details:
                        public init(
                            kind: Operations.PutUsers.Output.UnprocessableContent.Body.JsonPayload.KindPayload,
                            message: Swift.String,
                            details: Swift.String? = nil
                        ) {
                            self.kind = kind
                            self.message = message
                            self.details = details
                        }
                        public enum CodingKeys: String, CodingKey {
                            case kind
                            case message
                            case details
                        }
                        public init(from decoder: any Decoder) throws {
                            let container = try decoder.container(keyedBy: CodingKeys.self)
                            self.kind = try container.decode(
                                Operations.PutUsers.Output.UnprocessableContent.Body.JsonPayload.KindPayload.self,
                                forKey: .kind
                            )
                            self.message = try container.decode(
                                Swift.String.self,
                                forKey: .message
                            )
                            self.details = try container.decodeIfPresent(
                                Swift.String.self,
                                forKey: .details
                            )
                            try decoder.ensureNoAdditionalProperties(knownKeys: [
                                "kind",
                                "message",
                                "details"
                            ])
                        }
                    }
                    /// - Remark: Generated from `#/paths/users/PUT/responses/422/content/application\/json`.
                    case json(Operations.PutUsers.Output.UnprocessableContent.Body.JsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.PutUsers.Output.UnprocessableContent.Body.JsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.PutUsers.Output.UnprocessableContent.Body
                /// Creates a new `UnprocessableContent`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                public init(
                    headers: Operations.PutUsers.Output.UnprocessableContent.Headers = .init(),
                    body: Operations.PutUsers.Output.UnprocessableContent.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// FIXME
            ///
            /// - Remark: Generated from `#/paths//users/put(putUsers)/responses/422`.
            ///
            /// HTTP response code: `422 unprocessableContent`.
            case unprocessableContent(Operations.PutUsers.Output.UnprocessableContent)
            /// The associated value of the enum case if `self` is `.unprocessableContent`.
            ///
            /// - Throws: An error if `self` is not `.unprocessableContent`.
            /// - SeeAlso: `.unprocessableContent`.
            public var unprocessableContent: Operations.PutUsers.Output.UnprocessableContent {
                get throws {
                    switch self {
                    case let .unprocessableContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unprocessableContent",
                            response: self
                        )
                    }
                }
            }
            public struct InternalServerError: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/users/PUT/responses/500/headers`.
                public struct Headers: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/users/PUT/responses/500/headers/Content-Type`.
                    @frozen public enum ContentTypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                        case applicationJson = "application/json"
                    }
                    /// - Remark: Generated from `#/paths/users/PUT/responses/500/headers/Content-Type`.
                    public var contentType: Operations.PutUsers.Output.InternalServerError.Headers.ContentTypePayload?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - contentType:
                    public init(contentType: Operations.PutUsers.Output.InternalServerError.Headers.ContentTypePayload? = nil) {
                        self.contentType = contentType
                    }
                }
                /// Received HTTP response headers
                public var headers: Operations.PutUsers.Output.InternalServerError.Headers
                /// - Remark: Generated from `#/paths/users/PUT/responses/500/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/users/PUT/responses/500/content/json`.
                    public struct JsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/users/PUT/responses/500/content/json/kind`.
                        @frozen public enum KindPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case unexpected = "unexpected"
                        }
                        /// - Remark: Generated from `#/paths/users/PUT/responses/500/content/json/kind`.
                        public var kind: Operations.PutUsers.Output.InternalServerError.Body.JsonPayload.KindPayload
                        /// - Remark: Generated from `#/paths/users/PUT/responses/500/content/json/message`.
                        public var message: Swift.String
                        /// - Remark: Generated from `#/paths/users/PUT/responses/500/content/json/details`.
                        public var details: Swift.String?
                        /// Creates a new `JsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - kind:
                        ///   - message:
                        ///   - details:
                        public init(
                            kind: Operations.PutUsers.Output.InternalServerError.Body.JsonPayload.KindPayload,
                            message: Swift.String,
                            details: Swift.String? = nil
                        ) {
                            self.kind = kind
                            self.message = message
                            self.details = details
                        }
                        public enum CodingKeys: String, CodingKey {
                            case kind
                            case message
                            case details
                        }
                        public init(from decoder: any Decoder) throws {
                            let container = try decoder.container(keyedBy: CodingKeys.self)
                            self.kind = try container.decode(
                                Operations.PutUsers.Output.InternalServerError.Body.JsonPayload.KindPayload.self,
                                forKey: .kind
                            )
                            self.message = try container.decode(
                                Swift.String.self,
                                forKey: .message
                            )
                            self.details = try container.decodeIfPresent(
                                Swift.String.self,
                                forKey: .details
                            )
                            try decoder.ensureNoAdditionalProperties(knownKeys: [
                                "kind",
                                "message",
                                "details"
                            ])
                        }
                    }
                    /// - Remark: Generated from `#/paths/users/PUT/responses/500/content/application\/json`.
                    case json(Operations.PutUsers.Output.InternalServerError.Body.JsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.PutUsers.Output.InternalServerError.Body.JsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.PutUsers.Output.InternalServerError.Body
                /// Creates a new `InternalServerError`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                public init(
                    headers: Operations.PutUsers.Output.InternalServerError.Headers = .init(),
                    body: Operations.PutUsers.Output.InternalServerError.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// FIXME
            ///
            /// - Remark: Generated from `#/paths//users/put(putUsers)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Operations.PutUsers.Output.InternalServerError)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            public var internalServerError: Operations.PutUsers.Output.InternalServerError {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// - Remark: HTTP `DELETE /users`.
    /// - Remark: Generated from `#/paths//users/delete(deleteUsers)`.
    public enum DeleteUsers {
        public static let id: Swift.String = "deleteUsers"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/users/DELETE/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.DeleteUsers.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.DeleteUsers.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.DeleteUsers.Input.Headers
            /// - Remark: Generated from `#/paths/users/DELETE/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/users/DELETE/requestBody/content/application\/json`.
                case json(Components.Schemas.AppUser)
            }
            public var body: Operations.DeleteUsers.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.DeleteUsers.Input.Headers = .init(),
                body: Operations.DeleteUsers.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct NoContent: Sendable, Hashable {
                /// Creates a new `NoContent`.
                public init() {}
            }
            /// FIXME
            ///
            /// - Remark: Generated from `#/paths//users/delete(deleteUsers)/responses/204`.
            ///
            /// HTTP response code: `204 noContent`.
            case noContent(Operations.DeleteUsers.Output.NoContent)
            /// FIXME
            ///
            /// - Remark: Generated from `#/paths//users/delete(deleteUsers)/responses/204`.
            ///
            /// HTTP response code: `204 noContent`.
            public static var noContent: Self {
                .noContent(.init())
            }
            /// The associated value of the enum case if `self` is `.noContent`.
            ///
            /// - Throws: An error if `self` is not `.noContent`.
            /// - SeeAlso: `.noContent`.
            public var noContent: Operations.DeleteUsers.Output.NoContent {
                get throws {
                    switch self {
                    case let .noContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "noContent",
                            response: self
                        )
                    }
                }
            }
            public struct Unauthorized: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/users/DELETE/responses/401/headers`.
                public struct Headers: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/users/DELETE/responses/401/headers/Content-Type`.
                    @frozen public enum ContentTypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                        case applicationJson = "application/json"
                    }
                    /// - Remark: Generated from `#/paths/users/DELETE/responses/401/headers/Content-Type`.
                    public var contentType: Operations.DeleteUsers.Output.Unauthorized.Headers.ContentTypePayload?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - contentType:
                    public init(contentType: Operations.DeleteUsers.Output.Unauthorized.Headers.ContentTypePayload? = nil) {
                        self.contentType = contentType
                    }
                }
                /// Received HTTP response headers
                public var headers: Operations.DeleteUsers.Output.Unauthorized.Headers
                /// - Remark: Generated from `#/paths/users/DELETE/responses/401/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/users/DELETE/responses/401/content/json`.
                    public struct JsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/users/DELETE/responses/401/content/json/kind`.
                        @frozen public enum KindPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case badAuthorization_user = "bad_authorization.user"
                            case badAuthorization_app = "bad_authorization.app"
                        }
                        /// - Remark: Generated from `#/paths/users/DELETE/responses/401/content/json/kind`.
                        public var kind: Operations.DeleteUsers.Output.Unauthorized.Body.JsonPayload.KindPayload
                        /// - Remark: Generated from `#/paths/users/DELETE/responses/401/content/json/message`.
                        public var message: Swift.String
                        /// - Remark: Generated from `#/paths/users/DELETE/responses/401/content/json/details`.
                        public var details: Swift.String?
                        /// Creates a new `JsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - kind:
                        ///   - message:
                        ///   - details:
                        public init(
                            kind: Operations.DeleteUsers.Output.Unauthorized.Body.JsonPayload.KindPayload,
                            message: Swift.String,
                            details: Swift.String? = nil
                        ) {
                            self.kind = kind
                            self.message = message
                            self.details = details
                        }
                        public enum CodingKeys: String, CodingKey {
                            case kind
                            case message
                            case details
                        }
                        public init(from decoder: any Decoder) throws {
                            let container = try decoder.container(keyedBy: CodingKeys.self)
                            self.kind = try container.decode(
                                Operations.DeleteUsers.Output.Unauthorized.Body.JsonPayload.KindPayload.self,
                                forKey: .kind
                            )
                            self.message = try container.decode(
                                Swift.String.self,
                                forKey: .message
                            )
                            self.details = try container.decodeIfPresent(
                                Swift.String.self,
                                forKey: .details
                            )
                            try decoder.ensureNoAdditionalProperties(knownKeys: [
                                "kind",
                                "message",
                                "details"
                            ])
                        }
                    }
                    /// - Remark: Generated from `#/paths/users/DELETE/responses/401/content/application\/json`.
                    case json(Operations.DeleteUsers.Output.Unauthorized.Body.JsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.DeleteUsers.Output.Unauthorized.Body.JsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.DeleteUsers.Output.Unauthorized.Body
                /// Creates a new `Unauthorized`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                public init(
                    headers: Operations.DeleteUsers.Output.Unauthorized.Headers = .init(),
                    body: Operations.DeleteUsers.Output.Unauthorized.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// FIXME
            ///
            /// - Remark: Generated from `#/paths//users/delete(deleteUsers)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Operations.DeleteUsers.Output.Unauthorized)
            /// The associated value of the enum case if `self` is `.unauthorized`.
            ///
            /// - Throws: An error if `self` is not `.unauthorized`.
            /// - SeeAlso: `.unauthorized`.
            public var unauthorized: Operations.DeleteUsers.Output.Unauthorized {
                get throws {
                    switch self {
                    case let .unauthorized(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unauthorized",
                            response: self
                        )
                    }
                }
            }
            public struct Forbidden: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/users/DELETE/responses/403/headers`.
                public struct Headers: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/users/DELETE/responses/403/headers/Content-Type`.
                    @frozen public enum ContentTypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                        case applicationJson = "application/json"
                    }
                    /// - Remark: Generated from `#/paths/users/DELETE/responses/403/headers/Content-Type`.
                    public var contentType: Operations.DeleteUsers.Output.Forbidden.Headers.ContentTypePayload?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - contentType:
                    public init(contentType: Operations.DeleteUsers.Output.Forbidden.Headers.ContentTypePayload? = nil) {
                        self.contentType = contentType
                    }
                }
                /// Received HTTP response headers
                public var headers: Operations.DeleteUsers.Output.Forbidden.Headers
                /// - Remark: Generated from `#/paths/users/DELETE/responses/403/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/users/DELETE/responses/403/content/json`.
                    public struct JsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/users/DELETE/responses/403/content/json/kind`.
                        @frozen public enum KindPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case disabledPendingPayment_app = "disabled_pending_payment.app"
                        }
                        /// - Remark: Generated from `#/paths/users/DELETE/responses/403/content/json/kind`.
                        public var kind: Operations.DeleteUsers.Output.Forbidden.Body.JsonPayload.KindPayload
                        /// - Remark: Generated from `#/paths/users/DELETE/responses/403/content/json/message`.
                        public var message: Swift.String
                        /// - Remark: Generated from `#/paths/users/DELETE/responses/403/content/json/details`.
                        public var details: Swift.String?
                        /// Creates a new `JsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - kind:
                        ///   - message:
                        ///   - details:
                        public init(
                            kind: Operations.DeleteUsers.Output.Forbidden.Body.JsonPayload.KindPayload,
                            message: Swift.String,
                            details: Swift.String? = nil
                        ) {
                            self.kind = kind
                            self.message = message
                            self.details = details
                        }
                        public enum CodingKeys: String, CodingKey {
                            case kind
                            case message
                            case details
                        }
                        public init(from decoder: any Decoder) throws {
                            let container = try decoder.container(keyedBy: CodingKeys.self)
                            self.kind = try container.decode(
                                Operations.DeleteUsers.Output.Forbidden.Body.JsonPayload.KindPayload.self,
                                forKey: .kind
                            )
                            self.message = try container.decode(
                                Swift.String.self,
                                forKey: .message
                            )
                            self.details = try container.decodeIfPresent(
                                Swift.String.self,
                                forKey: .details
                            )
                            try decoder.ensureNoAdditionalProperties(knownKeys: [
                                "kind",
                                "message",
                                "details"
                            ])
                        }
                    }
                    /// - Remark: Generated from `#/paths/users/DELETE/responses/403/content/application\/json`.
                    case json(Operations.DeleteUsers.Output.Forbidden.Body.JsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.DeleteUsers.Output.Forbidden.Body.JsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.DeleteUsers.Output.Forbidden.Body
                /// Creates a new `Forbidden`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                public init(
                    headers: Operations.DeleteUsers.Output.Forbidden.Headers = .init(),
                    body: Operations.DeleteUsers.Output.Forbidden.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// FIXME
            ///
            /// - Remark: Generated from `#/paths//users/delete(deleteUsers)/responses/403`.
            ///
            /// HTTP response code: `403 forbidden`.
            case forbidden(Operations.DeleteUsers.Output.Forbidden)
            /// The associated value of the enum case if `self` is `.forbidden`.
            ///
            /// - Throws: An error if `self` is not `.forbidden`.
            /// - SeeAlso: `.forbidden`.
            public var forbidden: Operations.DeleteUsers.Output.Forbidden {
                get throws {
                    switch self {
                    case let .forbidden(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "forbidden",
                            response: self
                        )
                    }
                }
            }
            public struct NotFound: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/users/DELETE/responses/404/headers`.
                public struct Headers: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/users/DELETE/responses/404/headers/Content-Type`.
                    @frozen public enum ContentTypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                        case applicationJson = "application/json"
                    }
                    /// - Remark: Generated from `#/paths/users/DELETE/responses/404/headers/Content-Type`.
                    public var contentType: Operations.DeleteUsers.Output.NotFound.Headers.ContentTypePayload?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - contentType:
                    public init(contentType: Operations.DeleteUsers.Output.NotFound.Headers.ContentTypePayload? = nil) {
                        self.contentType = contentType
                    }
                }
                /// Received HTTP response headers
                public var headers: Operations.DeleteUsers.Output.NotFound.Headers
                /// - Remark: Generated from `#/paths/users/DELETE/responses/404/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/users/DELETE/responses/404/content/json`.
                    public struct JsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/users/DELETE/responses/404/content/json/kind`.
                        @frozen public enum KindPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case notFound_user = "not_found.user"
                            case notFound_app = "not_found.app"
                        }
                        /// - Remark: Generated from `#/paths/users/DELETE/responses/404/content/json/kind`.
                        public var kind: Operations.DeleteUsers.Output.NotFound.Body.JsonPayload.KindPayload
                        /// - Remark: Generated from `#/paths/users/DELETE/responses/404/content/json/message`.
                        public var message: Swift.String
                        /// - Remark: Generated from `#/paths/users/DELETE/responses/404/content/json/details`.
                        public var details: Swift.String?
                        /// Creates a new `JsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - kind:
                        ///   - message:
                        ///   - details:
                        public init(
                            kind: Operations.DeleteUsers.Output.NotFound.Body.JsonPayload.KindPayload,
                            message: Swift.String,
                            details: Swift.String? = nil
                        ) {
                            self.kind = kind
                            self.message = message
                            self.details = details
                        }
                        public enum CodingKeys: String, CodingKey {
                            case kind
                            case message
                            case details
                        }
                        public init(from decoder: any Decoder) throws {
                            let container = try decoder.container(keyedBy: CodingKeys.self)
                            self.kind = try container.decode(
                                Operations.DeleteUsers.Output.NotFound.Body.JsonPayload.KindPayload.self,
                                forKey: .kind
                            )
                            self.message = try container.decode(
                                Swift.String.self,
                                forKey: .message
                            )
                            self.details = try container.decodeIfPresent(
                                Swift.String.self,
                                forKey: .details
                            )
                            try decoder.ensureNoAdditionalProperties(knownKeys: [
                                "kind",
                                "message",
                                "details"
                            ])
                        }
                    }
                    /// - Remark: Generated from `#/paths/users/DELETE/responses/404/content/application\/json`.
                    case json(Operations.DeleteUsers.Output.NotFound.Body.JsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.DeleteUsers.Output.NotFound.Body.JsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.DeleteUsers.Output.NotFound.Body
                /// Creates a new `NotFound`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                public init(
                    headers: Operations.DeleteUsers.Output.NotFound.Headers = .init(),
                    body: Operations.DeleteUsers.Output.NotFound.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// FIXME
            ///
            /// - Remark: Generated from `#/paths//users/delete(deleteUsers)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Operations.DeleteUsers.Output.NotFound)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Operations.DeleteUsers.Output.NotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            public struct UnprocessableContent: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/users/DELETE/responses/422/headers`.
                public struct Headers: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/users/DELETE/responses/422/headers/Content-Type`.
                    @frozen public enum ContentTypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                        case applicationJson = "application/json"
                    }
                    /// - Remark: Generated from `#/paths/users/DELETE/responses/422/headers/Content-Type`.
                    public var contentType: Operations.DeleteUsers.Output.UnprocessableContent.Headers.ContentTypePayload?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - contentType:
                    public init(contentType: Operations.DeleteUsers.Output.UnprocessableContent.Headers.ContentTypePayload? = nil) {
                        self.contentType = contentType
                    }
                }
                /// Received HTTP response headers
                public var headers: Operations.DeleteUsers.Output.UnprocessableContent.Headers
                /// - Remark: Generated from `#/paths/users/DELETE/responses/422/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/users/DELETE/responses/422/content/json`.
                    public struct JsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/users/DELETE/responses/422/content/json/kind`.
                        @frozen public enum KindPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case schemaInvalid_request = "schema_invalid.request"
                        }
                        /// - Remark: Generated from `#/paths/users/DELETE/responses/422/content/json/kind`.
                        public var kind: Operations.DeleteUsers.Output.UnprocessableContent.Body.JsonPayload.KindPayload
                        /// - Remark: Generated from `#/paths/users/DELETE/responses/422/content/json/message`.
                        public var message: Swift.String
                        /// - Remark: Generated from `#/paths/users/DELETE/responses/422/content/json/details`.
                        public var details: Swift.String?
                        /// Creates a new `JsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - kind:
                        ///   - message:
                        ///   - details:
                        public init(
                            kind: Operations.DeleteUsers.Output.UnprocessableContent.Body.JsonPayload.KindPayload,
                            message: Swift.String,
                            details: Swift.String? = nil
                        ) {
                            self.kind = kind
                            self.message = message
                            self.details = details
                        }
                        public enum CodingKeys: String, CodingKey {
                            case kind
                            case message
                            case details
                        }
                        public init(from decoder: any Decoder) throws {
                            let container = try decoder.container(keyedBy: CodingKeys.self)
                            self.kind = try container.decode(
                                Operations.DeleteUsers.Output.UnprocessableContent.Body.JsonPayload.KindPayload.self,
                                forKey: .kind
                            )
                            self.message = try container.decode(
                                Swift.String.self,
                                forKey: .message
                            )
                            self.details = try container.decodeIfPresent(
                                Swift.String.self,
                                forKey: .details
                            )
                            try decoder.ensureNoAdditionalProperties(knownKeys: [
                                "kind",
                                "message",
                                "details"
                            ])
                        }
                    }
                    /// - Remark: Generated from `#/paths/users/DELETE/responses/422/content/application\/json`.
                    case json(Operations.DeleteUsers.Output.UnprocessableContent.Body.JsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.DeleteUsers.Output.UnprocessableContent.Body.JsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.DeleteUsers.Output.UnprocessableContent.Body
                /// Creates a new `UnprocessableContent`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                public init(
                    headers: Operations.DeleteUsers.Output.UnprocessableContent.Headers = .init(),
                    body: Operations.DeleteUsers.Output.UnprocessableContent.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// FIXME
            ///
            /// - Remark: Generated from `#/paths//users/delete(deleteUsers)/responses/422`.
            ///
            /// HTTP response code: `422 unprocessableContent`.
            case unprocessableContent(Operations.DeleteUsers.Output.UnprocessableContent)
            /// The associated value of the enum case if `self` is `.unprocessableContent`.
            ///
            /// - Throws: An error if `self` is not `.unprocessableContent`.
            /// - SeeAlso: `.unprocessableContent`.
            public var unprocessableContent: Operations.DeleteUsers.Output.UnprocessableContent {
                get throws {
                    switch self {
                    case let .unprocessableContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unprocessableContent",
                            response: self
                        )
                    }
                }
            }
            public struct InternalServerError: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/users/DELETE/responses/500/headers`.
                public struct Headers: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/users/DELETE/responses/500/headers/Content-Type`.
                    @frozen public enum ContentTypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                        case applicationJson = "application/json"
                    }
                    /// - Remark: Generated from `#/paths/users/DELETE/responses/500/headers/Content-Type`.
                    public var contentType: Operations.DeleteUsers.Output.InternalServerError.Headers.ContentTypePayload?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - contentType:
                    public init(contentType: Operations.DeleteUsers.Output.InternalServerError.Headers.ContentTypePayload? = nil) {
                        self.contentType = contentType
                    }
                }
                /// Received HTTP response headers
                public var headers: Operations.DeleteUsers.Output.InternalServerError.Headers
                /// - Remark: Generated from `#/paths/users/DELETE/responses/500/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/users/DELETE/responses/500/content/json`.
                    public struct JsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/users/DELETE/responses/500/content/json/kind`.
                        @frozen public enum KindPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case unexpected = "unexpected"
                        }
                        /// - Remark: Generated from `#/paths/users/DELETE/responses/500/content/json/kind`.
                        public var kind: Operations.DeleteUsers.Output.InternalServerError.Body.JsonPayload.KindPayload
                        /// - Remark: Generated from `#/paths/users/DELETE/responses/500/content/json/message`.
                        public var message: Swift.String
                        /// - Remark: Generated from `#/paths/users/DELETE/responses/500/content/json/details`.
                        public var details: Swift.String?
                        /// Creates a new `JsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - kind:
                        ///   - message:
                        ///   - details:
                        public init(
                            kind: Operations.DeleteUsers.Output.InternalServerError.Body.JsonPayload.KindPayload,
                            message: Swift.String,
                            details: Swift.String? = nil
                        ) {
                            self.kind = kind
                            self.message = message
                            self.details = details
                        }
                        public enum CodingKeys: String, CodingKey {
                            case kind
                            case message
                            case details
                        }
                        public init(from decoder: any Decoder) throws {
                            let container = try decoder.container(keyedBy: CodingKeys.self)
                            self.kind = try container.decode(
                                Operations.DeleteUsers.Output.InternalServerError.Body.JsonPayload.KindPayload.self,
                                forKey: .kind
                            )
                            self.message = try container.decode(
                                Swift.String.self,
                                forKey: .message
                            )
                            self.details = try container.decodeIfPresent(
                                Swift.String.self,
                                forKey: .details
                            )
                            try decoder.ensureNoAdditionalProperties(knownKeys: [
                                "kind",
                                "message",
                                "details"
                            ])
                        }
                    }
                    /// - Remark: Generated from `#/paths/users/DELETE/responses/500/content/application\/json`.
                    case json(Operations.DeleteUsers.Output.InternalServerError.Body.JsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.DeleteUsers.Output.InternalServerError.Body.JsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.DeleteUsers.Output.InternalServerError.Body
                /// Creates a new `InternalServerError`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                public init(
                    headers: Operations.DeleteUsers.Output.InternalServerError.Headers = .init(),
                    body: Operations.DeleteUsers.Output.InternalServerError.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// FIXME
            ///
            /// - Remark: Generated from `#/paths//users/delete(deleteUsers)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Operations.DeleteUsers.Output.InternalServerError)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            public var internalServerError: Operations.DeleteUsers.Output.InternalServerError {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// - Remark: HTTP `GET /linked-accounts`.
    /// - Remark: Generated from `#/paths//linked-accounts/get(getLinkedAccounts)`.
    public enum GetLinkedAccounts {
        public static let id: Swift.String = "getLinkedAccounts"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/linked-accounts/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.GetLinkedAccounts.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.GetLinkedAccounts.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.GetLinkedAccounts.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            public init(headers: Operations.GetLinkedAccounts.Input.Headers = .init()) {
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/linked-accounts/GET/responses/200/headers`.
                public struct Headers: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/linked-accounts/GET/responses/200/headers/Content-Type`.
                    @frozen public enum ContentTypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                        case applicationJson = "application/json"
                    }
                    /// - Remark: Generated from `#/paths/linked-accounts/GET/responses/200/headers/Content-Type`.
                    public var contentType: Operations.GetLinkedAccounts.Output.Ok.Headers.ContentTypePayload?
                    /// - Remark: Generated from `#/paths/linked-accounts/GET/responses/200/headers/Content-Encoding`.
                    @frozen public enum ContentEncodingPayload: String, Codable, Hashable, Sendable, CaseIterable {
                        case gzip = "gzip"
                    }
                    /// - Remark: Generated from `#/paths/linked-accounts/GET/responses/200/headers/Content-Encoding`.
                    public var contentEncoding: Operations.GetLinkedAccounts.Output.Ok.Headers.ContentEncodingPayload?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - contentType:
                    ///   - contentEncoding:
                    public init(
                        contentType: Operations.GetLinkedAccounts.Output.Ok.Headers.ContentTypePayload? = nil,
                        contentEncoding: Operations.GetLinkedAccounts.Output.Ok.Headers.ContentEncodingPayload? = nil
                    ) {
                        self.contentType = contentType
                        self.contentEncoding = contentEncoding
                    }
                }
                /// Received HTTP response headers
                public var headers: Operations.GetLinkedAccounts.Output.Ok.Headers
                /// - Remark: Generated from `#/paths/linked-accounts/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/linked-accounts/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.LinkedAccount])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: [Components.Schemas.LinkedAccount] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.GetLinkedAccounts.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                public init(
                    headers: Operations.GetLinkedAccounts.Output.Ok.Headers = .init(),
                    body: Operations.GetLinkedAccounts.Output.Ok.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// FIXME
            ///
            /// - Remark: Generated from `#/paths//linked-accounts/get(getLinkedAccounts)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.GetLinkedAccounts.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.GetLinkedAccounts.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            public struct Unauthorized: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/linked-accounts/GET/responses/401/headers`.
                public struct Headers: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/linked-accounts/GET/responses/401/headers/Content-Type`.
                    @frozen public enum ContentTypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                        case applicationJson = "application/json"
                    }
                    /// - Remark: Generated from `#/paths/linked-accounts/GET/responses/401/headers/Content-Type`.
                    public var contentType: Operations.GetLinkedAccounts.Output.Unauthorized.Headers.ContentTypePayload?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - contentType:
                    public init(contentType: Operations.GetLinkedAccounts.Output.Unauthorized.Headers.ContentTypePayload? = nil) {
                        self.contentType = contentType
                    }
                }
                /// Received HTTP response headers
                public var headers: Operations.GetLinkedAccounts.Output.Unauthorized.Headers
                /// - Remark: Generated from `#/paths/linked-accounts/GET/responses/401/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/linked-accounts/GET/responses/401/content/json`.
                    public struct JsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/linked-accounts/GET/responses/401/content/json/kind`.
                        @frozen public enum KindPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case badAuthorization_user = "bad_authorization.user"
                        }
                        /// - Remark: Generated from `#/paths/linked-accounts/GET/responses/401/content/json/kind`.
                        public var kind: Operations.GetLinkedAccounts.Output.Unauthorized.Body.JsonPayload.KindPayload
                        /// - Remark: Generated from `#/paths/linked-accounts/GET/responses/401/content/json/message`.
                        public var message: Swift.String
                        /// - Remark: Generated from `#/paths/linked-accounts/GET/responses/401/content/json/details`.
                        public var details: Swift.String?
                        /// Creates a new `JsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - kind:
                        ///   - message:
                        ///   - details:
                        public init(
                            kind: Operations.GetLinkedAccounts.Output.Unauthorized.Body.JsonPayload.KindPayload,
                            message: Swift.String,
                            details: Swift.String? = nil
                        ) {
                            self.kind = kind
                            self.message = message
                            self.details = details
                        }
                        public enum CodingKeys: String, CodingKey {
                            case kind
                            case message
                            case details
                        }
                        public init(from decoder: any Decoder) throws {
                            let container = try decoder.container(keyedBy: CodingKeys.self)
                            self.kind = try container.decode(
                                Operations.GetLinkedAccounts.Output.Unauthorized.Body.JsonPayload.KindPayload.self,
                                forKey: .kind
                            )
                            self.message = try container.decode(
                                Swift.String.self,
                                forKey: .message
                            )
                            self.details = try container.decodeIfPresent(
                                Swift.String.self,
                                forKey: .details
                            )
                            try decoder.ensureNoAdditionalProperties(knownKeys: [
                                "kind",
                                "message",
                                "details"
                            ])
                        }
                    }
                    /// - Remark: Generated from `#/paths/linked-accounts/GET/responses/401/content/application\/json`.
                    case json(Operations.GetLinkedAccounts.Output.Unauthorized.Body.JsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.GetLinkedAccounts.Output.Unauthorized.Body.JsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.GetLinkedAccounts.Output.Unauthorized.Body
                /// Creates a new `Unauthorized`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                public init(
                    headers: Operations.GetLinkedAccounts.Output.Unauthorized.Headers = .init(),
                    body: Operations.GetLinkedAccounts.Output.Unauthorized.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// FIXME
            ///
            /// - Remark: Generated from `#/paths//linked-accounts/get(getLinkedAccounts)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Operations.GetLinkedAccounts.Output.Unauthorized)
            /// The associated value of the enum case if `self` is `.unauthorized`.
            ///
            /// - Throws: An error if `self` is not `.unauthorized`.
            /// - SeeAlso: `.unauthorized`.
            public var unauthorized: Operations.GetLinkedAccounts.Output.Unauthorized {
                get throws {
                    switch self {
                    case let .unauthorized(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unauthorized",
                            response: self
                        )
                    }
                }
            }
            public struct NotFound: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/linked-accounts/GET/responses/404/headers`.
                public struct Headers: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/linked-accounts/GET/responses/404/headers/Content-Type`.
                    @frozen public enum ContentTypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                        case applicationJson = "application/json"
                    }
                    /// - Remark: Generated from `#/paths/linked-accounts/GET/responses/404/headers/Content-Type`.
                    public var contentType: Operations.GetLinkedAccounts.Output.NotFound.Headers.ContentTypePayload?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - contentType:
                    public init(contentType: Operations.GetLinkedAccounts.Output.NotFound.Headers.ContentTypePayload? = nil) {
                        self.contentType = contentType
                    }
                }
                /// Received HTTP response headers
                public var headers: Operations.GetLinkedAccounts.Output.NotFound.Headers
                /// - Remark: Generated from `#/paths/linked-accounts/GET/responses/404/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/linked-accounts/GET/responses/404/content/json`.
                    public struct JsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/linked-accounts/GET/responses/404/content/json/kind`.
                        @frozen public enum KindPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case notFound_user = "not_found.user"
                        }
                        /// - Remark: Generated from `#/paths/linked-accounts/GET/responses/404/content/json/kind`.
                        public var kind: Operations.GetLinkedAccounts.Output.NotFound.Body.JsonPayload.KindPayload
                        /// - Remark: Generated from `#/paths/linked-accounts/GET/responses/404/content/json/message`.
                        public var message: Swift.String
                        /// - Remark: Generated from `#/paths/linked-accounts/GET/responses/404/content/json/details`.
                        public var details: Swift.String?
                        /// Creates a new `JsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - kind:
                        ///   - message:
                        ///   - details:
                        public init(
                            kind: Operations.GetLinkedAccounts.Output.NotFound.Body.JsonPayload.KindPayload,
                            message: Swift.String,
                            details: Swift.String? = nil
                        ) {
                            self.kind = kind
                            self.message = message
                            self.details = details
                        }
                        public enum CodingKeys: String, CodingKey {
                            case kind
                            case message
                            case details
                        }
                        public init(from decoder: any Decoder) throws {
                            let container = try decoder.container(keyedBy: CodingKeys.self)
                            self.kind = try container.decode(
                                Operations.GetLinkedAccounts.Output.NotFound.Body.JsonPayload.KindPayload.self,
                                forKey: .kind
                            )
                            self.message = try container.decode(
                                Swift.String.self,
                                forKey: .message
                            )
                            self.details = try container.decodeIfPresent(
                                Swift.String.self,
                                forKey: .details
                            )
                            try decoder.ensureNoAdditionalProperties(knownKeys: [
                                "kind",
                                "message",
                                "details"
                            ])
                        }
                    }
                    /// - Remark: Generated from `#/paths/linked-accounts/GET/responses/404/content/application\/json`.
                    case json(Operations.GetLinkedAccounts.Output.NotFound.Body.JsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.GetLinkedAccounts.Output.NotFound.Body.JsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.GetLinkedAccounts.Output.NotFound.Body
                /// Creates a new `NotFound`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                public init(
                    headers: Operations.GetLinkedAccounts.Output.NotFound.Headers = .init(),
                    body: Operations.GetLinkedAccounts.Output.NotFound.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// FIXME
            ///
            /// - Remark: Generated from `#/paths//linked-accounts/get(getLinkedAccounts)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Operations.GetLinkedAccounts.Output.NotFound)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Operations.GetLinkedAccounts.Output.NotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            public struct UnprocessableContent: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/linked-accounts/GET/responses/422/headers`.
                public struct Headers: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/linked-accounts/GET/responses/422/headers/Content-Type`.
                    @frozen public enum ContentTypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                        case applicationJson = "application/json"
                    }
                    /// - Remark: Generated from `#/paths/linked-accounts/GET/responses/422/headers/Content-Type`.
                    public var contentType: Operations.GetLinkedAccounts.Output.UnprocessableContent.Headers.ContentTypePayload?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - contentType:
                    public init(contentType: Operations.GetLinkedAccounts.Output.UnprocessableContent.Headers.ContentTypePayload? = nil) {
                        self.contentType = contentType
                    }
                }
                /// Received HTTP response headers
                public var headers: Operations.GetLinkedAccounts.Output.UnprocessableContent.Headers
                /// - Remark: Generated from `#/paths/linked-accounts/GET/responses/422/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/linked-accounts/GET/responses/422/content/json`.
                    public struct JsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/linked-accounts/GET/responses/422/content/json/kind`.
                        @frozen public enum KindPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case schemaInvalid_request = "schema_invalid.request"
                        }
                        /// - Remark: Generated from `#/paths/linked-accounts/GET/responses/422/content/json/kind`.
                        public var kind: Operations.GetLinkedAccounts.Output.UnprocessableContent.Body.JsonPayload.KindPayload
                        /// - Remark: Generated from `#/paths/linked-accounts/GET/responses/422/content/json/message`.
                        public var message: Swift.String
                        /// - Remark: Generated from `#/paths/linked-accounts/GET/responses/422/content/json/details`.
                        public var details: Swift.String?
                        /// Creates a new `JsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - kind:
                        ///   - message:
                        ///   - details:
                        public init(
                            kind: Operations.GetLinkedAccounts.Output.UnprocessableContent.Body.JsonPayload.KindPayload,
                            message: Swift.String,
                            details: Swift.String? = nil
                        ) {
                            self.kind = kind
                            self.message = message
                            self.details = details
                        }
                        public enum CodingKeys: String, CodingKey {
                            case kind
                            case message
                            case details
                        }
                        public init(from decoder: any Decoder) throws {
                            let container = try decoder.container(keyedBy: CodingKeys.self)
                            self.kind = try container.decode(
                                Operations.GetLinkedAccounts.Output.UnprocessableContent.Body.JsonPayload.KindPayload.self,
                                forKey: .kind
                            )
                            self.message = try container.decode(
                                Swift.String.self,
                                forKey: .message
                            )
                            self.details = try container.decodeIfPresent(
                                Swift.String.self,
                                forKey: .details
                            )
                            try decoder.ensureNoAdditionalProperties(knownKeys: [
                                "kind",
                                "message",
                                "details"
                            ])
                        }
                    }
                    /// - Remark: Generated from `#/paths/linked-accounts/GET/responses/422/content/application\/json`.
                    case json(Operations.GetLinkedAccounts.Output.UnprocessableContent.Body.JsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.GetLinkedAccounts.Output.UnprocessableContent.Body.JsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.GetLinkedAccounts.Output.UnprocessableContent.Body
                /// Creates a new `UnprocessableContent`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                public init(
                    headers: Operations.GetLinkedAccounts.Output.UnprocessableContent.Headers = .init(),
                    body: Operations.GetLinkedAccounts.Output.UnprocessableContent.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// FIXME
            ///
            /// - Remark: Generated from `#/paths//linked-accounts/get(getLinkedAccounts)/responses/422`.
            ///
            /// HTTP response code: `422 unprocessableContent`.
            case unprocessableContent(Operations.GetLinkedAccounts.Output.UnprocessableContent)
            /// The associated value of the enum case if `self` is `.unprocessableContent`.
            ///
            /// - Throws: An error if `self` is not `.unprocessableContent`.
            /// - SeeAlso: `.unprocessableContent`.
            public var unprocessableContent: Operations.GetLinkedAccounts.Output.UnprocessableContent {
                get throws {
                    switch self {
                    case let .unprocessableContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unprocessableContent",
                            response: self
                        )
                    }
                }
            }
            public struct InternalServerError: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/linked-accounts/GET/responses/500/headers`.
                public struct Headers: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/linked-accounts/GET/responses/500/headers/Content-Type`.
                    @frozen public enum ContentTypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                        case applicationJson = "application/json"
                    }
                    /// - Remark: Generated from `#/paths/linked-accounts/GET/responses/500/headers/Content-Type`.
                    public var contentType: Operations.GetLinkedAccounts.Output.InternalServerError.Headers.ContentTypePayload?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - contentType:
                    public init(contentType: Operations.GetLinkedAccounts.Output.InternalServerError.Headers.ContentTypePayload? = nil) {
                        self.contentType = contentType
                    }
                }
                /// Received HTTP response headers
                public var headers: Operations.GetLinkedAccounts.Output.InternalServerError.Headers
                /// - Remark: Generated from `#/paths/linked-accounts/GET/responses/500/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/linked-accounts/GET/responses/500/content/json`.
                    public struct JsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/linked-accounts/GET/responses/500/content/json/kind`.
                        @frozen public enum KindPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case unexpected = "unexpected"
                        }
                        /// - Remark: Generated from `#/paths/linked-accounts/GET/responses/500/content/json/kind`.
                        public var kind: Operations.GetLinkedAccounts.Output.InternalServerError.Body.JsonPayload.KindPayload
                        /// - Remark: Generated from `#/paths/linked-accounts/GET/responses/500/content/json/message`.
                        public var message: Swift.String
                        /// - Remark: Generated from `#/paths/linked-accounts/GET/responses/500/content/json/details`.
                        public var details: Swift.String?
                        /// Creates a new `JsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - kind:
                        ///   - message:
                        ///   - details:
                        public init(
                            kind: Operations.GetLinkedAccounts.Output.InternalServerError.Body.JsonPayload.KindPayload,
                            message: Swift.String,
                            details: Swift.String? = nil
                        ) {
                            self.kind = kind
                            self.message = message
                            self.details = details
                        }
                        public enum CodingKeys: String, CodingKey {
                            case kind
                            case message
                            case details
                        }
                        public init(from decoder: any Decoder) throws {
                            let container = try decoder.container(keyedBy: CodingKeys.self)
                            self.kind = try container.decode(
                                Operations.GetLinkedAccounts.Output.InternalServerError.Body.JsonPayload.KindPayload.self,
                                forKey: .kind
                            )
                            self.message = try container.decode(
                                Swift.String.self,
                                forKey: .message
                            )
                            self.details = try container.decodeIfPresent(
                                Swift.String.self,
                                forKey: .details
                            )
                            try decoder.ensureNoAdditionalProperties(knownKeys: [
                                "kind",
                                "message",
                                "details"
                            ])
                        }
                    }
                    /// - Remark: Generated from `#/paths/linked-accounts/GET/responses/500/content/application\/json`.
                    case json(Operations.GetLinkedAccounts.Output.InternalServerError.Body.JsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.GetLinkedAccounts.Output.InternalServerError.Body.JsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.GetLinkedAccounts.Output.InternalServerError.Body
                /// Creates a new `InternalServerError`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                public init(
                    headers: Operations.GetLinkedAccounts.Output.InternalServerError.Headers = .init(),
                    body: Operations.GetLinkedAccounts.Output.InternalServerError.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// FIXME
            ///
            /// - Remark: Generated from `#/paths//linked-accounts/get(getLinkedAccounts)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Operations.GetLinkedAccounts.Output.InternalServerError)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            public var internalServerError: Operations.GetLinkedAccounts.Output.InternalServerError {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// - Remark: HTTP `POST /linked-accounts`.
    /// - Remark: Generated from `#/paths//linked-accounts/post(postLinkedAccounts)`.
    public enum PostLinkedAccounts {
        public static let id: Swift.String = "postLinkedAccounts"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/linked-accounts/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.PostLinkedAccounts.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.PostLinkedAccounts.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.PostLinkedAccounts.Input.Headers
            /// - Remark: Generated from `#/paths/linked-accounts/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/linked-accounts/POST/requestBody/content/application\/json`.
                case json(Components.Schemas.LinkRequest)
            }
            public var body: Operations.PostLinkedAccounts.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.PostLinkedAccounts.Input.Headers = .init(),
                body: Operations.PostLinkedAccounts.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Created: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/linked-accounts/POST/responses/201/headers`.
                public struct Headers: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/linked-accounts/POST/responses/201/headers/Content-Type`.
                    @frozen public enum ContentTypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                        case applicationJson = "application/json"
                    }
                    /// - Remark: Generated from `#/paths/linked-accounts/POST/responses/201/headers/Content-Type`.
                    public var contentType: Operations.PostLinkedAccounts.Output.Created.Headers.ContentTypePayload?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - contentType:
                    public init(contentType: Operations.PostLinkedAccounts.Output.Created.Headers.ContentTypePayload? = nil) {
                        self.contentType = contentType
                    }
                }
                /// Received HTTP response headers
                public var headers: Operations.PostLinkedAccounts.Output.Created.Headers
                /// - Remark: Generated from `#/paths/linked-accounts/POST/responses/201/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/linked-accounts/POST/responses/201/content/application\/json`.
                    case json(Components.Schemas.LinkedAccount)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.LinkedAccount {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.PostLinkedAccounts.Output.Created.Body
                /// Creates a new `Created`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                public init(
                    headers: Operations.PostLinkedAccounts.Output.Created.Headers = .init(),
                    body: Operations.PostLinkedAccounts.Output.Created.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// FIXME
            ///
            /// - Remark: Generated from `#/paths//linked-accounts/post(postLinkedAccounts)/responses/201`.
            ///
            /// HTTP response code: `201 created`.
            case created(Operations.PostLinkedAccounts.Output.Created)
            /// The associated value of the enum case if `self` is `.created`.
            ///
            /// - Throws: An error if `self` is not `.created`.
            /// - SeeAlso: `.created`.
            public var created: Operations.PostLinkedAccounts.Output.Created {
                get throws {
                    switch self {
                    case let .created(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "created",
                            response: self
                        )
                    }
                }
            }
            public struct Unauthorized: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/linked-accounts/POST/responses/401/headers`.
                public struct Headers: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/linked-accounts/POST/responses/401/headers/Content-Type`.
                    @frozen public enum ContentTypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                        case applicationJson = "application/json"
                    }
                    /// - Remark: Generated from `#/paths/linked-accounts/POST/responses/401/headers/Content-Type`.
                    public var contentType: Operations.PostLinkedAccounts.Output.Unauthorized.Headers.ContentTypePayload?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - contentType:
                    public init(contentType: Operations.PostLinkedAccounts.Output.Unauthorized.Headers.ContentTypePayload? = nil) {
                        self.contentType = contentType
                    }
                }
                /// Received HTTP response headers
                public var headers: Operations.PostLinkedAccounts.Output.Unauthorized.Headers
                /// - Remark: Generated from `#/paths/linked-accounts/POST/responses/401/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/linked-accounts/POST/responses/401/content/json`.
                    public struct JsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/linked-accounts/POST/responses/401/content/json/kind`.
                        @frozen public enum KindPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case badAuthorization_credentialsIncorrect = "bad_authorization.credentials_incorrect"
                            case badAuthorization_accountLocked = "bad_authorization.account_locked"
                            case badAuthorization_mfaExpired = "bad_authorization.mfa_expired"
                            case badAuthorization_mfaResponseIncorrect = "bad_authorization.mfa_response_incorrect"
                            case badAuthorization_user = "bad_authorization.user"
                        }
                        /// - Remark: Generated from `#/paths/linked-accounts/POST/responses/401/content/json/kind`.
                        public var kind: Operations.PostLinkedAccounts.Output.Unauthorized.Body.JsonPayload.KindPayload
                        /// - Remark: Generated from `#/paths/linked-accounts/POST/responses/401/content/json/message`.
                        public var message: Swift.String
                        /// - Remark: Generated from `#/paths/linked-accounts/POST/responses/401/content/json/details`.
                        public var details: Swift.String?
                        /// Creates a new `JsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - kind:
                        ///   - message:
                        ///   - details:
                        public init(
                            kind: Operations.PostLinkedAccounts.Output.Unauthorized.Body.JsonPayload.KindPayload,
                            message: Swift.String,
                            details: Swift.String? = nil
                        ) {
                            self.kind = kind
                            self.message = message
                            self.details = details
                        }
                        public enum CodingKeys: String, CodingKey {
                            case kind
                            case message
                            case details
                        }
                        public init(from decoder: any Decoder) throws {
                            let container = try decoder.container(keyedBy: CodingKeys.self)
                            self.kind = try container.decode(
                                Operations.PostLinkedAccounts.Output.Unauthorized.Body.JsonPayload.KindPayload.self,
                                forKey: .kind
                            )
                            self.message = try container.decode(
                                Swift.String.self,
                                forKey: .message
                            )
                            self.details = try container.decodeIfPresent(
                                Swift.String.self,
                                forKey: .details
                            )
                            try decoder.ensureNoAdditionalProperties(knownKeys: [
                                "kind",
                                "message",
                                "details"
                            ])
                        }
                    }
                    /// - Remark: Generated from `#/paths/linked-accounts/POST/responses/401/content/application\/json`.
                    case json(Operations.PostLinkedAccounts.Output.Unauthorized.Body.JsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.PostLinkedAccounts.Output.Unauthorized.Body.JsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.PostLinkedAccounts.Output.Unauthorized.Body
                /// Creates a new `Unauthorized`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                public init(
                    headers: Operations.PostLinkedAccounts.Output.Unauthorized.Headers = .init(),
                    body: Operations.PostLinkedAccounts.Output.Unauthorized.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// FIXME
            ///
            /// - Remark: Generated from `#/paths//linked-accounts/post(postLinkedAccounts)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Operations.PostLinkedAccounts.Output.Unauthorized)
            /// The associated value of the enum case if `self` is `.unauthorized`.
            ///
            /// - Throws: An error if `self` is not `.unauthorized`.
            /// - SeeAlso: `.unauthorized`.
            public var unauthorized: Operations.PostLinkedAccounts.Output.Unauthorized {
                get throws {
                    switch self {
                    case let .unauthorized(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unauthorized",
                            response: self
                        )
                    }
                }
            }
            public struct NotFound: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/linked-accounts/POST/responses/404/headers`.
                public struct Headers: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/linked-accounts/POST/responses/404/headers/Content-Type`.
                    @frozen public enum ContentTypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                        case applicationJson = "application/json"
                    }
                    /// - Remark: Generated from `#/paths/linked-accounts/POST/responses/404/headers/Content-Type`.
                    public var contentType: Operations.PostLinkedAccounts.Output.NotFound.Headers.ContentTypePayload?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - contentType:
                    public init(contentType: Operations.PostLinkedAccounts.Output.NotFound.Headers.ContentTypePayload? = nil) {
                        self.contentType = contentType
                    }
                }
                /// Received HTTP response headers
                public var headers: Operations.PostLinkedAccounts.Output.NotFound.Headers
                /// - Remark: Generated from `#/paths/linked-accounts/POST/responses/404/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/linked-accounts/POST/responses/404/content/json`.
                    public struct JsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/linked-accounts/POST/responses/404/content/json/kind`.
                        @frozen public enum KindPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case notFound_user = "not_found.user"
                        }
                        /// - Remark: Generated from `#/paths/linked-accounts/POST/responses/404/content/json/kind`.
                        public var kind: Operations.PostLinkedAccounts.Output.NotFound.Body.JsonPayload.KindPayload
                        /// - Remark: Generated from `#/paths/linked-accounts/POST/responses/404/content/json/message`.
                        public var message: Swift.String
                        /// - Remark: Generated from `#/paths/linked-accounts/POST/responses/404/content/json/details`.
                        public var details: Swift.String?
                        /// Creates a new `JsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - kind:
                        ///   - message:
                        ///   - details:
                        public init(
                            kind: Operations.PostLinkedAccounts.Output.NotFound.Body.JsonPayload.KindPayload,
                            message: Swift.String,
                            details: Swift.String? = nil
                        ) {
                            self.kind = kind
                            self.message = message
                            self.details = details
                        }
                        public enum CodingKeys: String, CodingKey {
                            case kind
                            case message
                            case details
                        }
                        public init(from decoder: any Decoder) throws {
                            let container = try decoder.container(keyedBy: CodingKeys.self)
                            self.kind = try container.decode(
                                Operations.PostLinkedAccounts.Output.NotFound.Body.JsonPayload.KindPayload.self,
                                forKey: .kind
                            )
                            self.message = try container.decode(
                                Swift.String.self,
                                forKey: .message
                            )
                            self.details = try container.decodeIfPresent(
                                Swift.String.self,
                                forKey: .details
                            )
                            try decoder.ensureNoAdditionalProperties(knownKeys: [
                                "kind",
                                "message",
                                "details"
                            ])
                        }
                    }
                    /// - Remark: Generated from `#/paths/linked-accounts/POST/responses/404/content/application\/json`.
                    case json(Operations.PostLinkedAccounts.Output.NotFound.Body.JsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.PostLinkedAccounts.Output.NotFound.Body.JsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.PostLinkedAccounts.Output.NotFound.Body
                /// Creates a new `NotFound`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                public init(
                    headers: Operations.PostLinkedAccounts.Output.NotFound.Headers = .init(),
                    body: Operations.PostLinkedAccounts.Output.NotFound.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// FIXME
            ///
            /// - Remark: Generated from `#/paths//linked-accounts/post(postLinkedAccounts)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Operations.PostLinkedAccounts.Output.NotFound)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Operations.PostLinkedAccounts.Output.NotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            public struct Conflict: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/linked-accounts/POST/responses/409/headers`.
                public struct Headers: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/linked-accounts/POST/responses/409/headers/Content-Type`.
                    @frozen public enum ContentTypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                        case applicationJson = "application/json"
                    }
                    /// - Remark: Generated from `#/paths/linked-accounts/POST/responses/409/headers/Content-Type`.
                    public var contentType: Operations.PostLinkedAccounts.Output.Conflict.Headers.ContentTypePayload?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - contentType:
                    public init(contentType: Operations.PostLinkedAccounts.Output.Conflict.Headers.ContentTypePayload? = nil) {
                        self.contentType = contentType
                    }
                }
                /// Received HTTP response headers
                public var headers: Operations.PostLinkedAccounts.Output.Conflict.Headers
                /// - Remark: Generated from `#/paths/linked-accounts/POST/responses/409/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/linked-accounts/POST/responses/409/content/json`.
                    public struct JsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/linked-accounts/POST/responses/409/content/json/kind`.
                        @frozen public enum KindPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case alreadyLinked_account = "already_linked.account"
                        }
                        /// - Remark: Generated from `#/paths/linked-accounts/POST/responses/409/content/json/kind`.
                        public var kind: Operations.PostLinkedAccounts.Output.Conflict.Body.JsonPayload.KindPayload
                        /// - Remark: Generated from `#/paths/linked-accounts/POST/responses/409/content/json/message`.
                        public var message: Swift.String
                        /// - Remark: Generated from `#/paths/linked-accounts/POST/responses/409/content/json/details`.
                        public var details: Swift.String?
                        /// Creates a new `JsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - kind:
                        ///   - message:
                        ///   - details:
                        public init(
                            kind: Operations.PostLinkedAccounts.Output.Conflict.Body.JsonPayload.KindPayload,
                            message: Swift.String,
                            details: Swift.String? = nil
                        ) {
                            self.kind = kind
                            self.message = message
                            self.details = details
                        }
                        public enum CodingKeys: String, CodingKey {
                            case kind
                            case message
                            case details
                        }
                        public init(from decoder: any Decoder) throws {
                            let container = try decoder.container(keyedBy: CodingKeys.self)
                            self.kind = try container.decode(
                                Operations.PostLinkedAccounts.Output.Conflict.Body.JsonPayload.KindPayload.self,
                                forKey: .kind
                            )
                            self.message = try container.decode(
                                Swift.String.self,
                                forKey: .message
                            )
                            self.details = try container.decodeIfPresent(
                                Swift.String.self,
                                forKey: .details
                            )
                            try decoder.ensureNoAdditionalProperties(knownKeys: [
                                "kind",
                                "message",
                                "details"
                            ])
                        }
                    }
                    /// - Remark: Generated from `#/paths/linked-accounts/POST/responses/409/content/application\/json`.
                    case json(Operations.PostLinkedAccounts.Output.Conflict.Body.JsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.PostLinkedAccounts.Output.Conflict.Body.JsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.PostLinkedAccounts.Output.Conflict.Body
                /// Creates a new `Conflict`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                public init(
                    headers: Operations.PostLinkedAccounts.Output.Conflict.Headers = .init(),
                    body: Operations.PostLinkedAccounts.Output.Conflict.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// FIXME
            ///
            /// - Remark: Generated from `#/paths//linked-accounts/post(postLinkedAccounts)/responses/409`.
            ///
            /// HTTP response code: `409 conflict`.
            case conflict(Operations.PostLinkedAccounts.Output.Conflict)
            /// The associated value of the enum case if `self` is `.conflict`.
            ///
            /// - Throws: An error if `self` is not `.conflict`.
            /// - SeeAlso: `.conflict`.
            public var conflict: Operations.PostLinkedAccounts.Output.Conflict {
                get throws {
                    switch self {
                    case let .conflict(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "conflict",
                            response: self
                        )
                    }
                }
            }
            public struct UnprocessableContent: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/linked-accounts/POST/responses/422/headers`.
                public struct Headers: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/linked-accounts/POST/responses/422/headers/Content-Type`.
                    @frozen public enum ContentTypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                        case applicationJson = "application/json"
                    }
                    /// - Remark: Generated from `#/paths/linked-accounts/POST/responses/422/headers/Content-Type`.
                    public var contentType: Operations.PostLinkedAccounts.Output.UnprocessableContent.Headers.ContentTypePayload?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - contentType:
                    public init(contentType: Operations.PostLinkedAccounts.Output.UnprocessableContent.Headers.ContentTypePayload? = nil) {
                        self.contentType = contentType
                    }
                }
                /// Received HTTP response headers
                public var headers: Operations.PostLinkedAccounts.Output.UnprocessableContent.Headers
                /// - Remark: Generated from `#/paths/linked-accounts/POST/responses/422/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/linked-accounts/POST/responses/422/content/json`.
                    public struct JsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/linked-accounts/POST/responses/422/content/json/kind`.
                        @frozen public enum KindPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case schemaInvalid_request = "schema_invalid.request"
                        }
                        /// - Remark: Generated from `#/paths/linked-accounts/POST/responses/422/content/json/kind`.
                        public var kind: Operations.PostLinkedAccounts.Output.UnprocessableContent.Body.JsonPayload.KindPayload
                        /// - Remark: Generated from `#/paths/linked-accounts/POST/responses/422/content/json/message`.
                        public var message: Swift.String
                        /// - Remark: Generated from `#/paths/linked-accounts/POST/responses/422/content/json/details`.
                        public var details: Swift.String?
                        /// Creates a new `JsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - kind:
                        ///   - message:
                        ///   - details:
                        public init(
                            kind: Operations.PostLinkedAccounts.Output.UnprocessableContent.Body.JsonPayload.KindPayload,
                            message: Swift.String,
                            details: Swift.String? = nil
                        ) {
                            self.kind = kind
                            self.message = message
                            self.details = details
                        }
                        public enum CodingKeys: String, CodingKey {
                            case kind
                            case message
                            case details
                        }
                        public init(from decoder: any Decoder) throws {
                            let container = try decoder.container(keyedBy: CodingKeys.self)
                            self.kind = try container.decode(
                                Operations.PostLinkedAccounts.Output.UnprocessableContent.Body.JsonPayload.KindPayload.self,
                                forKey: .kind
                            )
                            self.message = try container.decode(
                                Swift.String.self,
                                forKey: .message
                            )
                            self.details = try container.decodeIfPresent(
                                Swift.String.self,
                                forKey: .details
                            )
                            try decoder.ensureNoAdditionalProperties(knownKeys: [
                                "kind",
                                "message",
                                "details"
                            ])
                        }
                    }
                    /// - Remark: Generated from `#/paths/linked-accounts/POST/responses/422/content/application\/json`.
                    case json(Operations.PostLinkedAccounts.Output.UnprocessableContent.Body.JsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.PostLinkedAccounts.Output.UnprocessableContent.Body.JsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.PostLinkedAccounts.Output.UnprocessableContent.Body
                /// Creates a new `UnprocessableContent`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                public init(
                    headers: Operations.PostLinkedAccounts.Output.UnprocessableContent.Headers = .init(),
                    body: Operations.PostLinkedAccounts.Output.UnprocessableContent.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// FIXME
            ///
            /// - Remark: Generated from `#/paths//linked-accounts/post(postLinkedAccounts)/responses/422`.
            ///
            /// HTTP response code: `422 unprocessableContent`.
            case unprocessableContent(Operations.PostLinkedAccounts.Output.UnprocessableContent)
            /// The associated value of the enum case if `self` is `.unprocessableContent`.
            ///
            /// - Throws: An error if `self` is not `.unprocessableContent`.
            /// - SeeAlso: `.unprocessableContent`.
            public var unprocessableContent: Operations.PostLinkedAccounts.Output.UnprocessableContent {
                get throws {
                    switch self {
                    case let .unprocessableContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unprocessableContent",
                            response: self
                        )
                    }
                }
            }
            public struct PreconditionRequired: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/linked-accounts/POST/responses/428/headers`.
                public struct Headers: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/linked-accounts/POST/responses/428/headers/Content-Type`.
                    @frozen public enum ContentTypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                        case applicationJson = "application/json"
                    }
                    /// - Remark: Generated from `#/paths/linked-accounts/POST/responses/428/headers/Content-Type`.
                    public var contentType: Operations.PostLinkedAccounts.Output.PreconditionRequired.Headers.ContentTypePayload?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - contentType:
                    public init(contentType: Operations.PostLinkedAccounts.Output.PreconditionRequired.Headers.ContentTypePayload? = nil) {
                        self.contentType = contentType
                    }
                }
                /// Received HTTP response headers
                public var headers: Operations.PostLinkedAccounts.Output.PreconditionRequired.Headers
                /// - Remark: Generated from `#/paths/linked-accounts/POST/responses/428/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/linked-accounts/POST/responses/428/content/application\/json`.
                    case json(Components.Schemas.MFARequest)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.MFARequest {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.PostLinkedAccounts.Output.PreconditionRequired.Body
                /// Creates a new `PreconditionRequired`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                public init(
                    headers: Operations.PostLinkedAccounts.Output.PreconditionRequired.Headers = .init(),
                    body: Operations.PostLinkedAccounts.Output.PreconditionRequired.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// FIXME
            ///
            /// - Remark: Generated from `#/paths//linked-accounts/post(postLinkedAccounts)/responses/428`.
            ///
            /// HTTP response code: `428 preconditionRequired`.
            case preconditionRequired(Operations.PostLinkedAccounts.Output.PreconditionRequired)
            /// The associated value of the enum case if `self` is `.preconditionRequired`.
            ///
            /// - Throws: An error if `self` is not `.preconditionRequired`.
            /// - SeeAlso: `.preconditionRequired`.
            public var preconditionRequired: Operations.PostLinkedAccounts.Output.PreconditionRequired {
                get throws {
                    switch self {
                    case let .preconditionRequired(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "preconditionRequired",
                            response: self
                        )
                    }
                }
            }
            public struct InternalServerError: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/linked-accounts/POST/responses/500/headers`.
                public struct Headers: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/linked-accounts/POST/responses/500/headers/Content-Type`.
                    @frozen public enum ContentTypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                        case applicationJson = "application/json"
                    }
                    /// - Remark: Generated from `#/paths/linked-accounts/POST/responses/500/headers/Content-Type`.
                    public var contentType: Operations.PostLinkedAccounts.Output.InternalServerError.Headers.ContentTypePayload?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - contentType:
                    public init(contentType: Operations.PostLinkedAccounts.Output.InternalServerError.Headers.ContentTypePayload? = nil) {
                        self.contentType = contentType
                    }
                }
                /// Received HTTP response headers
                public var headers: Operations.PostLinkedAccounts.Output.InternalServerError.Headers
                /// - Remark: Generated from `#/paths/linked-accounts/POST/responses/500/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/linked-accounts/POST/responses/500/content/json`.
                    public struct JsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/linked-accounts/POST/responses/500/content/json/kind`.
                        @frozen public enum KindPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case unexpected = "unexpected"
                        }
                        /// - Remark: Generated from `#/paths/linked-accounts/POST/responses/500/content/json/kind`.
                        public var kind: Operations.PostLinkedAccounts.Output.InternalServerError.Body.JsonPayload.KindPayload
                        /// - Remark: Generated from `#/paths/linked-accounts/POST/responses/500/content/json/message`.
                        public var message: Swift.String
                        /// - Remark: Generated from `#/paths/linked-accounts/POST/responses/500/content/json/details`.
                        public var details: Swift.String?
                        /// Creates a new `JsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - kind:
                        ///   - message:
                        ///   - details:
                        public init(
                            kind: Operations.PostLinkedAccounts.Output.InternalServerError.Body.JsonPayload.KindPayload,
                            message: Swift.String,
                            details: Swift.String? = nil
                        ) {
                            self.kind = kind
                            self.message = message
                            self.details = details
                        }
                        public enum CodingKeys: String, CodingKey {
                            case kind
                            case message
                            case details
                        }
                        public init(from decoder: any Decoder) throws {
                            let container = try decoder.container(keyedBy: CodingKeys.self)
                            self.kind = try container.decode(
                                Operations.PostLinkedAccounts.Output.InternalServerError.Body.JsonPayload.KindPayload.self,
                                forKey: .kind
                            )
                            self.message = try container.decode(
                                Swift.String.self,
                                forKey: .message
                            )
                            self.details = try container.decodeIfPresent(
                                Swift.String.self,
                                forKey: .details
                            )
                            try decoder.ensureNoAdditionalProperties(knownKeys: [
                                "kind",
                                "message",
                                "details"
                            ])
                        }
                    }
                    /// - Remark: Generated from `#/paths/linked-accounts/POST/responses/500/content/application\/json`.
                    case json(Operations.PostLinkedAccounts.Output.InternalServerError.Body.JsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.PostLinkedAccounts.Output.InternalServerError.Body.JsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.PostLinkedAccounts.Output.InternalServerError.Body
                /// Creates a new `InternalServerError`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                public init(
                    headers: Operations.PostLinkedAccounts.Output.InternalServerError.Headers = .init(),
                    body: Operations.PostLinkedAccounts.Output.InternalServerError.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// FIXME
            ///
            /// - Remark: Generated from `#/paths//linked-accounts/post(postLinkedAccounts)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Operations.PostLinkedAccounts.Output.InternalServerError)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            public var internalServerError: Operations.PostLinkedAccounts.Output.InternalServerError {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// - Remark: HTTP `DELETE /linked-accounts/{linkedAccountID}`.
    /// - Remark: Generated from `#/paths//linked-accounts/{linkedAccountID}/delete(deleteLinkedAccount)`.
    public enum DeleteLinkedAccount {
        public static let id: Swift.String = "deleteLinkedAccount"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/linked-accounts/{linkedAccountID}/DELETE/path`.
            public struct Path: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/linked-accounts/{linkedAccountID}/DELETE/path/linkedAccountID`.
                public var linkedAccountID: Components.Schemas.LinkedAccountID
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - linkedAccountID:
                public init(linkedAccountID: Components.Schemas.LinkedAccountID) {
                    self.linkedAccountID = linkedAccountID
                }
            }
            public var path: Operations.DeleteLinkedAccount.Input.Path
            /// - Remark: Generated from `#/paths/linked-accounts/{linkedAccountID}/DELETE/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.DeleteLinkedAccount.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.DeleteLinkedAccount.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.DeleteLinkedAccount.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.DeleteLinkedAccount.Input.Path,
                headers: Operations.DeleteLinkedAccount.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct NoContent: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/linked-accounts/{linkedAccountID}/DELETE/responses/204/headers`.
                public struct Headers: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/linked-accounts/{linkedAccountID}/DELETE/responses/204/headers/Content-Type`.
                    @frozen public enum ContentTypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                        case applicationJson = "application/json"
                    }
                    /// - Remark: Generated from `#/paths/linked-accounts/{linkedAccountID}/DELETE/responses/204/headers/Content-Type`.
                    public var contentType: Operations.DeleteLinkedAccount.Output.NoContent.Headers.ContentTypePayload?
                    /// - Remark: Generated from `#/paths/linked-accounts/{linkedAccountID}/DELETE/responses/204/headers/Content-Encoding`.
                    @frozen public enum ContentEncodingPayload: String, Codable, Hashable, Sendable, CaseIterable {
                        case gzip = "gzip"
                    }
                    /// - Remark: Generated from `#/paths/linked-accounts/{linkedAccountID}/DELETE/responses/204/headers/Content-Encoding`.
                    public var contentEncoding: Operations.DeleteLinkedAccount.Output.NoContent.Headers.ContentEncodingPayload?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - contentType:
                    ///   - contentEncoding:
                    public init(
                        contentType: Operations.DeleteLinkedAccount.Output.NoContent.Headers.ContentTypePayload? = nil,
                        contentEncoding: Operations.DeleteLinkedAccount.Output.NoContent.Headers.ContentEncodingPayload? = nil
                    ) {
                        self.contentType = contentType
                        self.contentEncoding = contentEncoding
                    }
                }
                /// Received HTTP response headers
                public var headers: Operations.DeleteLinkedAccount.Output.NoContent.Headers
                /// Creates a new `NoContent`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                public init(headers: Operations.DeleteLinkedAccount.Output.NoContent.Headers = .init()) {
                    self.headers = headers
                }
            }
            /// FIXME
            ///
            /// - Remark: Generated from `#/paths//linked-accounts/{linkedAccountID}/delete(deleteLinkedAccount)/responses/204`.
            ///
            /// HTTP response code: `204 noContent`.
            case noContent(Operations.DeleteLinkedAccount.Output.NoContent)
            /// The associated value of the enum case if `self` is `.noContent`.
            ///
            /// - Throws: An error if `self` is not `.noContent`.
            /// - SeeAlso: `.noContent`.
            public var noContent: Operations.DeleteLinkedAccount.Output.NoContent {
                get throws {
                    switch self {
                    case let .noContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "noContent",
                            response: self
                        )
                    }
                }
            }
            public struct Unauthorized: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/linked-accounts/{linkedAccountID}/DELETE/responses/401/headers`.
                public struct Headers: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/linked-accounts/{linkedAccountID}/DELETE/responses/401/headers/Content-Type`.
                    @frozen public enum ContentTypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                        case applicationJson = "application/json"
                    }
                    /// - Remark: Generated from `#/paths/linked-accounts/{linkedAccountID}/DELETE/responses/401/headers/Content-Type`.
                    public var contentType: Operations.DeleteLinkedAccount.Output.Unauthorized.Headers.ContentTypePayload?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - contentType:
                    public init(contentType: Operations.DeleteLinkedAccount.Output.Unauthorized.Headers.ContentTypePayload? = nil) {
                        self.contentType = contentType
                    }
                }
                /// Received HTTP response headers
                public var headers: Operations.DeleteLinkedAccount.Output.Unauthorized.Headers
                /// - Remark: Generated from `#/paths/linked-accounts/{linkedAccountID}/DELETE/responses/401/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/linked-accounts/{linkedAccountID}/DELETE/responses/401/content/json`.
                    public struct JsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/linked-accounts/{linkedAccountID}/DELETE/responses/401/content/json/kind`.
                        @frozen public enum KindPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case badAuthorization_user = "bad_authorization.user"
                        }
                        /// - Remark: Generated from `#/paths/linked-accounts/{linkedAccountID}/DELETE/responses/401/content/json/kind`.
                        public var kind: Operations.DeleteLinkedAccount.Output.Unauthorized.Body.JsonPayload.KindPayload
                        /// - Remark: Generated from `#/paths/linked-accounts/{linkedAccountID}/DELETE/responses/401/content/json/message`.
                        public var message: Swift.String
                        /// - Remark: Generated from `#/paths/linked-accounts/{linkedAccountID}/DELETE/responses/401/content/json/details`.
                        public var details: Swift.String?
                        /// Creates a new `JsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - kind:
                        ///   - message:
                        ///   - details:
                        public init(
                            kind: Operations.DeleteLinkedAccount.Output.Unauthorized.Body.JsonPayload.KindPayload,
                            message: Swift.String,
                            details: Swift.String? = nil
                        ) {
                            self.kind = kind
                            self.message = message
                            self.details = details
                        }
                        public enum CodingKeys: String, CodingKey {
                            case kind
                            case message
                            case details
                        }
                        public init(from decoder: any Decoder) throws {
                            let container = try decoder.container(keyedBy: CodingKeys.self)
                            self.kind = try container.decode(
                                Operations.DeleteLinkedAccount.Output.Unauthorized.Body.JsonPayload.KindPayload.self,
                                forKey: .kind
                            )
                            self.message = try container.decode(
                                Swift.String.self,
                                forKey: .message
                            )
                            self.details = try container.decodeIfPresent(
                                Swift.String.self,
                                forKey: .details
                            )
                            try decoder.ensureNoAdditionalProperties(knownKeys: [
                                "kind",
                                "message",
                                "details"
                            ])
                        }
                    }
                    /// - Remark: Generated from `#/paths/linked-accounts/{linkedAccountID}/DELETE/responses/401/content/application\/json`.
                    case json(Operations.DeleteLinkedAccount.Output.Unauthorized.Body.JsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.DeleteLinkedAccount.Output.Unauthorized.Body.JsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.DeleteLinkedAccount.Output.Unauthorized.Body
                /// Creates a new `Unauthorized`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                public init(
                    headers: Operations.DeleteLinkedAccount.Output.Unauthorized.Headers = .init(),
                    body: Operations.DeleteLinkedAccount.Output.Unauthorized.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// FIXME
            ///
            /// - Remark: Generated from `#/paths//linked-accounts/{linkedAccountID}/delete(deleteLinkedAccount)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Operations.DeleteLinkedAccount.Output.Unauthorized)
            /// The associated value of the enum case if `self` is `.unauthorized`.
            ///
            /// - Throws: An error if `self` is not `.unauthorized`.
            /// - SeeAlso: `.unauthorized`.
            public var unauthorized: Operations.DeleteLinkedAccount.Output.Unauthorized {
                get throws {
                    switch self {
                    case let .unauthorized(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unauthorized",
                            response: self
                        )
                    }
                }
            }
            public struct NotFound: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/linked-accounts/{linkedAccountID}/DELETE/responses/404/headers`.
                public struct Headers: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/linked-accounts/{linkedAccountID}/DELETE/responses/404/headers/Content-Type`.
                    @frozen public enum ContentTypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                        case applicationJson = "application/json"
                    }
                    /// - Remark: Generated from `#/paths/linked-accounts/{linkedAccountID}/DELETE/responses/404/headers/Content-Type`.
                    public var contentType: Operations.DeleteLinkedAccount.Output.NotFound.Headers.ContentTypePayload?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - contentType:
                    public init(contentType: Operations.DeleteLinkedAccount.Output.NotFound.Headers.ContentTypePayload? = nil) {
                        self.contentType = contentType
                    }
                }
                /// Received HTTP response headers
                public var headers: Operations.DeleteLinkedAccount.Output.NotFound.Headers
                /// - Remark: Generated from `#/paths/linked-accounts/{linkedAccountID}/DELETE/responses/404/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/linked-accounts/{linkedAccountID}/DELETE/responses/404/content/json`.
                    public struct JsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/linked-accounts/{linkedAccountID}/DELETE/responses/404/content/json/kind`.
                        @frozen public enum KindPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case notFound_user = "not_found.user"
                            case notFound_linkedAccount = "not_found.linked_account"
                        }
                        /// - Remark: Generated from `#/paths/linked-accounts/{linkedAccountID}/DELETE/responses/404/content/json/kind`.
                        public var kind: Operations.DeleteLinkedAccount.Output.NotFound.Body.JsonPayload.KindPayload
                        /// - Remark: Generated from `#/paths/linked-accounts/{linkedAccountID}/DELETE/responses/404/content/json/message`.
                        public var message: Swift.String
                        /// - Remark: Generated from `#/paths/linked-accounts/{linkedAccountID}/DELETE/responses/404/content/json/details`.
                        public var details: Swift.String?
                        /// Creates a new `JsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - kind:
                        ///   - message:
                        ///   - details:
                        public init(
                            kind: Operations.DeleteLinkedAccount.Output.NotFound.Body.JsonPayload.KindPayload,
                            message: Swift.String,
                            details: Swift.String? = nil
                        ) {
                            self.kind = kind
                            self.message = message
                            self.details = details
                        }
                        public enum CodingKeys: String, CodingKey {
                            case kind
                            case message
                            case details
                        }
                        public init(from decoder: any Decoder) throws {
                            let container = try decoder.container(keyedBy: CodingKeys.self)
                            self.kind = try container.decode(
                                Operations.DeleteLinkedAccount.Output.NotFound.Body.JsonPayload.KindPayload.self,
                                forKey: .kind
                            )
                            self.message = try container.decode(
                                Swift.String.self,
                                forKey: .message
                            )
                            self.details = try container.decodeIfPresent(
                                Swift.String.self,
                                forKey: .details
                            )
                            try decoder.ensureNoAdditionalProperties(knownKeys: [
                                "kind",
                                "message",
                                "details"
                            ])
                        }
                    }
                    /// - Remark: Generated from `#/paths/linked-accounts/{linkedAccountID}/DELETE/responses/404/content/application\/json`.
                    case json(Operations.DeleteLinkedAccount.Output.NotFound.Body.JsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.DeleteLinkedAccount.Output.NotFound.Body.JsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.DeleteLinkedAccount.Output.NotFound.Body
                /// Creates a new `NotFound`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                public init(
                    headers: Operations.DeleteLinkedAccount.Output.NotFound.Headers = .init(),
                    body: Operations.DeleteLinkedAccount.Output.NotFound.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// FIXME
            ///
            /// - Remark: Generated from `#/paths//linked-accounts/{linkedAccountID}/delete(deleteLinkedAccount)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Operations.DeleteLinkedAccount.Output.NotFound)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Operations.DeleteLinkedAccount.Output.NotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            public struct Conflict: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/linked-accounts/{linkedAccountID}/DELETE/responses/409/headers`.
                public struct Headers: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/linked-accounts/{linkedAccountID}/DELETE/responses/409/headers/Content-Type`.
                    @frozen public enum ContentTypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                        case applicationJson = "application/json"
                    }
                    /// - Remark: Generated from `#/paths/linked-accounts/{linkedAccountID}/DELETE/responses/409/headers/Content-Type`.
                    public var contentType: Operations.DeleteLinkedAccount.Output.Conflict.Headers.ContentTypePayload?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - contentType:
                    public init(contentType: Operations.DeleteLinkedAccount.Output.Conflict.Headers.ContentTypePayload? = nil) {
                        self.contentType = contentType
                    }
                }
                /// Received HTTP response headers
                public var headers: Operations.DeleteLinkedAccount.Output.Conflict.Headers
                /// - Remark: Generated from `#/paths/linked-accounts/{linkedAccountID}/DELETE/responses/409/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/linked-accounts/{linkedAccountID}/DELETE/responses/409/content/json`.
                    public struct JsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/linked-accounts/{linkedAccountID}/DELETE/responses/409/content/json/kind`.
                        @frozen public enum KindPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case alreadyUnlinked_account = "already_unlinked.account"
                        }
                        /// - Remark: Generated from `#/paths/linked-accounts/{linkedAccountID}/DELETE/responses/409/content/json/kind`.
                        public var kind: Operations.DeleteLinkedAccount.Output.Conflict.Body.JsonPayload.KindPayload
                        /// - Remark: Generated from `#/paths/linked-accounts/{linkedAccountID}/DELETE/responses/409/content/json/message`.
                        public var message: Swift.String
                        /// - Remark: Generated from `#/paths/linked-accounts/{linkedAccountID}/DELETE/responses/409/content/json/details`.
                        public var details: Swift.String?
                        /// Creates a new `JsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - kind:
                        ///   - message:
                        ///   - details:
                        public init(
                            kind: Operations.DeleteLinkedAccount.Output.Conflict.Body.JsonPayload.KindPayload,
                            message: Swift.String,
                            details: Swift.String? = nil
                        ) {
                            self.kind = kind
                            self.message = message
                            self.details = details
                        }
                        public enum CodingKeys: String, CodingKey {
                            case kind
                            case message
                            case details
                        }
                        public init(from decoder: any Decoder) throws {
                            let container = try decoder.container(keyedBy: CodingKeys.self)
                            self.kind = try container.decode(
                                Operations.DeleteLinkedAccount.Output.Conflict.Body.JsonPayload.KindPayload.self,
                                forKey: .kind
                            )
                            self.message = try container.decode(
                                Swift.String.self,
                                forKey: .message
                            )
                            self.details = try container.decodeIfPresent(
                                Swift.String.self,
                                forKey: .details
                            )
                            try decoder.ensureNoAdditionalProperties(knownKeys: [
                                "kind",
                                "message",
                                "details"
                            ])
                        }
                    }
                    /// - Remark: Generated from `#/paths/linked-accounts/{linkedAccountID}/DELETE/responses/409/content/application\/json`.
                    case json(Operations.DeleteLinkedAccount.Output.Conflict.Body.JsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.DeleteLinkedAccount.Output.Conflict.Body.JsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.DeleteLinkedAccount.Output.Conflict.Body
                /// Creates a new `Conflict`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                public init(
                    headers: Operations.DeleteLinkedAccount.Output.Conflict.Headers = .init(),
                    body: Operations.DeleteLinkedAccount.Output.Conflict.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// FIXME
            ///
            /// - Remark: Generated from `#/paths//linked-accounts/{linkedAccountID}/delete(deleteLinkedAccount)/responses/409`.
            ///
            /// HTTP response code: `409 conflict`.
            case conflict(Operations.DeleteLinkedAccount.Output.Conflict)
            /// The associated value of the enum case if `self` is `.conflict`.
            ///
            /// - Throws: An error if `self` is not `.conflict`.
            /// - SeeAlso: `.conflict`.
            public var conflict: Operations.DeleteLinkedAccount.Output.Conflict {
                get throws {
                    switch self {
                    case let .conflict(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "conflict",
                            response: self
                        )
                    }
                }
            }
            public struct UnprocessableContent: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/linked-accounts/{linkedAccountID}/DELETE/responses/422/headers`.
                public struct Headers: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/linked-accounts/{linkedAccountID}/DELETE/responses/422/headers/Content-Type`.
                    @frozen public enum ContentTypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                        case applicationJson = "application/json"
                    }
                    /// - Remark: Generated from `#/paths/linked-accounts/{linkedAccountID}/DELETE/responses/422/headers/Content-Type`.
                    public var contentType: Operations.DeleteLinkedAccount.Output.UnprocessableContent.Headers.ContentTypePayload?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - contentType:
                    public init(contentType: Operations.DeleteLinkedAccount.Output.UnprocessableContent.Headers.ContentTypePayload? = nil) {
                        self.contentType = contentType
                    }
                }
                /// Received HTTP response headers
                public var headers: Operations.DeleteLinkedAccount.Output.UnprocessableContent.Headers
                /// - Remark: Generated from `#/paths/linked-accounts/{linkedAccountID}/DELETE/responses/422/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/linked-accounts/{linkedAccountID}/DELETE/responses/422/content/json`.
                    public struct JsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/linked-accounts/{linkedAccountID}/DELETE/responses/422/content/json/kind`.
                        @frozen public enum KindPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case schemaInvalid_request = "schema_invalid.request"
                        }
                        /// - Remark: Generated from `#/paths/linked-accounts/{linkedAccountID}/DELETE/responses/422/content/json/kind`.
                        public var kind: Operations.DeleteLinkedAccount.Output.UnprocessableContent.Body.JsonPayload.KindPayload
                        /// - Remark: Generated from `#/paths/linked-accounts/{linkedAccountID}/DELETE/responses/422/content/json/message`.
                        public var message: Swift.String
                        /// - Remark: Generated from `#/paths/linked-accounts/{linkedAccountID}/DELETE/responses/422/content/json/details`.
                        public var details: Swift.String?
                        /// Creates a new `JsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - kind:
                        ///   - message:
                        ///   - details:
                        public init(
                            kind: Operations.DeleteLinkedAccount.Output.UnprocessableContent.Body.JsonPayload.KindPayload,
                            message: Swift.String,
                            details: Swift.String? = nil
                        ) {
                            self.kind = kind
                            self.message = message
                            self.details = details
                        }
                        public enum CodingKeys: String, CodingKey {
                            case kind
                            case message
                            case details
                        }
                        public init(from decoder: any Decoder) throws {
                            let container = try decoder.container(keyedBy: CodingKeys.self)
                            self.kind = try container.decode(
                                Operations.DeleteLinkedAccount.Output.UnprocessableContent.Body.JsonPayload.KindPayload.self,
                                forKey: .kind
                            )
                            self.message = try container.decode(
                                Swift.String.self,
                                forKey: .message
                            )
                            self.details = try container.decodeIfPresent(
                                Swift.String.self,
                                forKey: .details
                            )
                            try decoder.ensureNoAdditionalProperties(knownKeys: [
                                "kind",
                                "message",
                                "details"
                            ])
                        }
                    }
                    /// - Remark: Generated from `#/paths/linked-accounts/{linkedAccountID}/DELETE/responses/422/content/application\/json`.
                    case json(Operations.DeleteLinkedAccount.Output.UnprocessableContent.Body.JsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.DeleteLinkedAccount.Output.UnprocessableContent.Body.JsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.DeleteLinkedAccount.Output.UnprocessableContent.Body
                /// Creates a new `UnprocessableContent`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                public init(
                    headers: Operations.DeleteLinkedAccount.Output.UnprocessableContent.Headers = .init(),
                    body: Operations.DeleteLinkedAccount.Output.UnprocessableContent.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// FIXME
            ///
            /// - Remark: Generated from `#/paths//linked-accounts/{linkedAccountID}/delete(deleteLinkedAccount)/responses/422`.
            ///
            /// HTTP response code: `422 unprocessableContent`.
            case unprocessableContent(Operations.DeleteLinkedAccount.Output.UnprocessableContent)
            /// The associated value of the enum case if `self` is `.unprocessableContent`.
            ///
            /// - Throws: An error if `self` is not `.unprocessableContent`.
            /// - SeeAlso: `.unprocessableContent`.
            public var unprocessableContent: Operations.DeleteLinkedAccount.Output.UnprocessableContent {
                get throws {
                    switch self {
                    case let .unprocessableContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unprocessableContent",
                            response: self
                        )
                    }
                }
            }
            public struct InternalServerError: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/linked-accounts/{linkedAccountID}/DELETE/responses/500/headers`.
                public struct Headers: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/linked-accounts/{linkedAccountID}/DELETE/responses/500/headers/Content-Type`.
                    @frozen public enum ContentTypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                        case applicationJson = "application/json"
                    }
                    /// - Remark: Generated from `#/paths/linked-accounts/{linkedAccountID}/DELETE/responses/500/headers/Content-Type`.
                    public var contentType: Operations.DeleteLinkedAccount.Output.InternalServerError.Headers.ContentTypePayload?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - contentType:
                    public init(contentType: Operations.DeleteLinkedAccount.Output.InternalServerError.Headers.ContentTypePayload? = nil) {
                        self.contentType = contentType
                    }
                }
                /// Received HTTP response headers
                public var headers: Operations.DeleteLinkedAccount.Output.InternalServerError.Headers
                /// - Remark: Generated from `#/paths/linked-accounts/{linkedAccountID}/DELETE/responses/500/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/linked-accounts/{linkedAccountID}/DELETE/responses/500/content/json`.
                    public struct JsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/linked-accounts/{linkedAccountID}/DELETE/responses/500/content/json/kind`.
                        @frozen public enum KindPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case unexpected = "unexpected"
                        }
                        /// - Remark: Generated from `#/paths/linked-accounts/{linkedAccountID}/DELETE/responses/500/content/json/kind`.
                        public var kind: Operations.DeleteLinkedAccount.Output.InternalServerError.Body.JsonPayload.KindPayload
                        /// - Remark: Generated from `#/paths/linked-accounts/{linkedAccountID}/DELETE/responses/500/content/json/message`.
                        public var message: Swift.String
                        /// - Remark: Generated from `#/paths/linked-accounts/{linkedAccountID}/DELETE/responses/500/content/json/details`.
                        public var details: Swift.String?
                        /// Creates a new `JsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - kind:
                        ///   - message:
                        ///   - details:
                        public init(
                            kind: Operations.DeleteLinkedAccount.Output.InternalServerError.Body.JsonPayload.KindPayload,
                            message: Swift.String,
                            details: Swift.String? = nil
                        ) {
                            self.kind = kind
                            self.message = message
                            self.details = details
                        }
                        public enum CodingKeys: String, CodingKey {
                            case kind
                            case message
                            case details
                        }
                        public init(from decoder: any Decoder) throws {
                            let container = try decoder.container(keyedBy: CodingKeys.self)
                            self.kind = try container.decode(
                                Operations.DeleteLinkedAccount.Output.InternalServerError.Body.JsonPayload.KindPayload.self,
                                forKey: .kind
                            )
                            self.message = try container.decode(
                                Swift.String.self,
                                forKey: .message
                            )
                            self.details = try container.decodeIfPresent(
                                Swift.String.self,
                                forKey: .details
                            )
                            try decoder.ensureNoAdditionalProperties(knownKeys: [
                                "kind",
                                "message",
                                "details"
                            ])
                        }
                    }
                    /// - Remark: Generated from `#/paths/linked-accounts/{linkedAccountID}/DELETE/responses/500/content/application\/json`.
                    case json(Operations.DeleteLinkedAccount.Output.InternalServerError.Body.JsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.DeleteLinkedAccount.Output.InternalServerError.Body.JsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.DeleteLinkedAccount.Output.InternalServerError.Body
                /// Creates a new `InternalServerError`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                public init(
                    headers: Operations.DeleteLinkedAccount.Output.InternalServerError.Headers = .init(),
                    body: Operations.DeleteLinkedAccount.Output.InternalServerError.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// FIXME
            ///
            /// - Remark: Generated from `#/paths//linked-accounts/{linkedAccountID}/delete(deleteLinkedAccount)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Operations.DeleteLinkedAccount.Output.InternalServerError)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            public var internalServerError: Operations.DeleteLinkedAccount.Output.InternalServerError {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// - Remark: HTTP `GET /linked-accounts/fiat-holding-accounts`.
    /// - Remark: Generated from `#/paths//linked-accounts/fiat-holding-accounts/get(getLinkedAccountsFiatHoldingAccounts)`.
    public enum GetLinkedAccountsFiatHoldingAccounts {
        public static let id: Swift.String = "getLinkedAccountsFiatHoldingAccounts"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/linked-accounts/fiat-holding-accounts/GET/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/linked-accounts/fiat-holding-accounts/GET/query/linkedAccountIDs`.
                public var linkedAccountIDs: Swift.String?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - linkedAccountIDs:
                public init(linkedAccountIDs: Swift.String? = nil) {
                    self.linkedAccountIDs = linkedAccountIDs
                }
            }
            public var query: Operations.GetLinkedAccountsFiatHoldingAccounts.Input.Query
            /// - Remark: Generated from `#/paths/linked-accounts/fiat-holding-accounts/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.GetLinkedAccountsFiatHoldingAccounts.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.GetLinkedAccountsFiatHoldingAccounts.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.GetLinkedAccountsFiatHoldingAccounts.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            public init(
                query: Operations.GetLinkedAccountsFiatHoldingAccounts.Input.Query = .init(),
                headers: Operations.GetLinkedAccountsFiatHoldingAccounts.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/linked-accounts/fiat-holding-accounts/GET/responses/200/headers`.
                public struct Headers: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/linked-accounts/fiat-holding-accounts/GET/responses/200/headers/Content-Type`.
                    @frozen public enum ContentTypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                        case applicationJson = "application/json"
                    }
                    /// - Remark: Generated from `#/paths/linked-accounts/fiat-holding-accounts/GET/responses/200/headers/Content-Type`.
                    public var contentType: Operations.GetLinkedAccountsFiatHoldingAccounts.Output.Ok.Headers.ContentTypePayload?
                    /// - Remark: Generated from `#/paths/linked-accounts/fiat-holding-accounts/GET/responses/200/headers/Content-Encoding`.
                    @frozen public enum ContentEncodingPayload: String, Codable, Hashable, Sendable, CaseIterable {
                        case gzip = "gzip"
                    }
                    /// - Remark: Generated from `#/paths/linked-accounts/fiat-holding-accounts/GET/responses/200/headers/Content-Encoding`.
                    public var contentEncoding: Operations.GetLinkedAccountsFiatHoldingAccounts.Output.Ok.Headers.ContentEncodingPayload?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - contentType:
                    ///   - contentEncoding:
                    public init(
                        contentType: Operations.GetLinkedAccountsFiatHoldingAccounts.Output.Ok.Headers.ContentTypePayload? = nil,
                        contentEncoding: Operations.GetLinkedAccountsFiatHoldingAccounts.Output.Ok.Headers.ContentEncodingPayload? = nil
                    ) {
                        self.contentType = contentType
                        self.contentEncoding = contentEncoding
                    }
                }
                /// Received HTTP response headers
                public var headers: Operations.GetLinkedAccountsFiatHoldingAccounts.Output.Ok.Headers
                /// - Remark: Generated from `#/paths/linked-accounts/fiat-holding-accounts/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/linked-accounts/fiat-holding-accounts/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.PrimaryFiatHoldingAccount])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: [Components.Schemas.PrimaryFiatHoldingAccount] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.GetLinkedAccountsFiatHoldingAccounts.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                public init(
                    headers: Operations.GetLinkedAccountsFiatHoldingAccounts.Output.Ok.Headers = .init(),
                    body: Operations.GetLinkedAccountsFiatHoldingAccounts.Output.Ok.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// FIXME
            ///
            /// - Remark: Generated from `#/paths//linked-accounts/fiat-holding-accounts/get(getLinkedAccountsFiatHoldingAccounts)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.GetLinkedAccountsFiatHoldingAccounts.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.GetLinkedAccountsFiatHoldingAccounts.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            public struct Unauthorized: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/linked-accounts/fiat-holding-accounts/GET/responses/401/headers`.
                public struct Headers: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/linked-accounts/fiat-holding-accounts/GET/responses/401/headers/Content-Type`.
                    @frozen public enum ContentTypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                        case applicationJson = "application/json"
                    }
                    /// - Remark: Generated from `#/paths/linked-accounts/fiat-holding-accounts/GET/responses/401/headers/Content-Type`.
                    public var contentType: Operations.GetLinkedAccountsFiatHoldingAccounts.Output.Unauthorized.Headers.ContentTypePayload?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - contentType:
                    public init(contentType: Operations.GetLinkedAccountsFiatHoldingAccounts.Output.Unauthorized.Headers.ContentTypePayload? = nil) {
                        self.contentType = contentType
                    }
                }
                /// Received HTTP response headers
                public var headers: Operations.GetLinkedAccountsFiatHoldingAccounts.Output.Unauthorized.Headers
                /// - Remark: Generated from `#/paths/linked-accounts/fiat-holding-accounts/GET/responses/401/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/linked-accounts/fiat-holding-accounts/GET/responses/401/content/json`.
                    public struct JsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/linked-accounts/fiat-holding-accounts/GET/responses/401/content/json/kind`.
                        @frozen public enum KindPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case badAuthorization_user = "bad_authorization.user"
                        }
                        /// - Remark: Generated from `#/paths/linked-accounts/fiat-holding-accounts/GET/responses/401/content/json/kind`.
                        public var kind: Operations.GetLinkedAccountsFiatHoldingAccounts.Output.Unauthorized.Body.JsonPayload.KindPayload
                        /// - Remark: Generated from `#/paths/linked-accounts/fiat-holding-accounts/GET/responses/401/content/json/message`.
                        public var message: Swift.String
                        /// - Remark: Generated from `#/paths/linked-accounts/fiat-holding-accounts/GET/responses/401/content/json/details`.
                        public var details: Swift.String?
                        /// Creates a new `JsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - kind:
                        ///   - message:
                        ///   - details:
                        public init(
                            kind: Operations.GetLinkedAccountsFiatHoldingAccounts.Output.Unauthorized.Body.JsonPayload.KindPayload,
                            message: Swift.String,
                            details: Swift.String? = nil
                        ) {
                            self.kind = kind
                            self.message = message
                            self.details = details
                        }
                        public enum CodingKeys: String, CodingKey {
                            case kind
                            case message
                            case details
                        }
                        public init(from decoder: any Decoder) throws {
                            let container = try decoder.container(keyedBy: CodingKeys.self)
                            self.kind = try container.decode(
                                Operations.GetLinkedAccountsFiatHoldingAccounts.Output.Unauthorized.Body.JsonPayload.KindPayload.self,
                                forKey: .kind
                            )
                            self.message = try container.decode(
                                Swift.String.self,
                                forKey: .message
                            )
                            self.details = try container.decodeIfPresent(
                                Swift.String.self,
                                forKey: .details
                            )
                            try decoder.ensureNoAdditionalProperties(knownKeys: [
                                "kind",
                                "message",
                                "details"
                            ])
                        }
                    }
                    /// - Remark: Generated from `#/paths/linked-accounts/fiat-holding-accounts/GET/responses/401/content/application\/json`.
                    case json(Operations.GetLinkedAccountsFiatHoldingAccounts.Output.Unauthorized.Body.JsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.GetLinkedAccountsFiatHoldingAccounts.Output.Unauthorized.Body.JsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.GetLinkedAccountsFiatHoldingAccounts.Output.Unauthorized.Body
                /// Creates a new `Unauthorized`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                public init(
                    headers: Operations.GetLinkedAccountsFiatHoldingAccounts.Output.Unauthorized.Headers = .init(),
                    body: Operations.GetLinkedAccountsFiatHoldingAccounts.Output.Unauthorized.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// FIXME
            ///
            /// - Remark: Generated from `#/paths//linked-accounts/fiat-holding-accounts/get(getLinkedAccountsFiatHoldingAccounts)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Operations.GetLinkedAccountsFiatHoldingAccounts.Output.Unauthorized)
            /// The associated value of the enum case if `self` is `.unauthorized`.
            ///
            /// - Throws: An error if `self` is not `.unauthorized`.
            /// - SeeAlso: `.unauthorized`.
            public var unauthorized: Operations.GetLinkedAccountsFiatHoldingAccounts.Output.Unauthorized {
                get throws {
                    switch self {
                    case let .unauthorized(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unauthorized",
                            response: self
                        )
                    }
                }
            }
            public struct NotFound: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/linked-accounts/fiat-holding-accounts/GET/responses/404/headers`.
                public struct Headers: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/linked-accounts/fiat-holding-accounts/GET/responses/404/headers/Content-Type`.
                    @frozen public enum ContentTypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                        case applicationJson = "application/json"
                    }
                    /// - Remark: Generated from `#/paths/linked-accounts/fiat-holding-accounts/GET/responses/404/headers/Content-Type`.
                    public var contentType: Operations.GetLinkedAccountsFiatHoldingAccounts.Output.NotFound.Headers.ContentTypePayload?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - contentType:
                    public init(contentType: Operations.GetLinkedAccountsFiatHoldingAccounts.Output.NotFound.Headers.ContentTypePayload? = nil) {
                        self.contentType = contentType
                    }
                }
                /// Received HTTP response headers
                public var headers: Operations.GetLinkedAccountsFiatHoldingAccounts.Output.NotFound.Headers
                /// - Remark: Generated from `#/paths/linked-accounts/fiat-holding-accounts/GET/responses/404/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/linked-accounts/fiat-holding-accounts/GET/responses/404/content/json`.
                    public struct JsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/linked-accounts/fiat-holding-accounts/GET/responses/404/content/json/kind`.
                        @frozen public enum KindPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case notFound_user = "not_found.user"
                        }
                        /// - Remark: Generated from `#/paths/linked-accounts/fiat-holding-accounts/GET/responses/404/content/json/kind`.
                        public var kind: Operations.GetLinkedAccountsFiatHoldingAccounts.Output.NotFound.Body.JsonPayload.KindPayload
                        /// - Remark: Generated from `#/paths/linked-accounts/fiat-holding-accounts/GET/responses/404/content/json/message`.
                        public var message: Swift.String
                        /// - Remark: Generated from `#/paths/linked-accounts/fiat-holding-accounts/GET/responses/404/content/json/details`.
                        public var details: Swift.String?
                        /// Creates a new `JsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - kind:
                        ///   - message:
                        ///   - details:
                        public init(
                            kind: Operations.GetLinkedAccountsFiatHoldingAccounts.Output.NotFound.Body.JsonPayload.KindPayload,
                            message: Swift.String,
                            details: Swift.String? = nil
                        ) {
                            self.kind = kind
                            self.message = message
                            self.details = details
                        }
                        public enum CodingKeys: String, CodingKey {
                            case kind
                            case message
                            case details
                        }
                        public init(from decoder: any Decoder) throws {
                            let container = try decoder.container(keyedBy: CodingKeys.self)
                            self.kind = try container.decode(
                                Operations.GetLinkedAccountsFiatHoldingAccounts.Output.NotFound.Body.JsonPayload.KindPayload.self,
                                forKey: .kind
                            )
                            self.message = try container.decode(
                                Swift.String.self,
                                forKey: .message
                            )
                            self.details = try container.decodeIfPresent(
                                Swift.String.self,
                                forKey: .details
                            )
                            try decoder.ensureNoAdditionalProperties(knownKeys: [
                                "kind",
                                "message",
                                "details"
                            ])
                        }
                    }
                    /// - Remark: Generated from `#/paths/linked-accounts/fiat-holding-accounts/GET/responses/404/content/application\/json`.
                    case json(Operations.GetLinkedAccountsFiatHoldingAccounts.Output.NotFound.Body.JsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.GetLinkedAccountsFiatHoldingAccounts.Output.NotFound.Body.JsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.GetLinkedAccountsFiatHoldingAccounts.Output.NotFound.Body
                /// Creates a new `NotFound`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                public init(
                    headers: Operations.GetLinkedAccountsFiatHoldingAccounts.Output.NotFound.Headers = .init(),
                    body: Operations.GetLinkedAccountsFiatHoldingAccounts.Output.NotFound.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// FIXME
            ///
            /// - Remark: Generated from `#/paths//linked-accounts/fiat-holding-accounts/get(getLinkedAccountsFiatHoldingAccounts)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Operations.GetLinkedAccountsFiatHoldingAccounts.Output.NotFound)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Operations.GetLinkedAccountsFiatHoldingAccounts.Output.NotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            public struct UnprocessableContent: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/linked-accounts/fiat-holding-accounts/GET/responses/422/headers`.
                public struct Headers: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/linked-accounts/fiat-holding-accounts/GET/responses/422/headers/Content-Type`.
                    @frozen public enum ContentTypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                        case applicationJson = "application/json"
                    }
                    /// - Remark: Generated from `#/paths/linked-accounts/fiat-holding-accounts/GET/responses/422/headers/Content-Type`.
                    public var contentType: Operations.GetLinkedAccountsFiatHoldingAccounts.Output.UnprocessableContent.Headers.ContentTypePayload?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - contentType:
                    public init(contentType: Operations.GetLinkedAccountsFiatHoldingAccounts.Output.UnprocessableContent.Headers.ContentTypePayload? = nil) {
                        self.contentType = contentType
                    }
                }
                /// Received HTTP response headers
                public var headers: Operations.GetLinkedAccountsFiatHoldingAccounts.Output.UnprocessableContent.Headers
                /// - Remark: Generated from `#/paths/linked-accounts/fiat-holding-accounts/GET/responses/422/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/linked-accounts/fiat-holding-accounts/GET/responses/422/content/json`.
                    public struct JsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/linked-accounts/fiat-holding-accounts/GET/responses/422/content/json/kind`.
                        @frozen public enum KindPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case schemaInvalid_request = "schema_invalid.request"
                        }
                        /// - Remark: Generated from `#/paths/linked-accounts/fiat-holding-accounts/GET/responses/422/content/json/kind`.
                        public var kind: Operations.GetLinkedAccountsFiatHoldingAccounts.Output.UnprocessableContent.Body.JsonPayload.KindPayload
                        /// - Remark: Generated from `#/paths/linked-accounts/fiat-holding-accounts/GET/responses/422/content/json/message`.
                        public var message: Swift.String
                        /// - Remark: Generated from `#/paths/linked-accounts/fiat-holding-accounts/GET/responses/422/content/json/details`.
                        public var details: Swift.String?
                        /// Creates a new `JsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - kind:
                        ///   - message:
                        ///   - details:
                        public init(
                            kind: Operations.GetLinkedAccountsFiatHoldingAccounts.Output.UnprocessableContent.Body.JsonPayload.KindPayload,
                            message: Swift.String,
                            details: Swift.String? = nil
                        ) {
                            self.kind = kind
                            self.message = message
                            self.details = details
                        }
                        public enum CodingKeys: String, CodingKey {
                            case kind
                            case message
                            case details
                        }
                        public init(from decoder: any Decoder) throws {
                            let container = try decoder.container(keyedBy: CodingKeys.self)
                            self.kind = try container.decode(
                                Operations.GetLinkedAccountsFiatHoldingAccounts.Output.UnprocessableContent.Body.JsonPayload.KindPayload.self,
                                forKey: .kind
                            )
                            self.message = try container.decode(
                                Swift.String.self,
                                forKey: .message
                            )
                            self.details = try container.decodeIfPresent(
                                Swift.String.self,
                                forKey: .details
                            )
                            try decoder.ensureNoAdditionalProperties(knownKeys: [
                                "kind",
                                "message",
                                "details"
                            ])
                        }
                    }
                    /// - Remark: Generated from `#/paths/linked-accounts/fiat-holding-accounts/GET/responses/422/content/application\/json`.
                    case json(Operations.GetLinkedAccountsFiatHoldingAccounts.Output.UnprocessableContent.Body.JsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.GetLinkedAccountsFiatHoldingAccounts.Output.UnprocessableContent.Body.JsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.GetLinkedAccountsFiatHoldingAccounts.Output.UnprocessableContent.Body
                /// Creates a new `UnprocessableContent`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                public init(
                    headers: Operations.GetLinkedAccountsFiatHoldingAccounts.Output.UnprocessableContent.Headers = .init(),
                    body: Operations.GetLinkedAccountsFiatHoldingAccounts.Output.UnprocessableContent.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// FIXME
            ///
            /// - Remark: Generated from `#/paths//linked-accounts/fiat-holding-accounts/get(getLinkedAccountsFiatHoldingAccounts)/responses/422`.
            ///
            /// HTTP response code: `422 unprocessableContent`.
            case unprocessableContent(Operations.GetLinkedAccountsFiatHoldingAccounts.Output.UnprocessableContent)
            /// The associated value of the enum case if `self` is `.unprocessableContent`.
            ///
            /// - Throws: An error if `self` is not `.unprocessableContent`.
            /// - SeeAlso: `.unprocessableContent`.
            public var unprocessableContent: Operations.GetLinkedAccountsFiatHoldingAccounts.Output.UnprocessableContent {
                get throws {
                    switch self {
                    case let .unprocessableContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unprocessableContent",
                            response: self
                        )
                    }
                }
            }
            public struct InternalServerError: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/linked-accounts/fiat-holding-accounts/GET/responses/500/headers`.
                public struct Headers: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/linked-accounts/fiat-holding-accounts/GET/responses/500/headers/Content-Type`.
                    @frozen public enum ContentTypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                        case applicationJson = "application/json"
                    }
                    /// - Remark: Generated from `#/paths/linked-accounts/fiat-holding-accounts/GET/responses/500/headers/Content-Type`.
                    public var contentType: Operations.GetLinkedAccountsFiatHoldingAccounts.Output.InternalServerError.Headers.ContentTypePayload?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - contentType:
                    public init(contentType: Operations.GetLinkedAccountsFiatHoldingAccounts.Output.InternalServerError.Headers.ContentTypePayload? = nil) {
                        self.contentType = contentType
                    }
                }
                /// Received HTTP response headers
                public var headers: Operations.GetLinkedAccountsFiatHoldingAccounts.Output.InternalServerError.Headers
                /// - Remark: Generated from `#/paths/linked-accounts/fiat-holding-accounts/GET/responses/500/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/linked-accounts/fiat-holding-accounts/GET/responses/500/content/json`.
                    public struct JsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/linked-accounts/fiat-holding-accounts/GET/responses/500/content/json/kind`.
                        @frozen public enum KindPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case unexpected = "unexpected"
                        }
                        /// - Remark: Generated from `#/paths/linked-accounts/fiat-holding-accounts/GET/responses/500/content/json/kind`.
                        public var kind: Operations.GetLinkedAccountsFiatHoldingAccounts.Output.InternalServerError.Body.JsonPayload.KindPayload
                        /// - Remark: Generated from `#/paths/linked-accounts/fiat-holding-accounts/GET/responses/500/content/json/message`.
                        public var message: Swift.String
                        /// - Remark: Generated from `#/paths/linked-accounts/fiat-holding-accounts/GET/responses/500/content/json/details`.
                        public var details: Swift.String?
                        /// Creates a new `JsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - kind:
                        ///   - message:
                        ///   - details:
                        public init(
                            kind: Operations.GetLinkedAccountsFiatHoldingAccounts.Output.InternalServerError.Body.JsonPayload.KindPayload,
                            message: Swift.String,
                            details: Swift.String? = nil
                        ) {
                            self.kind = kind
                            self.message = message
                            self.details = details
                        }
                        public enum CodingKeys: String, CodingKey {
                            case kind
                            case message
                            case details
                        }
                        public init(from decoder: any Decoder) throws {
                            let container = try decoder.container(keyedBy: CodingKeys.self)
                            self.kind = try container.decode(
                                Operations.GetLinkedAccountsFiatHoldingAccounts.Output.InternalServerError.Body.JsonPayload.KindPayload.self,
                                forKey: .kind
                            )
                            self.message = try container.decode(
                                Swift.String.self,
                                forKey: .message
                            )
                            self.details = try container.decodeIfPresent(
                                Swift.String.self,
                                forKey: .details
                            )
                            try decoder.ensureNoAdditionalProperties(knownKeys: [
                                "kind",
                                "message",
                                "details"
                            ])
                        }
                    }
                    /// - Remark: Generated from `#/paths/linked-accounts/fiat-holding-accounts/GET/responses/500/content/application\/json`.
                    case json(Operations.GetLinkedAccountsFiatHoldingAccounts.Output.InternalServerError.Body.JsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.GetLinkedAccountsFiatHoldingAccounts.Output.InternalServerError.Body.JsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.GetLinkedAccountsFiatHoldingAccounts.Output.InternalServerError.Body
                /// Creates a new `InternalServerError`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                public init(
                    headers: Operations.GetLinkedAccountsFiatHoldingAccounts.Output.InternalServerError.Headers = .init(),
                    body: Operations.GetLinkedAccountsFiatHoldingAccounts.Output.InternalServerError.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// FIXME
            ///
            /// - Remark: Generated from `#/paths//linked-accounts/fiat-holding-accounts/get(getLinkedAccountsFiatHoldingAccounts)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Operations.GetLinkedAccountsFiatHoldingAccounts.Output.InternalServerError)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            public var internalServerError: Operations.GetLinkedAccountsFiatHoldingAccounts.Output.InternalServerError {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// - Remark: HTTP `GET /linked-accounts/activity`.
    /// - Remark: Generated from `#/paths//linked-accounts/activity/get(getLinkedAccountsActivity)`.
    public enum GetLinkedAccountsActivity {
        public static let id: Swift.String = "getLinkedAccountsActivity"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/linked-accounts/activity/GET/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/linked-accounts/activity/GET/query/linkedAccountIDs`.
                public var linkedAccountIDs: Swift.String?
                /// - Remark: Generated from `#/paths/linked-accounts/activity/GET/query/assetKind`.
                public var assetKind: Components.Schemas.AssetKind?
                /// - Remark: Generated from `#/paths/linked-accounts/activity/GET/query/span`.
                public var span: Swift.String?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - linkedAccountIDs:
                ///   - assetKind:
                ///   - span:
                public init(
                    linkedAccountIDs: Swift.String? = nil,
                    assetKind: Components.Schemas.AssetKind? = nil,
                    span: Swift.String? = nil
                ) {
                    self.linkedAccountIDs = linkedAccountIDs
                    self.assetKind = assetKind
                    self.span = span
                }
            }
            public var query: Operations.GetLinkedAccountsActivity.Input.Query
            /// - Remark: Generated from `#/paths/linked-accounts/activity/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.GetLinkedAccountsActivity.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.GetLinkedAccountsActivity.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.GetLinkedAccountsActivity.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            public init(
                query: Operations.GetLinkedAccountsActivity.Input.Query = .init(),
                headers: Operations.GetLinkedAccountsActivity.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/linked-accounts/activity/GET/responses/200/headers`.
                public struct Headers: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/linked-accounts/activity/GET/responses/200/headers/Content-Type`.
                    @frozen public enum ContentTypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                        case applicationJson = "application/json"
                    }
                    /// - Remark: Generated from `#/paths/linked-accounts/activity/GET/responses/200/headers/Content-Type`.
                    public var contentType: Operations.GetLinkedAccountsActivity.Output.Ok.Headers.ContentTypePayload?
                    /// - Remark: Generated from `#/paths/linked-accounts/activity/GET/responses/200/headers/Content-Encoding`.
                    @frozen public enum ContentEncodingPayload: String, Codable, Hashable, Sendable, CaseIterable {
                        case gzip = "gzip"
                    }
                    /// - Remark: Generated from `#/paths/linked-accounts/activity/GET/responses/200/headers/Content-Encoding`.
                    public var contentEncoding: Operations.GetLinkedAccountsActivity.Output.Ok.Headers.ContentEncodingPayload?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - contentType:
                    ///   - contentEncoding:
                    public init(
                        contentType: Operations.GetLinkedAccountsActivity.Output.Ok.Headers.ContentTypePayload? = nil,
                        contentEncoding: Operations.GetLinkedAccountsActivity.Output.Ok.Headers.ContentEncodingPayload? = nil
                    ) {
                        self.contentType = contentType
                        self.contentEncoding = contentEncoding
                    }
                }
                /// Received HTTP response headers
                public var headers: Operations.GetLinkedAccountsActivity.Output.Ok.Headers
                /// - Remark: Generated from `#/paths/linked-accounts/activity/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/linked-accounts/activity/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.PortfolioActivityItem])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: [Components.Schemas.PortfolioActivityItem] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.GetLinkedAccountsActivity.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                public init(
                    headers: Operations.GetLinkedAccountsActivity.Output.Ok.Headers = .init(),
                    body: Operations.GetLinkedAccountsActivity.Output.Ok.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// FIXME
            ///
            /// - Remark: Generated from `#/paths//linked-accounts/activity/get(getLinkedAccountsActivity)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.GetLinkedAccountsActivity.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.GetLinkedAccountsActivity.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            public struct Unauthorized: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/linked-accounts/activity/GET/responses/401/headers`.
                public struct Headers: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/linked-accounts/activity/GET/responses/401/headers/Content-Type`.
                    @frozen public enum ContentTypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                        case applicationJson = "application/json"
                    }
                    /// - Remark: Generated from `#/paths/linked-accounts/activity/GET/responses/401/headers/Content-Type`.
                    public var contentType: Operations.GetLinkedAccountsActivity.Output.Unauthorized.Headers.ContentTypePayload?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - contentType:
                    public init(contentType: Operations.GetLinkedAccountsActivity.Output.Unauthorized.Headers.ContentTypePayload? = nil) {
                        self.contentType = contentType
                    }
                }
                /// Received HTTP response headers
                public var headers: Operations.GetLinkedAccountsActivity.Output.Unauthorized.Headers
                /// - Remark: Generated from `#/paths/linked-accounts/activity/GET/responses/401/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/linked-accounts/activity/GET/responses/401/content/json`.
                    public struct JsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/linked-accounts/activity/GET/responses/401/content/json/kind`.
                        @frozen public enum KindPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case badAuthorization_user = "bad_authorization.user"
                        }
                        /// - Remark: Generated from `#/paths/linked-accounts/activity/GET/responses/401/content/json/kind`.
                        public var kind: Operations.GetLinkedAccountsActivity.Output.Unauthorized.Body.JsonPayload.KindPayload
                        /// - Remark: Generated from `#/paths/linked-accounts/activity/GET/responses/401/content/json/message`.
                        public var message: Swift.String
                        /// - Remark: Generated from `#/paths/linked-accounts/activity/GET/responses/401/content/json/details`.
                        public var details: Swift.String?
                        /// Creates a new `JsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - kind:
                        ///   - message:
                        ///   - details:
                        public init(
                            kind: Operations.GetLinkedAccountsActivity.Output.Unauthorized.Body.JsonPayload.KindPayload,
                            message: Swift.String,
                            details: Swift.String? = nil
                        ) {
                            self.kind = kind
                            self.message = message
                            self.details = details
                        }
                        public enum CodingKeys: String, CodingKey {
                            case kind
                            case message
                            case details
                        }
                        public init(from decoder: any Decoder) throws {
                            let container = try decoder.container(keyedBy: CodingKeys.self)
                            self.kind = try container.decode(
                                Operations.GetLinkedAccountsActivity.Output.Unauthorized.Body.JsonPayload.KindPayload.self,
                                forKey: .kind
                            )
                            self.message = try container.decode(
                                Swift.String.self,
                                forKey: .message
                            )
                            self.details = try container.decodeIfPresent(
                                Swift.String.self,
                                forKey: .details
                            )
                            try decoder.ensureNoAdditionalProperties(knownKeys: [
                                "kind",
                                "message",
                                "details"
                            ])
                        }
                    }
                    /// - Remark: Generated from `#/paths/linked-accounts/activity/GET/responses/401/content/application\/json`.
                    case json(Operations.GetLinkedAccountsActivity.Output.Unauthorized.Body.JsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.GetLinkedAccountsActivity.Output.Unauthorized.Body.JsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.GetLinkedAccountsActivity.Output.Unauthorized.Body
                /// Creates a new `Unauthorized`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                public init(
                    headers: Operations.GetLinkedAccountsActivity.Output.Unauthorized.Headers = .init(),
                    body: Operations.GetLinkedAccountsActivity.Output.Unauthorized.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// FIXME
            ///
            /// - Remark: Generated from `#/paths//linked-accounts/activity/get(getLinkedAccountsActivity)/responses/401`.
            ///
            /// HTTP response code: `401 unauthorized`.
            case unauthorized(Operations.GetLinkedAccountsActivity.Output.Unauthorized)
            /// The associated value of the enum case if `self` is `.unauthorized`.
            ///
            /// - Throws: An error if `self` is not `.unauthorized`.
            /// - SeeAlso: `.unauthorized`.
            public var unauthorized: Operations.GetLinkedAccountsActivity.Output.Unauthorized {
                get throws {
                    switch self {
                    case let .unauthorized(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unauthorized",
                            response: self
                        )
                    }
                }
            }
            public struct NotFound: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/linked-accounts/activity/GET/responses/404/headers`.
                public struct Headers: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/linked-accounts/activity/GET/responses/404/headers/Content-Type`.
                    @frozen public enum ContentTypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                        case applicationJson = "application/json"
                    }
                    /// - Remark: Generated from `#/paths/linked-accounts/activity/GET/responses/404/headers/Content-Type`.
                    public var contentType: Operations.GetLinkedAccountsActivity.Output.NotFound.Headers.ContentTypePayload?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - contentType:
                    public init(contentType: Operations.GetLinkedAccountsActivity.Output.NotFound.Headers.ContentTypePayload? = nil) {
                        self.contentType = contentType
                    }
                }
                /// Received HTTP response headers
                public var headers: Operations.GetLinkedAccountsActivity.Output.NotFound.Headers
                /// - Remark: Generated from `#/paths/linked-accounts/activity/GET/responses/404/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/linked-accounts/activity/GET/responses/404/content/json`.
                    public struct JsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/linked-accounts/activity/GET/responses/404/content/json/kind`.
                        @frozen public enum KindPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case notFound_user = "not_found.user"
                        }
                        /// - Remark: Generated from `#/paths/linked-accounts/activity/GET/responses/404/content/json/kind`.
                        public var kind: Operations.GetLinkedAccountsActivity.Output.NotFound.Body.JsonPayload.KindPayload
                        /// - Remark: Generated from `#/paths/linked-accounts/activity/GET/responses/404/content/json/message`.
                        public var message: Swift.String
                        /// - Remark: Generated from `#/paths/linked-accounts/activity/GET/responses/404/content/json/details`.
                        public var details: Swift.String?
                        /// Creates a new `JsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - kind:
                        ///   - message:
                        ///   - details:
                        public init(
                            kind: Operations.GetLinkedAccountsActivity.Output.NotFound.Body.JsonPayload.KindPayload,
                            message: Swift.String,
                            details: Swift.String? = nil
                        ) {
                            self.kind = kind
                            self.message = message
                            self.details = details
                        }
                        public enum CodingKeys: String, CodingKey {
                            case kind
                            case message
                            case details
                        }
                        public init(from decoder: any Decoder) throws {
                            let container = try decoder.container(keyedBy: CodingKeys.self)
                            self.kind = try container.decode(
                                Operations.GetLinkedAccountsActivity.Output.NotFound.Body.JsonPayload.KindPayload.self,
                                forKey: .kind
                            )
                            self.message = try container.decode(
                                Swift.String.self,
                                forKey: .message
                            )
                            self.details = try container.decodeIfPresent(
                                Swift.String.self,
                                forKey: .details
                            )
                            try decoder.ensureNoAdditionalProperties(knownKeys: [
                                "kind",
                                "message",
                                "details"
                            ])
                        }
                    }
                    /// - Remark: Generated from `#/paths/linked-accounts/activity/GET/responses/404/content/application\/json`.
                    case json(Operations.GetLinkedAccountsActivity.Output.NotFound.Body.JsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.GetLinkedAccountsActivity.Output.NotFound.Body.JsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.GetLinkedAccountsActivity.Output.NotFound.Body
                /// Creates a new `NotFound`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                public init(
                    headers: Operations.GetLinkedAccountsActivity.Output.NotFound.Headers = .init(),
                    body: Operations.GetLinkedAccountsActivity.Output.NotFound.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// FIXME
            ///
            /// - Remark: Generated from `#/paths//linked-accounts/activity/get(getLinkedAccountsActivity)/responses/404`.
            ///
            /// HTTP response code: `404 notFound`.
            case notFound(Operations.GetLinkedAccountsActivity.Output.NotFound)
            /// The associated value of the enum case if `self` is `.notFound`.
            ///
            /// - Throws: An error if `self` is not `.notFound`.
            /// - SeeAlso: `.notFound`.
            public var notFound: Operations.GetLinkedAccountsActivity.Output.NotFound {
                get throws {
                    switch self {
                    case let .notFound(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "notFound",
                            response: self
                        )
                    }
                }
            }
            public struct UnprocessableContent: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/linked-accounts/activity/GET/responses/422/headers`.
                public struct Headers: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/linked-accounts/activity/GET/responses/422/headers/Content-Type`.
                    @frozen public enum ContentTypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                        case applicationJson = "application/json"
                    }
                    /// - Remark: Generated from `#/paths/linked-accounts/activity/GET/responses/422/headers/Content-Type`.
                    public var contentType: Operations.GetLinkedAccountsActivity.Output.UnprocessableContent.Headers.ContentTypePayload?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - contentType:
                    public init(contentType: Operations.GetLinkedAccountsActivity.Output.UnprocessableContent.Headers.ContentTypePayload? = nil) {
                        self.contentType = contentType
                    }
                }
                /// Received HTTP response headers
                public var headers: Operations.GetLinkedAccountsActivity.Output.UnprocessableContent.Headers
                /// - Remark: Generated from `#/paths/linked-accounts/activity/GET/responses/422/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/linked-accounts/activity/GET/responses/422/content/json`.
                    public struct JsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/linked-accounts/activity/GET/responses/422/content/json/kind`.
                        @frozen public enum KindPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case schemaInvalid_request = "schema_invalid.request"
                        }
                        /// - Remark: Generated from `#/paths/linked-accounts/activity/GET/responses/422/content/json/kind`.
                        public var kind: Operations.GetLinkedAccountsActivity.Output.UnprocessableContent.Body.JsonPayload.KindPayload
                        /// - Remark: Generated from `#/paths/linked-accounts/activity/GET/responses/422/content/json/message`.
                        public var message: Swift.String
                        /// - Remark: Generated from `#/paths/linked-accounts/activity/GET/responses/422/content/json/details`.
                        public var details: Swift.String?
                        /// Creates a new `JsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - kind:
                        ///   - message:
                        ///   - details:
                        public init(
                            kind: Operations.GetLinkedAccountsActivity.Output.UnprocessableContent.Body.JsonPayload.KindPayload,
                            message: Swift.String,
                            details: Swift.String? = nil
                        ) {
                            self.kind = kind
                            self.message = message
                            self.details = details
                        }
                        public enum CodingKeys: String, CodingKey {
                            case kind
                            case message
                            case details
                        }
                        public init(from decoder: any Decoder) throws {
                            let container = try decoder.container(keyedBy: CodingKeys.self)
                            self.kind = try container.decode(
                                Operations.GetLinkedAccountsActivity.Output.UnprocessableContent.Body.JsonPayload.KindPayload.self,
                                forKey: .kind
                            )
                            self.message = try container.decode(
                                Swift.String.self,
                                forKey: .message
                            )
                            self.details = try container.decodeIfPresent(
                                Swift.String.self,
                                forKey: .details
                            )
                            try decoder.ensureNoAdditionalProperties(knownKeys: [
                                "kind",
                                "message",
                                "details"
                            ])
                        }
                    }
                    /// - Remark: Generated from `#/paths/linked-accounts/activity/GET/responses/422/content/application\/json`.
                    case json(Operations.GetLinkedAccountsActivity.Output.UnprocessableContent.Body.JsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.GetLinkedAccountsActivity.Output.UnprocessableContent.Body.JsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.GetLinkedAccountsActivity.Output.UnprocessableContent.Body
                /// Creates a new `UnprocessableContent`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                public init(
                    headers: Operations.GetLinkedAccountsActivity.Output.UnprocessableContent.Headers = .init(),
                    body: Operations.GetLinkedAccountsActivity.Output.UnprocessableContent.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// FIXME
            ///
            /// - Remark: Generated from `#/paths//linked-accounts/activity/get(getLinkedAccountsActivity)/responses/422`.
            ///
            /// HTTP response code: `422 unprocessableContent`.
            case unprocessableContent(Operations.GetLinkedAccountsActivity.Output.UnprocessableContent)
            /// The associated value of the enum case if `self` is `.unprocessableContent`.
            ///
            /// - Throws: An error if `self` is not `.unprocessableContent`.
            /// - SeeAlso: `.unprocessableContent`.
            public var unprocessableContent: Operations.GetLinkedAccountsActivity.Output.UnprocessableContent {
                get throws {
                    switch self {
                    case let .unprocessableContent(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "unprocessableContent",
                            response: self
                        )
                    }
                }
            }
            public struct InternalServerError: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/linked-accounts/activity/GET/responses/500/headers`.
                public struct Headers: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/linked-accounts/activity/GET/responses/500/headers/Content-Type`.
                    @frozen public enum ContentTypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                        case applicationJson = "application/json"
                    }
                    /// - Remark: Generated from `#/paths/linked-accounts/activity/GET/responses/500/headers/Content-Type`.
                    public var contentType: Operations.GetLinkedAccountsActivity.Output.InternalServerError.Headers.ContentTypePayload?
                    /// Creates a new `Headers`.
                    ///
                    /// - Parameters:
                    ///   - contentType:
                    public init(contentType: Operations.GetLinkedAccountsActivity.Output.InternalServerError.Headers.ContentTypePayload? = nil) {
                        self.contentType = contentType
                    }
                }
                /// Received HTTP response headers
                public var headers: Operations.GetLinkedAccountsActivity.Output.InternalServerError.Headers
                /// - Remark: Generated from `#/paths/linked-accounts/activity/GET/responses/500/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/linked-accounts/activity/GET/responses/500/content/json`.
                    public struct JsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/linked-accounts/activity/GET/responses/500/content/json/kind`.
                        @frozen public enum KindPayload: String, Codable, Hashable, Sendable, CaseIterable {
                            case unexpected = "unexpected"
                        }
                        /// - Remark: Generated from `#/paths/linked-accounts/activity/GET/responses/500/content/json/kind`.
                        public var kind: Operations.GetLinkedAccountsActivity.Output.InternalServerError.Body.JsonPayload.KindPayload
                        /// - Remark: Generated from `#/paths/linked-accounts/activity/GET/responses/500/content/json/message`.
                        public var message: Swift.String
                        /// - Remark: Generated from `#/paths/linked-accounts/activity/GET/responses/500/content/json/details`.
                        public var details: Swift.String?
                        /// Creates a new `JsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - kind:
                        ///   - message:
                        ///   - details:
                        public init(
                            kind: Operations.GetLinkedAccountsActivity.Output.InternalServerError.Body.JsonPayload.KindPayload,
                            message: Swift.String,
                            details: Swift.String? = nil
                        ) {
                            self.kind = kind
                            self.message = message
                            self.details = details
                        }
                        public enum CodingKeys: String, CodingKey {
                            case kind
                            case message
                            case details
                        }
                        public init(from decoder: any Decoder) throws {
                            let container = try decoder.container(keyedBy: CodingKeys.self)
                            self.kind = try container.decode(
                                Operations.GetLinkedAccountsActivity.Output.InternalServerError.Body.JsonPayload.KindPayload.self,
                                forKey: .kind
                            )
                            self.message = try container.decode(
                                Swift.String.self,
                                forKey: .message
                            )
                            self.details = try container.decodeIfPresent(
                                Swift.String.self,
                                forKey: .details
                            )
                            try decoder.ensureNoAdditionalProperties(knownKeys: [
                                "kind",
                                "message",
                                "details"
                            ])
                        }
                    }
                    /// - Remark: Generated from `#/paths/linked-accounts/activity/GET/responses/500/content/application\/json`.
                    case json(Operations.GetLinkedAccountsActivity.Output.InternalServerError.Body.JsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.GetLinkedAccountsActivity.Output.InternalServerError.Body.JsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.GetLinkedAccountsActivity.Output.InternalServerError.Body
                /// Creates a new `InternalServerError`.
                ///
                /// - Parameters:
                ///   - headers: Received HTTP response headers
                ///   - body: Received HTTP response body
                public init(
                    headers: Operations.GetLinkedAccountsActivity.Output.InternalServerError.Headers = .init(),
                    body: Operations.GetLinkedAccountsActivity.Output.InternalServerError.Body
                ) {
                    self.headers = headers
                    self.body = body
                }
            }
            /// FIXME
            ///
            /// - Remark: Generated from `#/paths//linked-accounts/activity/get(getLinkedAccountsActivity)/responses/500`.
            ///
            /// HTTP response code: `500 internalServerError`.
            case internalServerError(Operations.GetLinkedAccountsActivity.Output.InternalServerError)
            /// The associated value of the enum case if `self` is `.internalServerError`.
            ///
            /// - Throws: An error if `self` is not `.internalServerError`.
            /// - SeeAlso: `.internalServerError`.
            public var internalServerError: Operations.GetLinkedAccountsActivity.Output.InternalServerError {
                get throws {
                    switch self {
                    case let .internalServerError(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "internalServerError",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
}
