// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.0.3 (swiftlang-6.0.3.1.10 clang-1600.0.30.1)
// swift-module-flags: -target x86_64-apple-ios16.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 6 -enforce-exclusivity=checked -O -module-name Candle -package-name sdk_swift
// swift-module-flags-ignorable: -no-verify-emitted-module-interface
import Combine
import CoreGraphics
import CryptoKit
import FinanceKit
import Foundation
import Foundation/*.Data*/
import Foundation/*.Date*/
import Foundation/*.URL*/
import HTTPTypes
import OpenAPIRuntime
import OpenAPIURLSession
import SafariServices
import Swift
import SwiftSecurity
import SwiftUI
import UIKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
@available(macOS 14, iOS 17.0, *)
@_Concurrency.MainActor public class CandleClient {
  @_Concurrency.MainActor public init(appUser: Candle.Models.AppUser)
  #if compiler(>=5.3) && $TypedThrows
  @_Concurrency.MainActor public func deleteUser() async throws(Candle.Models.DeleteUser.Error)
  #endif
  #if compiler(>=5.3) && $TypedThrows
  @_Concurrency.MainActor public func linkAccount(request: Candle.Models.LinkRequest) async throws(Candle.Models.LinkAccount.Error) -> Candle.Models.LinkAccount.Result
  #endif
  #if compiler(>=5.3) && $TypedThrows
  @_Concurrency.MainActor public func unlinkAccount(linkedAccountID: Candle.Models.LinkedAccountID) async throws(Candle.Models.UnlinkAccount.Error)
  #endif
  #if compiler(>=5.3) && $TypedThrows
  @_Concurrency.MainActor public func getLinkedAccounts() async throws(Candle.Models.GetLinkedAccounts.Error) -> [Candle.Models.LinkedAccount]
  #endif
  #if compiler(>=5.3) && $TypedThrows
  @_Concurrency.MainActor public func getFiatAccounts(query: Candle.Models.GetFiatAccounts.Input.Query = .init()) async throws(Candle.Models.GetFiatAccounts.Error) -> [Candle.Models.PrimaryFiatHoldingAccount]
  #endif
  #if compiler(>=5.3) && $TypedThrows
  @_Concurrency.MainActor public func getActivity(query: Candle.Models.GetActivity.Input.Query = .init()) async throws(Candle.Models.GetActivity.Error) -> [Candle.Models.PortfolioActivityItem]
  #endif
  @_Concurrency.MainActor public func getAvailableTools() -> [[Swift.String : Any]]
  @_Concurrency.MainActor public func executeTool(tool: any Candle.ToolCallRequest) async -> Swift.String
  @objc deinit
}
@available(macOS 14, iOS 17.0, *)
extension Candle.CandleClient : Observation.Observable {
}
public typealias Models = Candle.Components.Schemas
extension Candle.Components.Schemas {
  public typealias CreateUser = Candle.Operations.PostUsers
  public typealias UpdateUser = Candle.Operations.PutUsers
  public typealias DeleteUser = Candle.Operations.DeleteUsers
  public typealias LinkAccount = Candle.Operations.PostLinkedAccounts
  public typealias UnlinkAccount = Candle.Operations.DeleteLinkedAccount
  public typealias GetLinkedAccounts = Candle.Operations.GetLinkedAccounts
  public typealias GetFiatAccounts = Candle.Operations.GetLinkedAccountsFiatAccounts
  public typealias GetActivity = Candle.Operations.GetLinkedAccountsActivity
  public enum SessionError : Swift.Error, Swift.Equatable, Swift.Codable {
    case openSessionError
    case keychainError
    case createUserError(Candle.Models.CreateUser.Error)
    case updateUserError(Candle.Models.UpdateUser.Error)
    public static func == (a: Candle.Components.Schemas.SessionError, b: Candle.Components.Schemas.SessionError) -> Swift.Bool
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
}
extension Candle.Components.Schemas.PrimaryFiatHoldingAccount : Swift.Identifiable {
  public var id: Swift.String {
    get
  }
  public typealias ID = Swift.String
}
extension Candle.Components.Schemas.PortfolioActivityItem : Swift.Identifiable {
  public var id: Swift.String {
    get
  }
  public typealias ID = Swift.String
}
extension Candle.Components.Schemas.TransactionActivityItem : Swift.Identifiable {
  public var id: Swift.String {
    get
  }
  public typealias ID = Swift.String
}
extension Candle.Components.Schemas.OrderActivityItem : Swift.Identifiable {
  public var id: Swift.String {
    get
  }
  public typealias ID = Swift.String
}
extension Candle.Components.Schemas.LinkedAccount : Swift.Identifiable {
  public var id: Swift.String {
    get
  }
  public typealias ID = Swift.String
}
extension Candle.Operations.PostUsers {
  public enum Error : Swift.Error, Swift.Equatable, Swift.Codable {
    case networkError(Swift.String)
    case unexpectedStatusCode(Swift.Int)
    case missingAuthorizationToken
    case keychainError
    case unauthorized(Candle.Operations.PostUsers.Output.Unauthorized.Body.JsonPayload)
    case forbidden(Candle.Operations.PostUsers.Output.Forbidden.Body.JsonPayload)
    case notFound(Candle.Operations.PostUsers.Output.NotFound.Body.JsonPayload)
    case unprocessableContent(Candle.Operations.PostUsers.Output.UnprocessableContent.Body.JsonPayload)
    case tooManyRequests(Candle.Operations.PostUsers.Output.TooManyRequests.Body.JsonPayload)
    case internalServerError(Candle.Operations.PostUsers.Output.InternalServerError.Body.JsonPayload)
    public static func == (a: Candle.Operations.PostUsers.Error, b: Candle.Operations.PostUsers.Error) -> Swift.Bool
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
}
extension Candle.Operations.PutUsers {
  public enum Error : Swift.Error, Swift.Equatable, Swift.Codable {
    case networkError(Swift.String)
    case unexpectedStatusCode(Swift.Int)
    case unauthorized(Candle.Operations.PutUsers.Output.Unauthorized.Body.JsonPayload)
    case forbidden(Candle.Operations.PutUsers.Output.Forbidden.Body.JsonPayload)
    case notFound(Candle.Operations.PutUsers.Output.NotFound.Body.JsonPayload)
    case conflict(Candle.Operations.PutUsers.Output.Conflict.Body.JsonPayload)
    case unprocessableContent(Candle.Operations.PutUsers.Output.UnprocessableContent.Body.JsonPayload)
    case internalServerError(Candle.Operations.PutUsers.Output.InternalServerError.Body.JsonPayload)
    public static func == (a: Candle.Operations.PutUsers.Error, b: Candle.Operations.PutUsers.Error) -> Swift.Bool
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
}
extension Candle.Operations.DeleteUsers {
  public enum Error : Swift.Error, Swift.Equatable, Swift.Codable {
    case networkError(Swift.String)
    case unexpectedStatusCode(Swift.Int)
    case sessionError(Candle.Models.SessionError)
    case unauthorized(Candle.Operations.DeleteUsers.Output.Unauthorized.Body.JsonPayload)
    case forbidden(Candle.Operations.DeleteUsers.Output.Forbidden.Body.JsonPayload)
    case notFound(Candle.Operations.DeleteUsers.Output.NotFound.Body.JsonPayload)
    case unprocessableContent(Candle.Operations.DeleteUsers.Output.UnprocessableContent.Body.JsonPayload)
    case internalServerError(Candle.Operations.DeleteUsers.Output.InternalServerError.Body.JsonPayload)
    public static func == (a: Candle.Operations.DeleteUsers.Error, b: Candle.Operations.DeleteUsers.Error) -> Swift.Bool
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
}
extension Candle.Operations.PostLinkedAccounts {
  public enum Result : Swift.Sendable, Swift.Equatable {
    case linked(Candle.Models.LinkedAccount)
    case mfaRequired(Candle.Models.MFARequest)
    public static func == (a: Candle.Operations.PostLinkedAccounts.Result, b: Candle.Operations.PostLinkedAccounts.Result) -> Swift.Bool
  }
  public enum Error : Swift.Error, Swift.Equatable, Swift.Codable {
    case networkError(Swift.String)
    case unexpectedStatusCode(Swift.Int)
    case sessionError(Candle.Models.SessionError)
    case unauthorized(Candle.Operations.PostLinkedAccounts.Output.Unauthorized.Body.JsonPayload)
    case notFound(Candle.Operations.PostLinkedAccounts.Output.NotFound.Body.JsonPayload)
    case conflict(Candle.Operations.PostLinkedAccounts.Output.Conflict.Body.JsonPayload)
    case unprocessableContent(Candle.Operations.PostLinkedAccounts.Output.UnprocessableContent.Body.JsonPayload)
    case internalServerError(Candle.Operations.PostLinkedAccounts.Output.InternalServerError.Body.JsonPayload)
    public static func == (a: Candle.Operations.PostLinkedAccounts.Error, b: Candle.Operations.PostLinkedAccounts.Error) -> Swift.Bool
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
}
extension Candle.Operations.DeleteLinkedAccount {
  public enum Error : Swift.Error, Swift.Equatable, Swift.Codable {
    case networkError(Swift.String)
    case unexpectedStatusCode(Swift.Int)
    case sessionError(Candle.Models.SessionError)
    case unauthorized(Candle.Operations.DeleteLinkedAccount.Output.Unauthorized.Body.JsonPayload)
    case notFound(Candle.Operations.DeleteLinkedAccount.Output.NotFound.Body.JsonPayload)
    case conflict(Candle.Operations.DeleteLinkedAccount.Output.Conflict.Body.JsonPayload)
    case unprocessableContent(Candle.Operations.DeleteLinkedAccount.Output.UnprocessableContent.Body.JsonPayload)
    case internalServerError(Candle.Operations.DeleteLinkedAccount.Output.InternalServerError.Body.JsonPayload)
    public static func == (a: Candle.Operations.DeleteLinkedAccount.Error, b: Candle.Operations.DeleteLinkedAccount.Error) -> Swift.Bool
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
}
extension Candle.Operations.GetLinkedAccounts {
  public enum Error : Swift.Error, Swift.Equatable, Swift.Codable {
    case networkError(Swift.String)
    case unexpectedStatusCode(Swift.Int)
    case sessionError(Candle.Models.SessionError)
    case unauthorized(Candle.Operations.GetLinkedAccounts.Output.Unauthorized.Body.JsonPayload)
    case notFound(Candle.Operations.GetLinkedAccounts.Output.NotFound.Body.JsonPayload)
    case unprocessableContent(Candle.Operations.GetLinkedAccounts.Output.UnprocessableContent.Body.JsonPayload)
    case internalServerError(Candle.Operations.GetLinkedAccounts.Output.InternalServerError.Body.JsonPayload)
    public static func == (a: Candle.Operations.GetLinkedAccounts.Error, b: Candle.Operations.GetLinkedAccounts.Error) -> Swift.Bool
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
}
extension Candle.Operations.GetLinkedAccountsFiatAccounts {
  public enum Error : Swift.Error, Swift.Equatable, Swift.Codable {
    case networkError(Swift.String)
    case unexpectedStatusCode(Swift.Int)
    case sessionError(Candle.Models.SessionError)
    case unauthorized(Candle.Operations.GetLinkedAccountsFiatAccounts.Output.Unauthorized.Body.JsonPayload)
    case notFound(Candle.Operations.GetLinkedAccountsFiatAccounts.Output.NotFound.Body.JsonPayload)
    case unprocessableContent(Candle.Operations.GetLinkedAccountsFiatAccounts.Output.UnprocessableContent.Body.JsonPayload)
    case internalServerError(Candle.Operations.GetLinkedAccountsFiatAccounts.Output.InternalServerError.Body.JsonPayload)
    public static func == (a: Candle.Operations.GetLinkedAccountsFiatAccounts.Error, b: Candle.Operations.GetLinkedAccountsFiatAccounts.Error) -> Swift.Bool
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
}
extension Candle.Operations.GetLinkedAccountsActivity {
  public enum Error : Swift.Error, Swift.Equatable, Swift.Codable {
    case networkError(Swift.String)
    case unexpectedStatusCode(Swift.Int)
    case sessionError(Candle.Models.SessionError)
    case unauthorized(Candle.Operations.GetLinkedAccountsActivity.Output.Unauthorized.Body.JsonPayload)
    case notFound(Candle.Operations.GetLinkedAccountsActivity.Output.NotFound.Body.JsonPayload)
    case unprocessableContent(Candle.Operations.GetLinkedAccountsActivity.Output.UnprocessableContent.Body.JsonPayload)
    case internalServerError(Candle.Operations.GetLinkedAccountsActivity.Output.InternalServerError.Body.JsonPayload)
    public static func == (a: Candle.Operations.GetLinkedAccountsActivity.Error, b: Candle.Operations.GetLinkedAccountsActivity.Error) -> Swift.Bool
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
}
extension Candle.Components.Schemas.ServiceCredentialsRequest {
  public init(credentials: Candle.Models.ServiceCredentials)
}
extension Candle.Components.Schemas.MFAResponseRequest {
  public init(response: Candle.Models.MFAResponse)
}
extension Candle.Components.Schemas.DemoServiceCredentials {
  public init(emailAddress: Candle.Models.EmailAddress)
}
extension Candle.Components.Schemas.RobinhoodServiceCredentials {
  public init(emailAddress: Candle.Models.EmailAddress, password: Candle.Models.Password)
}
extension Candle.Components.Schemas.CashAppServiceCredentials {
  public init(username: Candle.Models.CashAppServiceCredentials.UsernamePayload, pin: Candle.Models.Pin)
}
extension Candle.Components.Schemas.VenmoServiceCredentials {
  public init(username: Candle.Models.VenmoServiceCredentials.UsernamePayload, password: Candle.Models.Password)
}
extension Candle.Components.Schemas.AppleServiceCredentials {
  public init()
}
extension Candle.Components.Schemas.MFACodeResponse {
  public init(code: Candle.Models.MFACode, mfaContext: Candle.Models.MFACodeContext)
}
extension Candle.Components.Schemas.MFALinkResponse {
  public init(link: Candle.Models.MFALink, mfaContext: Candle.Models.MFALinkContext)
}
extension Candle.Components.Schemas.ActiveLinkedAccountDetails {
  public init(accountOpened: Swift.String, username: Swift.String, emailAddress: Swift.String, legalName: Swift.String)
}
extension Candle.Components.Schemas.InactiveLinkedAccountDetails {
  public init()
}
extension Candle.Components.Schemas.SupportedService {
  public var logoURL: Foundation.URL? {
    get
  }
  public var name: Swift.String {
    get
  }
  public var tint: SwiftUICore.Color {
    get
  }
}
extension Candle.Components.Schemas.Service {
  public var logoURL: Foundation.URL? {
    get
  }
  public var name: Swift.String {
    get
  }
}
public protocol APIProtocol : Swift.Sendable {
  func postUsers(_ input: Candle.Operations.PostUsers.Input) async throws -> Candle.Operations.PostUsers.Output
  func putUsers(_ input: Candle.Operations.PutUsers.Input) async throws -> Candle.Operations.PutUsers.Output
  func deleteUsers(_ input: Candle.Operations.DeleteUsers.Input) async throws -> Candle.Operations.DeleteUsers.Output
  func getLinkedAccounts(_ input: Candle.Operations.GetLinkedAccounts.Input) async throws -> Candle.Operations.GetLinkedAccounts.Output
  func postLinkedAccounts(_ input: Candle.Operations.PostLinkedAccounts.Input) async throws -> Candle.Operations.PostLinkedAccounts.Output
  func deleteLinkedAccount(_ input: Candle.Operations.DeleteLinkedAccount.Input) async throws -> Candle.Operations.DeleteLinkedAccount.Output
  func getLinkedAccountsFiatAccounts(_ input: Candle.Operations.GetLinkedAccountsFiatAccounts.Input) async throws -> Candle.Operations.GetLinkedAccountsFiatAccounts.Output
  func getLinkedAccountsActivity(_ input: Candle.Operations.GetLinkedAccountsActivity.Input) async throws -> Candle.Operations.GetLinkedAccountsActivity.Output
}
extension Candle.APIProtocol {
  public func postUsers(headers: Candle.Operations.PostUsers.Input.Headers, body: Candle.Operations.PostUsers.Input.Body) async throws -> Candle.Operations.PostUsers.Output
  public func putUsers(headers: Candle.Operations.PutUsers.Input.Headers = .init(), body: Candle.Operations.PutUsers.Input.Body) async throws -> Candle.Operations.PutUsers.Output
  public func deleteUsers(headers: Candle.Operations.DeleteUsers.Input.Headers = .init(), body: Candle.Operations.DeleteUsers.Input.Body) async throws -> Candle.Operations.DeleteUsers.Output
  public func getLinkedAccounts(headers: Candle.Operations.GetLinkedAccounts.Input.Headers = .init()) async throws -> Candle.Operations.GetLinkedAccounts.Output
  public func postLinkedAccounts(headers: Candle.Operations.PostLinkedAccounts.Input.Headers = .init(), body: Candle.Operations.PostLinkedAccounts.Input.Body) async throws -> Candle.Operations.PostLinkedAccounts.Output
  public func deleteLinkedAccount(path: Candle.Operations.DeleteLinkedAccount.Input.Path, headers: Candle.Operations.DeleteLinkedAccount.Input.Headers = .init()) async throws -> Candle.Operations.DeleteLinkedAccount.Output
  public func getLinkedAccountsFiatAccounts(query: Candle.Operations.GetLinkedAccountsFiatAccounts.Input.Query = .init(), headers: Candle.Operations.GetLinkedAccountsFiatAccounts.Input.Headers = .init()) async throws -> Candle.Operations.GetLinkedAccountsFiatAccounts.Output
  public func getLinkedAccountsActivity(query: Candle.Operations.GetLinkedAccountsActivity.Input.Query = .init(), headers: Candle.Operations.GetLinkedAccountsActivity.Input.Headers = .init()) async throws -> Candle.Operations.GetLinkedAccountsActivity.Output
}
public enum Servers {
}
public enum Components {
  public enum Schemas {
    public struct AppUser : Swift.Codable, Swift.Hashable, Swift.Sendable {
      public var appKey: Candle.Components.Schemas.AppID
      public var appSecret: Candle.Components.Schemas.AppAuthorizationToken
      public var appUserID: Candle.Components.Schemas.AppUserID?
      public init(appKey: Candle.Components.Schemas.AppID, appSecret: Candle.Components.Schemas.AppAuthorizationToken, appUserID: Candle.Components.Schemas.AppUserID? = nil)
      public enum CodingKeys : Swift.String, Swift.CodingKey {
        case appKey
        case appSecret
        case appUserID
        public init?(rawValue: Swift.String)
        public init?(stringValue: Swift.String)
        public init?(intValue: Swift.Int)
        public typealias RawValue = Swift.String
        public var intValue: Swift.Int? {
          get
        }
        public var rawValue: Swift.String {
          get
        }
        public var stringValue: Swift.String {
          get
        }
      }
      public init(from decoder: any Swift.Decoder) throws
      public func hash(into hasher: inout Swift.Hasher)
      public static func == (a: Candle.Components.Schemas.AppUser, b: Candle.Components.Schemas.AppUser) -> Swift.Bool
      public func encode(to encoder: any Swift.Encoder) throws
      public var hashValue: Swift.Int {
        get
      }
    }
    public typealias AppID = Swift.String
    public typealias AppAuthorizationToken = Swift.String
    public typealias AppUserID = Swift.String
    public struct LinkedAccount : Swift.Codable, Swift.Hashable, Swift.Sendable {
      public var linkedAccountID: Candle.Components.Schemas.LinkedAccountID
      public var service: Candle.Components.Schemas.SupportedService
      public var serviceUserID: Candle.Components.Schemas.ServiceUserID
      public var details: Candle.Components.Schemas.LinkedAccountDetails
      public init(linkedAccountID: Candle.Components.Schemas.LinkedAccountID, service: Candle.Components.Schemas.SupportedService, serviceUserID: Candle.Components.Schemas.ServiceUserID, details: Candle.Components.Schemas.LinkedAccountDetails)
      public enum CodingKeys : Swift.String, Swift.CodingKey {
        case linkedAccountID
        case service
        case serviceUserID
        case details
        public init?(rawValue: Swift.String)
        public init?(stringValue: Swift.String)
        public init?(intValue: Swift.Int)
        public typealias RawValue = Swift.String
        public var intValue: Swift.Int? {
          get
        }
        public var rawValue: Swift.String {
          get
        }
        public var stringValue: Swift.String {
          get
        }
      }
      public init(from decoder: any Swift.Decoder) throws
      public func hash(into hasher: inout Swift.Hasher)
      public static func == (a: Candle.Components.Schemas.LinkedAccount, b: Candle.Components.Schemas.LinkedAccount) -> Swift.Bool
      public func encode(to encoder: any Swift.Encoder) throws
      public var hashValue: Swift.Int {
        get
      }
    }
    public typealias LinkedAccountID = Swift.String
    @frozen public enum SupportedService : Swift.String, Swift.Codable, Swift.Hashable, Swift.Sendable, Swift.CaseIterable {
      case demo
      case robinhood
      case cashApp
      case apple
      case venmo
      public init?(rawValue: Swift.String)
      public typealias AllCases = [Candle.Components.Schemas.SupportedService]
      public typealias RawValue = Swift.String
      nonisolated public static var allCases: [Candle.Components.Schemas.SupportedService] {
        get
      }
      public var rawValue: Swift.String {
        get
      }
    }
    public typealias ServiceUserID = Swift.String
    @frozen public enum LinkedAccountDetails : Swift.Codable, Swift.Hashable, Swift.Sendable {
      case InactiveLinkedAccountDetails(Candle.Components.Schemas.InactiveLinkedAccountDetails)
      case ActiveLinkedAccountDetails(Candle.Components.Schemas.ActiveLinkedAccountDetails)
      public init(from decoder: any Swift.Decoder) throws
      public func encode(to encoder: any Swift.Encoder) throws
      public func hash(into hasher: inout Swift.Hasher)
      public static func == (a: Candle.Components.Schemas.LinkedAccountDetails, b: Candle.Components.Schemas.LinkedAccountDetails) -> Swift.Bool
      public var hashValue: Swift.Int {
        get
      }
    }
    public struct InactiveLinkedAccountDetails : Swift.Codable, Swift.Hashable, Swift.Sendable {
      @frozen public enum StatePayload : Swift.String, Swift.Codable, Swift.Hashable, Swift.Sendable, Swift.CaseIterable {
        case inactive
        public init?(rawValue: Swift.String)
        public typealias AllCases = [Candle.Components.Schemas.InactiveLinkedAccountDetails.StatePayload]
        public typealias RawValue = Swift.String
        nonisolated public static var allCases: [Candle.Components.Schemas.InactiveLinkedAccountDetails.StatePayload] {
          get
        }
        public var rawValue: Swift.String {
          get
        }
      }
      public var state: Candle.Components.Schemas.InactiveLinkedAccountDetails.StatePayload
      public init(state: Candle.Components.Schemas.InactiveLinkedAccountDetails.StatePayload)
      public enum CodingKeys : Swift.String, Swift.CodingKey {
        case state
        public init?(rawValue: Swift.String)
        public init?(stringValue: Swift.String)
        public init?(intValue: Swift.Int)
        public typealias RawValue = Swift.String
        public var intValue: Swift.Int? {
          get
        }
        public var rawValue: Swift.String {
          get
        }
        public var stringValue: Swift.String {
          get
        }
      }
      public init(from decoder: any Swift.Decoder) throws
      public func hash(into hasher: inout Swift.Hasher)
      public static func == (a: Candle.Components.Schemas.InactiveLinkedAccountDetails, b: Candle.Components.Schemas.InactiveLinkedAccountDetails) -> Swift.Bool
      public func encode(to encoder: any Swift.Encoder) throws
      public var hashValue: Swift.Int {
        get
      }
    }
    public struct ActiveLinkedAccountDetails : Swift.Codable, Swift.Hashable, Swift.Sendable {
      @frozen public enum StatePayload : Swift.String, Swift.Codable, Swift.Hashable, Swift.Sendable, Swift.CaseIterable {
        case active
        public init?(rawValue: Swift.String)
        public typealias AllCases = [Candle.Components.Schemas.ActiveLinkedAccountDetails.StatePayload]
        public typealias RawValue = Swift.String
        nonisolated public static var allCases: [Candle.Components.Schemas.ActiveLinkedAccountDetails.StatePayload] {
          get
        }
        public var rawValue: Swift.String {
          get
        }
      }
      public var state: Candle.Components.Schemas.ActiveLinkedAccountDetails.StatePayload
      public var accountOpened: Swift.String
      public var username: Swift.String
      public var emailAddress: Swift.String?
      public var legalName: Swift.String
      public init(state: Candle.Components.Schemas.ActiveLinkedAccountDetails.StatePayload, accountOpened: Swift.String, username: Swift.String, emailAddress: Swift.String? = nil, legalName: Swift.String)
      public enum CodingKeys : Swift.String, Swift.CodingKey {
        case state
        case accountOpened
        case username
        case emailAddress
        case legalName
        public init?(rawValue: Swift.String)
        public init?(stringValue: Swift.String)
        public init?(intValue: Swift.Int)
        public typealias RawValue = Swift.String
        public var intValue: Swift.Int? {
          get
        }
        public var rawValue: Swift.String {
          get
        }
        public var stringValue: Swift.String {
          get
        }
      }
      public init(from decoder: any Swift.Decoder) throws
      public func hash(into hasher: inout Swift.Hasher)
      public static func == (a: Candle.Components.Schemas.ActiveLinkedAccountDetails, b: Candle.Components.Schemas.ActiveLinkedAccountDetails) -> Swift.Bool
      public func encode(to encoder: any Swift.Encoder) throws
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public enum LinkRequest : Swift.Codable, Swift.Hashable, Swift.Sendable {
      case ServiceCredentialsRequest(Candle.Components.Schemas.ServiceCredentialsRequest)
      case MFAResponseRequest(Candle.Components.Schemas.MFAResponseRequest)
      public init(from decoder: any Swift.Decoder) throws
      public func encode(to encoder: any Swift.Encoder) throws
      public func hash(into hasher: inout Swift.Hasher)
      public static func == (a: Candle.Components.Schemas.LinkRequest, b: Candle.Components.Schemas.LinkRequest) -> Swift.Bool
      public var hashValue: Swift.Int {
        get
      }
    }
    public struct ServiceCredentialsRequest : Swift.Codable, Swift.Hashable, Swift.Sendable {
      @frozen public enum StepPayload : Swift.String, Swift.Codable, Swift.Hashable, Swift.Sendable, Swift.CaseIterable {
        case credentials
        public init?(rawValue: Swift.String)
        public typealias AllCases = [Candle.Components.Schemas.ServiceCredentialsRequest.StepPayload]
        public typealias RawValue = Swift.String
        nonisolated public static var allCases: [Candle.Components.Schemas.ServiceCredentialsRequest.StepPayload] {
          get
        }
        public var rawValue: Swift.String {
          get
        }
      }
      public var step: Candle.Components.Schemas.ServiceCredentialsRequest.StepPayload
      public var credentials: Candle.Components.Schemas.ServiceCredentials
      public init(step: Candle.Components.Schemas.ServiceCredentialsRequest.StepPayload, credentials: Candle.Components.Schemas.ServiceCredentials)
      public enum CodingKeys : Swift.String, Swift.CodingKey {
        case step
        case credentials
        public init?(rawValue: Swift.String)
        public init?(stringValue: Swift.String)
        public init?(intValue: Swift.Int)
        public typealias RawValue = Swift.String
        public var intValue: Swift.Int? {
          get
        }
        public var rawValue: Swift.String {
          get
        }
        public var stringValue: Swift.String {
          get
        }
      }
      public init(from decoder: any Swift.Decoder) throws
      public func hash(into hasher: inout Swift.Hasher)
      public static func == (a: Candle.Components.Schemas.ServiceCredentialsRequest, b: Candle.Components.Schemas.ServiceCredentialsRequest) -> Swift.Bool
      public func encode(to encoder: any Swift.Encoder) throws
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public enum ServiceCredentials : Swift.Codable, Swift.Hashable, Swift.Sendable {
      case DemoServiceCredentials(Candle.Components.Schemas.DemoServiceCredentials)
      case RobinhoodServiceCredentials(Candle.Components.Schemas.RobinhoodServiceCredentials)
      case VenmoServiceCredentials(Candle.Components.Schemas.VenmoServiceCredentials)
      case CashAppServiceCredentials(Candle.Components.Schemas.CashAppServiceCredentials)
      case AppleServiceCredentials(Candle.Components.Schemas.AppleServiceCredentials)
      public init(from decoder: any Swift.Decoder) throws
      public func encode(to encoder: any Swift.Encoder) throws
      public func hash(into hasher: inout Swift.Hasher)
      public static func == (a: Candle.Components.Schemas.ServiceCredentials, b: Candle.Components.Schemas.ServiceCredentials) -> Swift.Bool
      public var hashValue: Swift.Int {
        get
      }
    }
    public struct DemoServiceCredentials : Swift.Codable, Swift.Hashable, Swift.Sendable {
      @frozen public enum ServicePayload : Swift.String, Swift.Codable, Swift.Hashable, Swift.Sendable, Swift.CaseIterable {
        case demo
        public init?(rawValue: Swift.String)
        public typealias AllCases = [Candle.Components.Schemas.DemoServiceCredentials.ServicePayload]
        public typealias RawValue = Swift.String
        nonisolated public static var allCases: [Candle.Components.Schemas.DemoServiceCredentials.ServicePayload] {
          get
        }
        public var rawValue: Swift.String {
          get
        }
      }
      public var service: Candle.Components.Schemas.DemoServiceCredentials.ServicePayload
      public var emailAddress: Candle.Components.Schemas.EmailAddress
      public init(service: Candle.Components.Schemas.DemoServiceCredentials.ServicePayload, emailAddress: Candle.Components.Schemas.EmailAddress)
      public enum CodingKeys : Swift.String, Swift.CodingKey {
        case service
        case emailAddress
        public init?(rawValue: Swift.String)
        public init?(stringValue: Swift.String)
        public init?(intValue: Swift.Int)
        public typealias RawValue = Swift.String
        public var intValue: Swift.Int? {
          get
        }
        public var rawValue: Swift.String {
          get
        }
        public var stringValue: Swift.String {
          get
        }
      }
      public init(from decoder: any Swift.Decoder) throws
      public func hash(into hasher: inout Swift.Hasher)
      public static func == (a: Candle.Components.Schemas.DemoServiceCredentials, b: Candle.Components.Schemas.DemoServiceCredentials) -> Swift.Bool
      public func encode(to encoder: any Swift.Encoder) throws
      public var hashValue: Swift.Int {
        get
      }
    }
    public typealias EmailAddress = Swift.String
    public struct RobinhoodServiceCredentials : Swift.Codable, Swift.Hashable, Swift.Sendable {
      @frozen public enum ServicePayload : Swift.String, Swift.Codable, Swift.Hashable, Swift.Sendable, Swift.CaseIterable {
        case robinhood
        public init?(rawValue: Swift.String)
        public typealias AllCases = [Candle.Components.Schemas.RobinhoodServiceCredentials.ServicePayload]
        public typealias RawValue = Swift.String
        nonisolated public static var allCases: [Candle.Components.Schemas.RobinhoodServiceCredentials.ServicePayload] {
          get
        }
        public var rawValue: Swift.String {
          get
        }
      }
      public var service: Candle.Components.Schemas.RobinhoodServiceCredentials.ServicePayload
      public var emailAddress: Candle.Components.Schemas.EmailAddress
      public var password: Candle.Components.Schemas.Password
      public init(service: Candle.Components.Schemas.RobinhoodServiceCredentials.ServicePayload, emailAddress: Candle.Components.Schemas.EmailAddress, password: Candle.Components.Schemas.Password)
      public enum CodingKeys : Swift.String, Swift.CodingKey {
        case service
        case emailAddress
        case password
        public init?(rawValue: Swift.String)
        public init?(stringValue: Swift.String)
        public init?(intValue: Swift.Int)
        public typealias RawValue = Swift.String
        public var intValue: Swift.Int? {
          get
        }
        public var rawValue: Swift.String {
          get
        }
        public var stringValue: Swift.String {
          get
        }
      }
      public init(from decoder: any Swift.Decoder) throws
      public func hash(into hasher: inout Swift.Hasher)
      public static func == (a: Candle.Components.Schemas.RobinhoodServiceCredentials, b: Candle.Components.Schemas.RobinhoodServiceCredentials) -> Swift.Bool
      public func encode(to encoder: any Swift.Encoder) throws
      public var hashValue: Swift.Int {
        get
      }
    }
    public typealias Password = Swift.String
    public struct VenmoServiceCredentials : Swift.Codable, Swift.Hashable, Swift.Sendable {
      @frozen public enum ServicePayload : Swift.String, Swift.Codable, Swift.Hashable, Swift.Sendable, Swift.CaseIterable {
        case venmo
        public init?(rawValue: Swift.String)
        public typealias AllCases = [Candle.Components.Schemas.VenmoServiceCredentials.ServicePayload]
        public typealias RawValue = Swift.String
        nonisolated public static var allCases: [Candle.Components.Schemas.VenmoServiceCredentials.ServicePayload] {
          get
        }
        public var rawValue: Swift.String {
          get
        }
      }
      public var service: Candle.Components.Schemas.VenmoServiceCredentials.ServicePayload
      @frozen public enum UsernamePayload : Swift.Codable, Swift.Hashable, Swift.Sendable {
        case USPhoneNumber(Candle.Components.Schemas.USPhoneNumber)
        case EmailAddress(Candle.Components.Schemas.EmailAddress)
        public init(from decoder: any Swift.Decoder) throws
        public func encode(to encoder: any Swift.Encoder) throws
        public func hash(into hasher: inout Swift.Hasher)
        public static func == (a: Candle.Components.Schemas.VenmoServiceCredentials.UsernamePayload, b: Candle.Components.Schemas.VenmoServiceCredentials.UsernamePayload) -> Swift.Bool
        public var hashValue: Swift.Int {
          get
        }
      }
      public var username: Candle.Components.Schemas.VenmoServiceCredentials.UsernamePayload
      public var password: Candle.Components.Schemas.Password
      public init(service: Candle.Components.Schemas.VenmoServiceCredentials.ServicePayload, username: Candle.Components.Schemas.VenmoServiceCredentials.UsernamePayload, password: Candle.Components.Schemas.Password)
      public enum CodingKeys : Swift.String, Swift.CodingKey {
        case service
        case username
        case password
        public init?(rawValue: Swift.String)
        public init?(stringValue: Swift.String)
        public init?(intValue: Swift.Int)
        public typealias RawValue = Swift.String
        public var intValue: Swift.Int? {
          get
        }
        public var rawValue: Swift.String {
          get
        }
        public var stringValue: Swift.String {
          get
        }
      }
      public init(from decoder: any Swift.Decoder) throws
      public func hash(into hasher: inout Swift.Hasher)
      public static func == (a: Candle.Components.Schemas.VenmoServiceCredentials, b: Candle.Components.Schemas.VenmoServiceCredentials) -> Swift.Bool
      public func encode(to encoder: any Swift.Encoder) throws
      public var hashValue: Swift.Int {
        get
      }
    }
    public typealias USPhoneNumber = Swift.String
    public struct CashAppServiceCredentials : Swift.Codable, Swift.Hashable, Swift.Sendable {
      @frozen public enum ServicePayload : Swift.String, Swift.Codable, Swift.Hashable, Swift.Sendable, Swift.CaseIterable {
        case cashApp
        public init?(rawValue: Swift.String)
        public typealias AllCases = [Candle.Components.Schemas.CashAppServiceCredentials.ServicePayload]
        public typealias RawValue = Swift.String
        nonisolated public static var allCases: [Candle.Components.Schemas.CashAppServiceCredentials.ServicePayload] {
          get
        }
        public var rawValue: Swift.String {
          get
        }
      }
      public var service: Candle.Components.Schemas.CashAppServiceCredentials.ServicePayload
      @frozen public enum UsernamePayload : Swift.Codable, Swift.Hashable, Swift.Sendable {
        case USPhoneNumber(Candle.Components.Schemas.USPhoneNumber)
        case EmailAddress(Candle.Components.Schemas.EmailAddress)
        public init(from decoder: any Swift.Decoder) throws
        public func encode(to encoder: any Swift.Encoder) throws
        public func hash(into hasher: inout Swift.Hasher)
        public static func == (a: Candle.Components.Schemas.CashAppServiceCredentials.UsernamePayload, b: Candle.Components.Schemas.CashAppServiceCredentials.UsernamePayload) -> Swift.Bool
        public var hashValue: Swift.Int {
          get
        }
      }
      public var username: Candle.Components.Schemas.CashAppServiceCredentials.UsernamePayload
      public var pin: Candle.Components.Schemas.Pin
      public init(service: Candle.Components.Schemas.CashAppServiceCredentials.ServicePayload, username: Candle.Components.Schemas.CashAppServiceCredentials.UsernamePayload, pin: Candle.Components.Schemas.Pin)
      public enum CodingKeys : Swift.String, Swift.CodingKey {
        case service
        case username
        case pin
        public init?(rawValue: Swift.String)
        public init?(stringValue: Swift.String)
        public init?(intValue: Swift.Int)
        public typealias RawValue = Swift.String
        public var intValue: Swift.Int? {
          get
        }
        public var rawValue: Swift.String {
          get
        }
        public var stringValue: Swift.String {
          get
        }
      }
      public init(from decoder: any Swift.Decoder) throws
      public func hash(into hasher: inout Swift.Hasher)
      public static func == (a: Candle.Components.Schemas.CashAppServiceCredentials, b: Candle.Components.Schemas.CashAppServiceCredentials) -> Swift.Bool
      public func encode(to encoder: any Swift.Encoder) throws
      public var hashValue: Swift.Int {
        get
      }
    }
    public typealias Pin = Swift.String
    public struct AppleServiceCredentials : Swift.Codable, Swift.Hashable, Swift.Sendable {
      @frozen public enum ServicePayload : Swift.String, Swift.Codable, Swift.Hashable, Swift.Sendable, Swift.CaseIterable {
        case apple
        public init?(rawValue: Swift.String)
        public typealias AllCases = [Candle.Components.Schemas.AppleServiceCredentials.ServicePayload]
        public typealias RawValue = Swift.String
        nonisolated public static var allCases: [Candle.Components.Schemas.AppleServiceCredentials.ServicePayload] {
          get
        }
        public var rawValue: Swift.String {
          get
        }
      }
      public var service: Candle.Components.Schemas.AppleServiceCredentials.ServicePayload
      public init(service: Candle.Components.Schemas.AppleServiceCredentials.ServicePayload)
      public enum CodingKeys : Swift.String, Swift.CodingKey {
        case service
        public init?(rawValue: Swift.String)
        public init?(stringValue: Swift.String)
        public init?(intValue: Swift.Int)
        public typealias RawValue = Swift.String
        public var intValue: Swift.Int? {
          get
        }
        public var rawValue: Swift.String {
          get
        }
        public var stringValue: Swift.String {
          get
        }
      }
      public init(from decoder: any Swift.Decoder) throws
      public func hash(into hasher: inout Swift.Hasher)
      public static func == (a: Candle.Components.Schemas.AppleServiceCredentials, b: Candle.Components.Schemas.AppleServiceCredentials) -> Swift.Bool
      public func encode(to encoder: any Swift.Encoder) throws
      public var hashValue: Swift.Int {
        get
      }
    }
    public struct MFAResponseRequest : Swift.Codable, Swift.Hashable, Swift.Sendable {
      @frozen public enum StepPayload : Swift.String, Swift.Codable, Swift.Hashable, Swift.Sendable, Swift.CaseIterable {
        case mfa
        public init?(rawValue: Swift.String)
        public typealias AllCases = [Candle.Components.Schemas.MFAResponseRequest.StepPayload]
        public typealias RawValue = Swift.String
        nonisolated public static var allCases: [Candle.Components.Schemas.MFAResponseRequest.StepPayload] {
          get
        }
        public var rawValue: Swift.String {
          get
        }
      }
      public var step: Candle.Components.Schemas.MFAResponseRequest.StepPayload
      public var response: Candle.Components.Schemas.MFAResponse
      public init(step: Candle.Components.Schemas.MFAResponseRequest.StepPayload, response: Candle.Components.Schemas.MFAResponse)
      public enum CodingKeys : Swift.String, Swift.CodingKey {
        case step
        case response
        public init?(rawValue: Swift.String)
        public init?(stringValue: Swift.String)
        public init?(intValue: Swift.Int)
        public typealias RawValue = Swift.String
        public var intValue: Swift.Int? {
          get
        }
        public var rawValue: Swift.String {
          get
        }
        public var stringValue: Swift.String {
          get
        }
      }
      public init(from decoder: any Swift.Decoder) throws
      public func hash(into hasher: inout Swift.Hasher)
      public static func == (a: Candle.Components.Schemas.MFAResponseRequest, b: Candle.Components.Schemas.MFAResponseRequest) -> Swift.Bool
      public func encode(to encoder: any Swift.Encoder) throws
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public enum MFAResponse : Swift.Codable, Swift.Hashable, Swift.Sendable {
      case MFACodeResponse(Candle.Components.Schemas.MFACodeResponse)
      case MFALinkResponse(Candle.Components.Schemas.MFALinkResponse)
      public init(from decoder: any Swift.Decoder) throws
      public func encode(to encoder: any Swift.Encoder) throws
      public func hash(into hasher: inout Swift.Hasher)
      public static func == (a: Candle.Components.Schemas.MFAResponse, b: Candle.Components.Schemas.MFAResponse) -> Swift.Bool
      public var hashValue: Swift.Int {
        get
      }
    }
    public struct MFACodeResponse : Swift.Codable, Swift.Hashable, Swift.Sendable {
      @frozen public enum MfaRequiredPayload : Swift.String, Swift.Codable, Swift.Hashable, Swift.Sendable, Swift.CaseIterable {
        case code
        public init?(rawValue: Swift.String)
        public typealias AllCases = [Candle.Components.Schemas.MFACodeResponse.MfaRequiredPayload]
        public typealias RawValue = Swift.String
        nonisolated public static var allCases: [Candle.Components.Schemas.MFACodeResponse.MfaRequiredPayload] {
          get
        }
        public var rawValue: Swift.String {
          get
        }
      }
      public var mfaRequired: Candle.Components.Schemas.MFACodeResponse.MfaRequiredPayload
      public var code: Candle.Components.Schemas.MFACode
      public var mfaContext: Candle.Components.Schemas.MFACodeContext
      public init(mfaRequired: Candle.Components.Schemas.MFACodeResponse.MfaRequiredPayload, code: Candle.Components.Schemas.MFACode, mfaContext: Candle.Components.Schemas.MFACodeContext)
      public enum CodingKeys : Swift.String, Swift.CodingKey {
        case mfaRequired
        case code
        case mfaContext
        public init?(rawValue: Swift.String)
        public init?(stringValue: Swift.String)
        public init?(intValue: Swift.Int)
        public typealias RawValue = Swift.String
        public var intValue: Swift.Int? {
          get
        }
        public var rawValue: Swift.String {
          get
        }
        public var stringValue: Swift.String {
          get
        }
      }
      public init(from decoder: any Swift.Decoder) throws
      public func hash(into hasher: inout Swift.Hasher)
      public static func == (a: Candle.Components.Schemas.MFACodeResponse, b: Candle.Components.Schemas.MFACodeResponse) -> Swift.Bool
      public func encode(to encoder: any Swift.Encoder) throws
      public var hashValue: Swift.Int {
        get
      }
    }
    public typealias MFACode = Swift.String
    public typealias MFACodeContext = Swift.String
    public struct MFALinkResponse : Swift.Codable, Swift.Hashable, Swift.Sendable {
      @frozen public enum MfaRequiredPayload : Swift.String, Swift.Codable, Swift.Hashable, Swift.Sendable, Swift.CaseIterable {
        case link
        public init?(rawValue: Swift.String)
        public typealias AllCases = [Candle.Components.Schemas.MFALinkResponse.MfaRequiredPayload]
        public typealias RawValue = Swift.String
        nonisolated public static var allCases: [Candle.Components.Schemas.MFALinkResponse.MfaRequiredPayload] {
          get
        }
        public var rawValue: Swift.String {
          get
        }
      }
      public var mfaRequired: Candle.Components.Schemas.MFALinkResponse.MfaRequiredPayload
      public var link: Candle.Components.Schemas.MFALink
      public var mfaContext: Candle.Components.Schemas.MFALinkContext
      public init(mfaRequired: Candle.Components.Schemas.MFALinkResponse.MfaRequiredPayload, link: Candle.Components.Schemas.MFALink, mfaContext: Candle.Components.Schemas.MFALinkContext)
      public enum CodingKeys : Swift.String, Swift.CodingKey {
        case mfaRequired
        case link
        case mfaContext
        public init?(rawValue: Swift.String)
        public init?(stringValue: Swift.String)
        public init?(intValue: Swift.Int)
        public typealias RawValue = Swift.String
        public var intValue: Swift.Int? {
          get
        }
        public var rawValue: Swift.String {
          get
        }
        public var stringValue: Swift.String {
          get
        }
      }
      public init(from decoder: any Swift.Decoder) throws
      public func hash(into hasher: inout Swift.Hasher)
      public static func == (a: Candle.Components.Schemas.MFALinkResponse, b: Candle.Components.Schemas.MFALinkResponse) -> Swift.Bool
      public func encode(to encoder: any Swift.Encoder) throws
      public var hashValue: Swift.Int {
        get
      }
    }
    public typealias MFALink = Swift.String
    public typealias MFALinkContext = Swift.String
    @frozen public enum MFARequest : Swift.Codable, Swift.Hashable, Swift.Sendable {
      case MFACodeRequest(Candle.Components.Schemas.MFACodeRequest)
      case MFALinkRequest(Candle.Components.Schemas.MFALinkRequest)
      public init(from decoder: any Swift.Decoder) throws
      public func encode(to encoder: any Swift.Encoder) throws
      public func hash(into hasher: inout Swift.Hasher)
      public static func == (a: Candle.Components.Schemas.MFARequest, b: Candle.Components.Schemas.MFARequest) -> Swift.Bool
      public var hashValue: Swift.Int {
        get
      }
    }
    public struct MFACodeRequest : Swift.Codable, Swift.Hashable, Swift.Sendable {
      @frozen public enum MfaRequiredPayload : Swift.String, Swift.Codable, Swift.Hashable, Swift.Sendable, Swift.CaseIterable {
        case code
        public init?(rawValue: Swift.String)
        public typealias AllCases = [Candle.Components.Schemas.MFACodeRequest.MfaRequiredPayload]
        public typealias RawValue = Swift.String
        nonisolated public static var allCases: [Candle.Components.Schemas.MFACodeRequest.MfaRequiredPayload] {
          get
        }
        public var rawValue: Swift.String {
          get
        }
      }
      public var mfaRequired: Candle.Components.Schemas.MFACodeRequest.MfaRequiredPayload
      public var codeDeliveryLocation: Candle.Components.Schemas.MFACodeDeliveryLocation
      public var mfaContext: Candle.Components.Schemas.MFACodeContext
      public init(mfaRequired: Candle.Components.Schemas.MFACodeRequest.MfaRequiredPayload, codeDeliveryLocation: Candle.Components.Schemas.MFACodeDeliveryLocation, mfaContext: Candle.Components.Schemas.MFACodeContext)
      public enum CodingKeys : Swift.String, Swift.CodingKey {
        case mfaRequired
        case codeDeliveryLocation
        case mfaContext
        public init?(rawValue: Swift.String)
        public init?(stringValue: Swift.String)
        public init?(intValue: Swift.Int)
        public typealias RawValue = Swift.String
        public var intValue: Swift.Int? {
          get
        }
        public var rawValue: Swift.String {
          get
        }
        public var stringValue: Swift.String {
          get
        }
      }
      public init(from decoder: any Swift.Decoder) throws
      public func hash(into hasher: inout Swift.Hasher)
      public static func == (a: Candle.Components.Schemas.MFACodeRequest, b: Candle.Components.Schemas.MFACodeRequest) -> Swift.Bool
      public func encode(to encoder: any Swift.Encoder) throws
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public enum MFACodeDeliveryLocation : Swift.String, Swift.Codable, Swift.Hashable, Swift.Sendable, Swift.CaseIterable {
      case sms
      case email
      case app
      public init?(rawValue: Swift.String)
      public typealias AllCases = [Candle.Components.Schemas.MFACodeDeliveryLocation]
      public typealias RawValue = Swift.String
      nonisolated public static var allCases: [Candle.Components.Schemas.MFACodeDeliveryLocation] {
        get
      }
      public var rawValue: Swift.String {
        get
      }
    }
    public struct MFALinkRequest : Swift.Codable, Swift.Hashable, Swift.Sendable {
      @frozen public enum MfaRequiredPayload : Swift.String, Swift.Codable, Swift.Hashable, Swift.Sendable, Swift.CaseIterable {
        case link
        public init?(rawValue: Swift.String)
        public typealias AllCases = [Candle.Components.Schemas.MFALinkRequest.MfaRequiredPayload]
        public typealias RawValue = Swift.String
        nonisolated public static var allCases: [Candle.Components.Schemas.MFALinkRequest.MfaRequiredPayload] {
          get
        }
        public var rawValue: Swift.String {
          get
        }
      }
      public var mfaRequired: Candle.Components.Schemas.MFALinkRequest.MfaRequiredPayload
      public var mfaContext: Candle.Components.Schemas.MFALinkContext
      public init(mfaRequired: Candle.Components.Schemas.MFALinkRequest.MfaRequiredPayload, mfaContext: Candle.Components.Schemas.MFALinkContext)
      public enum CodingKeys : Swift.String, Swift.CodingKey {
        case mfaRequired
        case mfaContext
        public init?(rawValue: Swift.String)
        public init?(stringValue: Swift.String)
        public init?(intValue: Swift.Int)
        public typealias RawValue = Swift.String
        public var intValue: Swift.Int? {
          get
        }
        public var rawValue: Swift.String {
          get
        }
        public var stringValue: Swift.String {
          get
        }
      }
      public init(from decoder: any Swift.Decoder) throws
      public func hash(into hasher: inout Swift.Hasher)
      public static func == (a: Candle.Components.Schemas.MFALinkRequest, b: Candle.Components.Schemas.MFALinkRequest) -> Swift.Bool
      public func encode(to encoder: any Swift.Encoder) throws
      public var hashValue: Swift.Int {
        get
      }
    }
    public struct PrimaryFiatHoldingAccount : Swift.Codable, Swift.Hashable, Swift.Sendable {
      public var serviceFiatHoldingAccountID: Candle.Components.Schemas.ServiceFiatHoldingAccountID
      public var nickname: Swift.String
      public var legalAccountKind: Candle.Components.Schemas.LegalAccountKind
      public var secondaryRefs: [Candle.Components.Schemas.FiatHoldingAccountRef]
      public var ach: Candle.Components.Schemas.ACHDetails?
      public var wire: Candle.Components.Schemas.WireDetails?
      public var details: Candle.Components.Schemas.PrimaryFiatHoldingAccountDetails
      public init(serviceFiatHoldingAccountID: Candle.Components.Schemas.ServiceFiatHoldingAccountID, nickname: Swift.String, legalAccountKind: Candle.Components.Schemas.LegalAccountKind, secondaryRefs: [Candle.Components.Schemas.FiatHoldingAccountRef], ach: Candle.Components.Schemas.ACHDetails? = nil, wire: Candle.Components.Schemas.WireDetails? = nil, details: Candle.Components.Schemas.PrimaryFiatHoldingAccountDetails)
      public enum CodingKeys : Swift.String, Swift.CodingKey {
        case serviceFiatHoldingAccountID
        case nickname
        case legalAccountKind
        case secondaryRefs
        case ach
        case wire
        case details
        public init?(rawValue: Swift.String)
        public init?(stringValue: Swift.String)
        public init?(intValue: Swift.Int)
        public typealias RawValue = Swift.String
        public var intValue: Swift.Int? {
          get
        }
        public var rawValue: Swift.String {
          get
        }
        public var stringValue: Swift.String {
          get
        }
      }
      public init(from decoder: any Swift.Decoder) throws
      public func hash(into hasher: inout Swift.Hasher)
      public static func == (a: Candle.Components.Schemas.PrimaryFiatHoldingAccount, b: Candle.Components.Schemas.PrimaryFiatHoldingAccount) -> Swift.Bool
      public func encode(to encoder: any Swift.Encoder) throws
      public var hashValue: Swift.Int {
        get
      }
    }
    public typealias ServiceFiatHoldingAccountID = Swift.String
    @frozen public enum LegalAccountKind : Swift.String, Swift.Codable, Swift.Hashable, Swift.Sendable, Swift.CaseIterable {
      case individual
      case joint
      case traditionalIra
      case rothIra
      public init?(rawValue: Swift.String)
      public typealias AllCases = [Candle.Components.Schemas.LegalAccountKind]
      public typealias RawValue = Swift.String
      nonisolated public static var allCases: [Candle.Components.Schemas.LegalAccountKind] {
        get
      }
      public var rawValue: Swift.String {
        get
      }
    }
    public struct FiatHoldingAccountRef : Swift.Codable, Swift.Hashable, Swift.Sendable {
      public var linkedAccountID: Candle.Components.Schemas.LinkedAccountID
      @frozen public enum RefKindPayload : Swift.String, Swift.Codable, Swift.Hashable, Swift.Sendable, Swift.CaseIterable {
        case owner_banking
        case owner_investing
        case link
        public init?(rawValue: Swift.String)
        public typealias AllCases = [Candle.Components.Schemas.FiatHoldingAccountRef.RefKindPayload]
        public typealias RawValue = Swift.String
        nonisolated public static var allCases: [Candle.Components.Schemas.FiatHoldingAccountRef.RefKindPayload] {
          get
        }
        public var rawValue: Swift.String {
          get
        }
      }
      public var refKind: Candle.Components.Schemas.FiatHoldingAccountRef.RefKindPayload
      public var serviceFiatHoldingAccountID: Candle.Components.Schemas.ServiceFiatHoldingAccountID
      public init(linkedAccountID: Candle.Components.Schemas.LinkedAccountID, refKind: Candle.Components.Schemas.FiatHoldingAccountRef.RefKindPayload, serviceFiatHoldingAccountID: Candle.Components.Schemas.ServiceFiatHoldingAccountID)
      public enum CodingKeys : Swift.String, Swift.CodingKey {
        case linkedAccountID
        case refKind
        case serviceFiatHoldingAccountID
        public init?(rawValue: Swift.String)
        public init?(stringValue: Swift.String)
        public init?(intValue: Swift.Int)
        public typealias RawValue = Swift.String
        public var intValue: Swift.Int? {
          get
        }
        public var rawValue: Swift.String {
          get
        }
        public var stringValue: Swift.String {
          get
        }
      }
      public init(from decoder: any Swift.Decoder) throws
      public func hash(into hasher: inout Swift.Hasher)
      public static func == (a: Candle.Components.Schemas.FiatHoldingAccountRef, b: Candle.Components.Schemas.FiatHoldingAccountRef) -> Swift.Bool
      public func encode(to encoder: any Swift.Encoder) throws
      public var hashValue: Swift.Int {
        get
      }
    }
    public struct ACHDetails : Swift.Codable, Swift.Hashable, Swift.Sendable {
      public var accountNumber: Swift.String
      public var routingNumber: Swift.String
      public var accountKind: Candle.Components.Schemas.ACHAccountKind
      public init(accountNumber: Swift.String, routingNumber: Swift.String, accountKind: Candle.Components.Schemas.ACHAccountKind)
      public enum CodingKeys : Swift.String, Swift.CodingKey {
        case accountNumber
        case routingNumber
        case accountKind
        public init?(rawValue: Swift.String)
        public init?(stringValue: Swift.String)
        public init?(intValue: Swift.Int)
        public typealias RawValue = Swift.String
        public var intValue: Swift.Int? {
          get
        }
        public var rawValue: Swift.String {
          get
        }
        public var stringValue: Swift.String {
          get
        }
      }
      public init(from decoder: any Swift.Decoder) throws
      public func hash(into hasher: inout Swift.Hasher)
      public static func == (a: Candle.Components.Schemas.ACHDetails, b: Candle.Components.Schemas.ACHDetails) -> Swift.Bool
      public func encode(to encoder: any Swift.Encoder) throws
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public enum ACHAccountKind : Swift.String, Swift.Codable, Swift.Hashable, Swift.Sendable, Swift.CaseIterable {
      case checking
      case savings
      public init?(rawValue: Swift.String)
      public typealias AllCases = [Candle.Components.Schemas.ACHAccountKind]
      public typealias RawValue = Swift.String
      nonisolated public static var allCases: [Candle.Components.Schemas.ACHAccountKind] {
        get
      }
      public var rawValue: Swift.String {
        get
      }
    }
    public struct WireDetails : Swift.Codable, Swift.Hashable, Swift.Sendable {
      public var accountNumber: Swift.String
      public var routingNumber: Swift.String
      public init(accountNumber: Swift.String, routingNumber: Swift.String)
      public enum CodingKeys : Swift.String, Swift.CodingKey {
        case accountNumber
        case routingNumber
        public init?(rawValue: Swift.String)
        public init?(stringValue: Swift.String)
        public init?(intValue: Swift.Int)
        public typealias RawValue = Swift.String
        public var intValue: Swift.Int? {
          get
        }
        public var rawValue: Swift.String {
          get
        }
        public var stringValue: Swift.String {
          get
        }
      }
      public init(from decoder: any Swift.Decoder) throws
      public func hash(into hasher: inout Swift.Hasher)
      public static func == (a: Candle.Components.Schemas.WireDetails, b: Candle.Components.Schemas.WireDetails) -> Swift.Bool
      public func encode(to encoder: any Swift.Encoder) throws
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public enum PrimaryFiatHoldingAccountDetails : Swift.Codable, Swift.Hashable, Swift.Sendable {
      case OwnerFiatHoldingAccountDetails(Candle.Components.Schemas.OwnerFiatHoldingAccountDetails)
      case LinkFiatHoldingAccountDetails(Candle.Components.Schemas.LinkFiatHoldingAccountDetails)
      public init(from decoder: any Swift.Decoder) throws
      public func encode(to encoder: any Swift.Encoder) throws
      public func hash(into hasher: inout Swift.Hasher)
      public static func == (a: Candle.Components.Schemas.PrimaryFiatHoldingAccountDetails, b: Candle.Components.Schemas.PrimaryFiatHoldingAccountDetails) -> Swift.Bool
      public var hashValue: Swift.Int {
        get
      }
    }
    public struct OwnerFiatHoldingAccountDetails : Swift.Codable, Swift.Hashable, Swift.Sendable {
      @frozen public enum RefKindPayload : Swift.String, Swift.Codable, Swift.Hashable, Swift.Sendable, Swift.CaseIterable {
        case owner_banking
        case owner_investing
        public init?(rawValue: Swift.String)
        public typealias AllCases = [Candle.Components.Schemas.OwnerFiatHoldingAccountDetails.RefKindPayload]
        public typealias RawValue = Swift.String
        nonisolated public static var allCases: [Candle.Components.Schemas.OwnerFiatHoldingAccountDetails.RefKindPayload] {
          get
        }
        public var rawValue: Swift.String {
          get
        }
      }
      public var refKind: Candle.Components.Schemas.OwnerFiatHoldingAccountDetails.RefKindPayload
      public var service: Candle.Components.Schemas.SupportedService
      public var availableCashValue: Swift.Double
      public var linkedAccountID: Candle.Components.Schemas.LinkedAccountID
      public init(refKind: Candle.Components.Schemas.OwnerFiatHoldingAccountDetails.RefKindPayload, service: Candle.Components.Schemas.SupportedService, availableCashValue: Swift.Double, linkedAccountID: Candle.Components.Schemas.LinkedAccountID)
      public enum CodingKeys : Swift.String, Swift.CodingKey {
        case refKind
        case service
        case availableCashValue
        case linkedAccountID
        public init?(rawValue: Swift.String)
        public init?(stringValue: Swift.String)
        public init?(intValue: Swift.Int)
        public typealias RawValue = Swift.String
        public var intValue: Swift.Int? {
          get
        }
        public var rawValue: Swift.String {
          get
        }
        public var stringValue: Swift.String {
          get
        }
      }
      public init(from decoder: any Swift.Decoder) throws
      public func hash(into hasher: inout Swift.Hasher)
      public static func == (a: Candle.Components.Schemas.OwnerFiatHoldingAccountDetails, b: Candle.Components.Schemas.OwnerFiatHoldingAccountDetails) -> Swift.Bool
      public func encode(to encoder: any Swift.Encoder) throws
      public var hashValue: Swift.Int {
        get
      }
    }
    public struct LinkFiatHoldingAccountDetails : Swift.Codable, Swift.Hashable, Swift.Sendable {
      @frozen public enum RefKindPayload : Swift.String, Swift.Codable, Swift.Hashable, Swift.Sendable, Swift.CaseIterable {
        case link
        public init?(rawValue: Swift.String)
        public typealias AllCases = [Candle.Components.Schemas.LinkFiatHoldingAccountDetails.RefKindPayload]
        public typealias RawValue = Swift.String
        nonisolated public static var allCases: [Candle.Components.Schemas.LinkFiatHoldingAccountDetails.RefKindPayload] {
          get
        }
        public var rawValue: Swift.String {
          get
        }
      }
      public var refKind: Candle.Components.Schemas.LinkFiatHoldingAccountDetails.RefKindPayload
      public var service: Candle.Components.Schemas.Service
      public init(refKind: Candle.Components.Schemas.LinkFiatHoldingAccountDetails.RefKindPayload, service: Candle.Components.Schemas.Service)
      public enum CodingKeys : Swift.String, Swift.CodingKey {
        case refKind
        case service
        public init?(rawValue: Swift.String)
        public init?(stringValue: Swift.String)
        public init?(intValue: Swift.Int)
        public typealias RawValue = Swift.String
        public var intValue: Swift.Int? {
          get
        }
        public var rawValue: Swift.String {
          get
        }
        public var stringValue: Swift.String {
          get
        }
      }
      public init(from decoder: any Swift.Decoder) throws
      public func hash(into hasher: inout Swift.Hasher)
      public static func == (a: Candle.Components.Schemas.LinkFiatHoldingAccountDetails, b: Candle.Components.Schemas.LinkFiatHoldingAccountDetails) -> Swift.Bool
      public func encode(to encoder: any Swift.Encoder) throws
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public enum Service : Swift.String, Swift.Codable, Swift.Hashable, Swift.Sendable, Swift.CaseIterable {
      case demo
      case robinhood
      case cashApp
      case apple
      case venmo
      case unknown
      case chime
      case paypal
      case coinbase
      case discover
      case americanExpress
      case jpmorganChase
      case bankOfAmerica
      case capitalOne
      case citibank
      case vanguard
      case wellsFargo
      case charlesSchwab
      public init?(rawValue: Swift.String)
      public typealias AllCases = [Candle.Components.Schemas.Service]
      public typealias RawValue = Swift.String
      nonisolated public static var allCases: [Candle.Components.Schemas.Service] {
        get
      }
      public var rawValue: Swift.String {
        get
      }
    }
    @frozen public enum AssetKind : Swift.String, Swift.Codable, Swift.Hashable, Swift.Sendable, Swift.CaseIterable {
      case stock
      case crypto
      public init?(rawValue: Swift.String)
      public typealias AllCases = [Candle.Components.Schemas.AssetKind]
      public typealias RawValue = Swift.String
      nonisolated public static var allCases: [Candle.Components.Schemas.AssetKind] {
        get
      }
      public var rawValue: Swift.String {
        get
      }
    }
    @frozen public enum PortfolioActivityItem : Swift.Codable, Swift.Hashable, Swift.Sendable {
      case TransactionActivityItem(Candle.Components.Schemas.TransactionActivityItem)
      case OrderActivityItem(Candle.Components.Schemas.OrderActivityItem)
      public init(from decoder: any Swift.Decoder) throws
      public func encode(to encoder: any Swift.Encoder) throws
      public func hash(into hasher: inout Swift.Hasher)
      public static func == (a: Candle.Components.Schemas.PortfolioActivityItem, b: Candle.Components.Schemas.PortfolioActivityItem) -> Swift.Bool
      public var hashValue: Swift.Int {
        get
      }
    }
    public struct TransactionActivityItem : Swift.Codable, Swift.Hashable, Swift.Sendable {
      @frozen public enum ActivityKindPayload : Swift.String, Swift.Codable, Swift.Hashable, Swift.Sendable, Swift.CaseIterable {
        case transaction
        public init?(rawValue: Swift.String)
        public typealias AllCases = [Candle.Components.Schemas.TransactionActivityItem.ActivityKindPayload]
        public typealias RawValue = Swift.String
        nonisolated public static var allCases: [Candle.Components.Schemas.TransactionActivityItem.ActivityKindPayload] {
          get
        }
        public var rawValue: Swift.String {
          get
        }
      }
      public var activityKind: Candle.Components.Schemas.TransactionActivityItem.ActivityKindPayload
      public var serviceTransactionID: Swift.String
      public var dateTime: Swift.String
      @frozen public enum StatePayload : Swift.String, Swift.Codable, Swift.Hashable, Swift.Sendable, Swift.CaseIterable {
        case success
        case inProgress
        case failed
        public init?(rawValue: Swift.String)
        public typealias AllCases = [Candle.Components.Schemas.TransactionActivityItem.StatePayload]
        public typealias RawValue = Swift.String
        nonisolated public static var allCases: [Candle.Components.Schemas.TransactionActivityItem.StatePayload] {
          get
        }
        public var rawValue: Swift.String {
          get
        }
      }
      public var state: Candle.Components.Schemas.TransactionActivityItem.StatePayload
      public var amount: Swift.Double
      public var counterparty: Candle.Components.Schemas.TransactionCounterparty
      public var linkedAccountID: Candle.Components.Schemas.LinkedAccountID
      public var service: Candle.Components.Schemas.SupportedService
      public init(activityKind: Candle.Components.Schemas.TransactionActivityItem.ActivityKindPayload, serviceTransactionID: Swift.String, dateTime: Swift.String, state: Candle.Components.Schemas.TransactionActivityItem.StatePayload, amount: Swift.Double, counterparty: Candle.Components.Schemas.TransactionCounterparty, linkedAccountID: Candle.Components.Schemas.LinkedAccountID, service: Candle.Components.Schemas.SupportedService)
      public enum CodingKeys : Swift.String, Swift.CodingKey {
        case activityKind
        case serviceTransactionID
        case dateTime
        case state
        case amount
        case counterparty
        case linkedAccountID
        case service
        public init?(rawValue: Swift.String)
        public init?(stringValue: Swift.String)
        public init?(intValue: Swift.Int)
        public typealias RawValue = Swift.String
        public var intValue: Swift.Int? {
          get
        }
        public var rawValue: Swift.String {
          get
        }
        public var stringValue: Swift.String {
          get
        }
      }
      public init(from decoder: any Swift.Decoder) throws
      public func hash(into hasher: inout Swift.Hasher)
      public static func == (a: Candle.Components.Schemas.TransactionActivityItem, b: Candle.Components.Schemas.TransactionActivityItem) -> Swift.Bool
      public func encode(to encoder: any Swift.Encoder) throws
      public var hashValue: Swift.Int {
        get
      }
    }
    public struct TransactionCounterparty : Swift.Codable, Swift.Hashable, Swift.Sendable {
      public var name: Swift.String
      public var location: Candle.Components.Schemas.TransactionLocation?
      public var logoURL: Swift.String
      public init(name: Swift.String, location: Candle.Components.Schemas.TransactionLocation? = nil, logoURL: Swift.String)
      public enum CodingKeys : Swift.String, Swift.CodingKey {
        case name
        case location
        case logoURL
        public init?(rawValue: Swift.String)
        public init?(stringValue: Swift.String)
        public init?(intValue: Swift.Int)
        public typealias RawValue = Swift.String
        public var intValue: Swift.Int? {
          get
        }
        public var rawValue: Swift.String {
          get
        }
        public var stringValue: Swift.String {
          get
        }
      }
      public init(from decoder: any Swift.Decoder) throws
      public func hash(into hasher: inout Swift.Hasher)
      public static func == (a: Candle.Components.Schemas.TransactionCounterparty, b: Candle.Components.Schemas.TransactionCounterparty) -> Swift.Bool
      public func encode(to encoder: any Swift.Encoder) throws
      public var hashValue: Swift.Int {
        get
      }
    }
    public struct TransactionLocation : Swift.Codable, Swift.Hashable, Swift.Sendable {
      public var countryCode: Swift.String
      public var countrySubdivisionCode: Swift.String
      public var localityName: Swift.String
      public init(countryCode: Swift.String, countrySubdivisionCode: Swift.String, localityName: Swift.String)
      public enum CodingKeys : Swift.String, Swift.CodingKey {
        case countryCode
        case countrySubdivisionCode
        case localityName
        public init?(rawValue: Swift.String)
        public init?(stringValue: Swift.String)
        public init?(intValue: Swift.Int)
        public typealias RawValue = Swift.String
        public var intValue: Swift.Int? {
          get
        }
        public var rawValue: Swift.String {
          get
        }
        public var stringValue: Swift.String {
          get
        }
      }
      public init(from decoder: any Swift.Decoder) throws
      public func hash(into hasher: inout Swift.Hasher)
      public static func == (a: Candle.Components.Schemas.TransactionLocation, b: Candle.Components.Schemas.TransactionLocation) -> Swift.Bool
      public func encode(to encoder: any Swift.Encoder) throws
      public var hashValue: Swift.Int {
        get
      }
    }
    public struct OrderActivityItem : Swift.Codable, Swift.Hashable, Swift.Sendable {
      @frozen public enum ActivityKindPayload : Swift.String, Swift.Codable, Swift.Hashable, Swift.Sendable, Swift.CaseIterable {
        case order
        public init?(rawValue: Swift.String)
        public typealias AllCases = [Candle.Components.Schemas.OrderActivityItem.ActivityKindPayload]
        public typealias RawValue = Swift.String
        nonisolated public static var allCases: [Candle.Components.Schemas.OrderActivityItem.ActivityKindPayload] {
          get
        }
        public var rawValue: Swift.String {
          get
        }
      }
      public var activityKind: Candle.Components.Schemas.OrderActivityItem.ActivityKindPayload
      public var serviceOrderID: Swift.String
      public var orderKind: Candle.Components.Schemas.OrderKind
      public var assetKind: Candle.Components.Schemas.AssetKind
      public var linkedAccountID: Candle.Components.Schemas.LinkedAccountID
      public var dateTime: Swift.String
      public var amount: Swift.Double
      public var details: Candle.Components.Schemas.OrderDetails
      public var symbol: Swift.String
      public var serviceAssetID: Candle.Components.Schemas.ServiceAssetID
      public var serviceAssetHoldingAccountID: Candle.Components.Schemas.ServiceAssetHoldingAccountID
      public var service: Candle.Components.Schemas.SupportedService
      public var name: Swift.String
      public var color: Swift.String
      public var logoURL: Swift.String
      public init(activityKind: Candle.Components.Schemas.OrderActivityItem.ActivityKindPayload, serviceOrderID: Swift.String, orderKind: Candle.Components.Schemas.OrderKind, assetKind: Candle.Components.Schemas.AssetKind, linkedAccountID: Candle.Components.Schemas.LinkedAccountID, dateTime: Swift.String, amount: Swift.Double, details: Candle.Components.Schemas.OrderDetails, symbol: Swift.String, serviceAssetID: Candle.Components.Schemas.ServiceAssetID, serviceAssetHoldingAccountID: Candle.Components.Schemas.ServiceAssetHoldingAccountID, service: Candle.Components.Schemas.SupportedService, name: Swift.String, color: Swift.String, logoURL: Swift.String)
      public enum CodingKeys : Swift.String, Swift.CodingKey {
        case activityKind
        case serviceOrderID
        case orderKind
        case assetKind
        case linkedAccountID
        case dateTime
        case amount
        case details
        case symbol
        case serviceAssetID
        case serviceAssetHoldingAccountID
        case service
        case name
        case color
        case logoURL
        public init?(rawValue: Swift.String)
        public init?(stringValue: Swift.String)
        public init?(intValue: Swift.Int)
        public typealias RawValue = Swift.String
        public var intValue: Swift.Int? {
          get
        }
        public var rawValue: Swift.String {
          get
        }
        public var stringValue: Swift.String {
          get
        }
      }
      public init(from decoder: any Swift.Decoder) throws
      public func hash(into hasher: inout Swift.Hasher)
      public static func == (a: Candle.Components.Schemas.OrderActivityItem, b: Candle.Components.Schemas.OrderActivityItem) -> Swift.Bool
      public func encode(to encoder: any Swift.Encoder) throws
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public enum OrderKind : Swift.String, Swift.Codable, Swift.Hashable, Swift.Sendable, Swift.CaseIterable {
      case reward
      case fiat
      public init?(rawValue: Swift.String)
      public typealias AllCases = [Candle.Components.Schemas.OrderKind]
      public typealias RawValue = Swift.String
      nonisolated public static var allCases: [Candle.Components.Schemas.OrderKind] {
        get
      }
      public var rawValue: Swift.String {
        get
      }
    }
    @frozen public enum OrderDetails : Swift.Codable, Swift.Hashable, Swift.Sendable {
      case OrderEmptyDetails(Candle.Components.Schemas.OrderEmptyDetails)
      case OrderValueDetails(Candle.Components.Schemas.OrderValueDetails)
      public init(from decoder: any Swift.Decoder) throws
      public func encode(to encoder: any Swift.Encoder) throws
      public func hash(into hasher: inout Swift.Hasher)
      public static func == (a: Candle.Components.Schemas.OrderDetails, b: Candle.Components.Schemas.OrderDetails) -> Swift.Bool
      public var hashValue: Swift.Int {
        get
      }
    }
    public struct OrderEmptyDetails : Swift.Codable, Swift.Hashable, Swift.Sendable {
      @frozen public enum StatePayload : Swift.String, Swift.Codable, Swift.Hashable, Swift.Sendable, Swift.CaseIterable {
        case inProgress
        case failure
        public init?(rawValue: Swift.String)
        public typealias AllCases = [Candle.Components.Schemas.OrderEmptyDetails.StatePayload]
        public typealias RawValue = Swift.String
        nonisolated public static var allCases: [Candle.Components.Schemas.OrderEmptyDetails.StatePayload] {
          get
        }
        public var rawValue: Swift.String {
          get
        }
      }
      public var state: Candle.Components.Schemas.OrderEmptyDetails.StatePayload
      public init(state: Candle.Components.Schemas.OrderEmptyDetails.StatePayload)
      public enum CodingKeys : Swift.String, Swift.CodingKey {
        case state
        public init?(rawValue: Swift.String)
        public init?(stringValue: Swift.String)
        public init?(intValue: Swift.Int)
        public typealias RawValue = Swift.String
        public var intValue: Swift.Int? {
          get
        }
        public var rawValue: Swift.String {
          get
        }
        public var stringValue: Swift.String {
          get
        }
      }
      public init(from decoder: any Swift.Decoder) throws
      public func hash(into hasher: inout Swift.Hasher)
      public static func == (a: Candle.Components.Schemas.OrderEmptyDetails, b: Candle.Components.Schemas.OrderEmptyDetails) -> Swift.Bool
      public func encode(to encoder: any Swift.Encoder) throws
      public var hashValue: Swift.Int {
        get
      }
    }
    public struct OrderValueDetails : Swift.Codable, Swift.Hashable, Swift.Sendable {
      @frozen public enum StatePayload : Swift.String, Swift.Codable, Swift.Hashable, Swift.Sendable, Swift.CaseIterable {
        case success
        public init?(rawValue: Swift.String)
        public typealias AllCases = [Candle.Components.Schemas.OrderValueDetails.StatePayload]
        public typealias RawValue = Swift.String
        nonisolated public static var allCases: [Candle.Components.Schemas.OrderValueDetails.StatePayload] {
          get
        }
        public var rawValue: Swift.String {
          get
        }
      }
      public var state: Candle.Components.Schemas.OrderValueDetails.StatePayload
      public var value: Swift.Double
      public init(state: Candle.Components.Schemas.OrderValueDetails.StatePayload, value: Swift.Double)
      public enum CodingKeys : Swift.String, Swift.CodingKey {
        case state
        case value
        public init?(rawValue: Swift.String)
        public init?(stringValue: Swift.String)
        public init?(intValue: Swift.Int)
        public typealias RawValue = Swift.String
        public var intValue: Swift.Int? {
          get
        }
        public var rawValue: Swift.String {
          get
        }
        public var stringValue: Swift.String {
          get
        }
      }
      public init(from decoder: any Swift.Decoder) throws
      public func hash(into hasher: inout Swift.Hasher)
      public static func == (a: Candle.Components.Schemas.OrderValueDetails, b: Candle.Components.Schemas.OrderValueDetails) -> Swift.Bool
      public func encode(to encoder: any Swift.Encoder) throws
      public var hashValue: Swift.Int {
        get
      }
    }
    public typealias ServiceAssetID = Swift.String
    public typealias ServiceAssetHoldingAccountID = Swift.String
  }
  public enum Parameters {
  }
  public enum RequestBodies {
  }
  public enum Responses {
  }
  public enum Headers {
  }
}
public enum Operations {
  public enum PostUsers {
    public static let id: Swift.String
    public struct Input : Swift.Sendable, Swift.Hashable {
      public struct Headers : Swift.Sendable, Swift.Hashable {
        public var anonymousUserId: Swift.String
        public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Candle.Operations.PostUsers.AcceptableContentType>]
        public init(anonymousUserId: Swift.String, accept: [OpenAPIRuntime.AcceptHeaderContentType<Candle.Operations.PostUsers.AcceptableContentType>] = .defaultValues())
        public func hash(into hasher: inout Swift.Hasher)
        public static func == (a: Candle.Operations.PostUsers.Input.Headers, b: Candle.Operations.PostUsers.Input.Headers) -> Swift.Bool
        public var hashValue: Swift.Int {
          get
        }
      }
      public var headers: Candle.Operations.PostUsers.Input.Headers
      @frozen public enum Body : Swift.Sendable, Swift.Hashable {
        case json(Candle.Components.Schemas.AppUser)
        public func hash(into hasher: inout Swift.Hasher)
        public static func == (a: Candle.Operations.PostUsers.Input.Body, b: Candle.Operations.PostUsers.Input.Body) -> Swift.Bool
        public var hashValue: Swift.Int {
          get
        }
      }
      public var body: Candle.Operations.PostUsers.Input.Body
      public init(headers: Candle.Operations.PostUsers.Input.Headers, body: Candle.Operations.PostUsers.Input.Body)
      public func hash(into hasher: inout Swift.Hasher)
      public static func == (a: Candle.Operations.PostUsers.Input, b: Candle.Operations.PostUsers.Input) -> Swift.Bool
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public enum Output : Swift.Sendable, Swift.Hashable {
      public struct Created : Swift.Sendable, Swift.Hashable {
        public struct Headers : Swift.Sendable, Swift.Hashable {
          public var authorization: Swift.String
          public init(authorization: Swift.String)
          public func hash(into hasher: inout Swift.Hasher)
          public static func == (a: Candle.Operations.PostUsers.Output.Created.Headers, b: Candle.Operations.PostUsers.Output.Created.Headers) -> Swift.Bool
          public var hashValue: Swift.Int {
            get
          }
        }
        public var headers: Candle.Operations.PostUsers.Output.Created.Headers
        public init(headers: Candle.Operations.PostUsers.Output.Created.Headers)
        public func hash(into hasher: inout Swift.Hasher)
        public static func == (a: Candle.Operations.PostUsers.Output.Created, b: Candle.Operations.PostUsers.Output.Created) -> Swift.Bool
        public var hashValue: Swift.Int {
          get
        }
      }
      case created(Candle.Operations.PostUsers.Output.Created)
      public var created: Candle.Operations.PostUsers.Output.Created {
        get throws
      }
      public struct Unauthorized : Swift.Sendable, Swift.Hashable {
        public struct Headers : Swift.Sendable, Swift.Hashable {
          @frozen public enum ContentTypePayload : Swift.String, Swift.Codable, Swift.Hashable, Swift.Sendable, Swift.CaseIterable {
            case applicationJson
            public init?(rawValue: Swift.String)
            public typealias AllCases = [Candle.Operations.PostUsers.Output.Unauthorized.Headers.ContentTypePayload]
            public typealias RawValue = Swift.String
            nonisolated public static var allCases: [Candle.Operations.PostUsers.Output.Unauthorized.Headers.ContentTypePayload] {
              get
            }
            public var rawValue: Swift.String {
              get
            }
          }
          public var contentType: Candle.Operations.PostUsers.Output.Unauthorized.Headers.ContentTypePayload?
          public init(contentType: Candle.Operations.PostUsers.Output.Unauthorized.Headers.ContentTypePayload? = nil)
          public func hash(into hasher: inout Swift.Hasher)
          public static func == (a: Candle.Operations.PostUsers.Output.Unauthorized.Headers, b: Candle.Operations.PostUsers.Output.Unauthorized.Headers) -> Swift.Bool
          public var hashValue: Swift.Int {
            get
          }
        }
        public var headers: Candle.Operations.PostUsers.Output.Unauthorized.Headers
        @frozen public enum Body : Swift.Sendable, Swift.Hashable {
          public struct JsonPayload : Swift.Codable, Swift.Hashable, Swift.Sendable {
            @frozen public enum KindPayload : Swift.String, Swift.Codable, Swift.Hashable, Swift.Sendable, Swift.CaseIterable {
              case badAuthorization_app
              public init?(rawValue: Swift.String)
              public typealias AllCases = [Candle.Operations.PostUsers.Output.Unauthorized.Body.JsonPayload.KindPayload]
              public typealias RawValue = Swift.String
              nonisolated public static var allCases: [Candle.Operations.PostUsers.Output.Unauthorized.Body.JsonPayload.KindPayload] {
                get
              }
              public var rawValue: Swift.String {
                get
              }
            }
            public var kind: Candle.Operations.PostUsers.Output.Unauthorized.Body.JsonPayload.KindPayload
            public var message: Swift.String
            public var details: Swift.String?
            public init(kind: Candle.Operations.PostUsers.Output.Unauthorized.Body.JsonPayload.KindPayload, message: Swift.String, details: Swift.String? = nil)
            public enum CodingKeys : Swift.String, Swift.CodingKey {
              case kind
              case message
              case details
              public init?(rawValue: Swift.String)
              public init?(stringValue: Swift.String)
              public init?(intValue: Swift.Int)
              public typealias RawValue = Swift.String
              public var intValue: Swift.Int? {
                get
              }
              public var rawValue: Swift.String {
                get
              }
              public var stringValue: Swift.String {
                get
              }
            }
            public init(from decoder: any Swift.Decoder) throws
            public func hash(into hasher: inout Swift.Hasher)
            public static func == (a: Candle.Operations.PostUsers.Output.Unauthorized.Body.JsonPayload, b: Candle.Operations.PostUsers.Output.Unauthorized.Body.JsonPayload) -> Swift.Bool
            public func encode(to encoder: any Swift.Encoder) throws
            public var hashValue: Swift.Int {
              get
            }
          }
          case json(Candle.Operations.PostUsers.Output.Unauthorized.Body.JsonPayload)
          public var json: Candle.Operations.PostUsers.Output.Unauthorized.Body.JsonPayload {
            get throws
          }
          public func hash(into hasher: inout Swift.Hasher)
          public static func == (a: Candle.Operations.PostUsers.Output.Unauthorized.Body, b: Candle.Operations.PostUsers.Output.Unauthorized.Body) -> Swift.Bool
          public var hashValue: Swift.Int {
            get
          }
        }
        public var body: Candle.Operations.PostUsers.Output.Unauthorized.Body
        public init(headers: Candle.Operations.PostUsers.Output.Unauthorized.Headers = .init(), body: Candle.Operations.PostUsers.Output.Unauthorized.Body)
        public func hash(into hasher: inout Swift.Hasher)
        public static func == (a: Candle.Operations.PostUsers.Output.Unauthorized, b: Candle.Operations.PostUsers.Output.Unauthorized) -> Swift.Bool
        public var hashValue: Swift.Int {
          get
        }
      }
      case unauthorized(Candle.Operations.PostUsers.Output.Unauthorized)
      public var unauthorized: Candle.Operations.PostUsers.Output.Unauthorized {
        get throws
      }
      public struct Forbidden : Swift.Sendable, Swift.Hashable {
        public struct Headers : Swift.Sendable, Swift.Hashable {
          @frozen public enum ContentTypePayload : Swift.String, Swift.Codable, Swift.Hashable, Swift.Sendable, Swift.CaseIterable {
            case applicationJson
            public init?(rawValue: Swift.String)
            public typealias AllCases = [Candle.Operations.PostUsers.Output.Forbidden.Headers.ContentTypePayload]
            public typealias RawValue = Swift.String
            nonisolated public static var allCases: [Candle.Operations.PostUsers.Output.Forbidden.Headers.ContentTypePayload] {
              get
            }
            public var rawValue: Swift.String {
              get
            }
          }
          public var contentType: Candle.Operations.PostUsers.Output.Forbidden.Headers.ContentTypePayload?
          public init(contentType: Candle.Operations.PostUsers.Output.Forbidden.Headers.ContentTypePayload? = nil)
          public func hash(into hasher: inout Swift.Hasher)
          public static func == (a: Candle.Operations.PostUsers.Output.Forbidden.Headers, b: Candle.Operations.PostUsers.Output.Forbidden.Headers) -> Swift.Bool
          public var hashValue: Swift.Int {
            get
          }
        }
        public var headers: Candle.Operations.PostUsers.Output.Forbidden.Headers
        @frozen public enum Body : Swift.Sendable, Swift.Hashable {
          public struct JsonPayload : Swift.Codable, Swift.Hashable, Swift.Sendable {
            @frozen public enum KindPayload : Swift.String, Swift.Codable, Swift.Hashable, Swift.Sendable, Swift.CaseIterable {
              case disabledPendingPayment_app
              public init?(rawValue: Swift.String)
              public typealias AllCases = [Candle.Operations.PostUsers.Output.Forbidden.Body.JsonPayload.KindPayload]
              public typealias RawValue = Swift.String
              nonisolated public static var allCases: [Candle.Operations.PostUsers.Output.Forbidden.Body.JsonPayload.KindPayload] {
                get
              }
              public var rawValue: Swift.String {
                get
              }
            }
            public var kind: Candle.Operations.PostUsers.Output.Forbidden.Body.JsonPayload.KindPayload
            public var message: Swift.String
            public var details: Swift.String?
            public init(kind: Candle.Operations.PostUsers.Output.Forbidden.Body.JsonPayload.KindPayload, message: Swift.String, details: Swift.String? = nil)
            public enum CodingKeys : Swift.String, Swift.CodingKey {
              case kind
              case message
              case details
              public init?(rawValue: Swift.String)
              public init?(stringValue: Swift.String)
              public init?(intValue: Swift.Int)
              public typealias RawValue = Swift.String
              public var intValue: Swift.Int? {
                get
              }
              public var rawValue: Swift.String {
                get
              }
              public var stringValue: Swift.String {
                get
              }
            }
            public init(from decoder: any Swift.Decoder) throws
            public func hash(into hasher: inout Swift.Hasher)
            public static func == (a: Candle.Operations.PostUsers.Output.Forbidden.Body.JsonPayload, b: Candle.Operations.PostUsers.Output.Forbidden.Body.JsonPayload) -> Swift.Bool
            public func encode(to encoder: any Swift.Encoder) throws
            public var hashValue: Swift.Int {
              get
            }
          }
          case json(Candle.Operations.PostUsers.Output.Forbidden.Body.JsonPayload)
          public var json: Candle.Operations.PostUsers.Output.Forbidden.Body.JsonPayload {
            get throws
          }
          public func hash(into hasher: inout Swift.Hasher)
          public static func == (a: Candle.Operations.PostUsers.Output.Forbidden.Body, b: Candle.Operations.PostUsers.Output.Forbidden.Body) -> Swift.Bool
          public var hashValue: Swift.Int {
            get
          }
        }
        public var body: Candle.Operations.PostUsers.Output.Forbidden.Body
        public init(headers: Candle.Operations.PostUsers.Output.Forbidden.Headers = .init(), body: Candle.Operations.PostUsers.Output.Forbidden.Body)
        public func hash(into hasher: inout Swift.Hasher)
        public static func == (a: Candle.Operations.PostUsers.Output.Forbidden, b: Candle.Operations.PostUsers.Output.Forbidden) -> Swift.Bool
        public var hashValue: Swift.Int {
          get
        }
      }
      case forbidden(Candle.Operations.PostUsers.Output.Forbidden)
      public var forbidden: Candle.Operations.PostUsers.Output.Forbidden {
        get throws
      }
      public struct NotFound : Swift.Sendable, Swift.Hashable {
        public struct Headers : Swift.Sendable, Swift.Hashable {
          @frozen public enum ContentTypePayload : Swift.String, Swift.Codable, Swift.Hashable, Swift.Sendable, Swift.CaseIterable {
            case applicationJson
            public init?(rawValue: Swift.String)
            public typealias AllCases = [Candle.Operations.PostUsers.Output.NotFound.Headers.ContentTypePayload]
            public typealias RawValue = Swift.String
            nonisolated public static var allCases: [Candle.Operations.PostUsers.Output.NotFound.Headers.ContentTypePayload] {
              get
            }
            public var rawValue: Swift.String {
              get
            }
          }
          public var contentType: Candle.Operations.PostUsers.Output.NotFound.Headers.ContentTypePayload?
          public init(contentType: Candle.Operations.PostUsers.Output.NotFound.Headers.ContentTypePayload? = nil)
          public func hash(into hasher: inout Swift.Hasher)
          public static func == (a: Candle.Operations.PostUsers.Output.NotFound.Headers, b: Candle.Operations.PostUsers.Output.NotFound.Headers) -> Swift.Bool
          public var hashValue: Swift.Int {
            get
          }
        }
        public var headers: Candle.Operations.PostUsers.Output.NotFound.Headers
        @frozen public enum Body : Swift.Sendable, Swift.Hashable {
          public struct JsonPayload : Swift.Codable, Swift.Hashable, Swift.Sendable {
            @frozen public enum KindPayload : Swift.String, Swift.Codable, Swift.Hashable, Swift.Sendable, Swift.CaseIterable {
              case notFound_app
              public init?(rawValue: Swift.String)
              public typealias AllCases = [Candle.Operations.PostUsers.Output.NotFound.Body.JsonPayload.KindPayload]
              public typealias RawValue = Swift.String
              nonisolated public static var allCases: [Candle.Operations.PostUsers.Output.NotFound.Body.JsonPayload.KindPayload] {
                get
              }
              public var rawValue: Swift.String {
                get
              }
            }
            public var kind: Candle.Operations.PostUsers.Output.NotFound.Body.JsonPayload.KindPayload
            public var message: Swift.String
            public var details: Swift.String?
            public init(kind: Candle.Operations.PostUsers.Output.NotFound.Body.JsonPayload.KindPayload, message: Swift.String, details: Swift.String? = nil)
            public enum CodingKeys : Swift.String, Swift.CodingKey {
              case kind
              case message
              case details
              public init?(rawValue: Swift.String)
              public init?(stringValue: Swift.String)
              public init?(intValue: Swift.Int)
              public typealias RawValue = Swift.String
              public var intValue: Swift.Int? {
                get
              }
              public var rawValue: Swift.String {
                get
              }
              public var stringValue: Swift.String {
                get
              }
            }
            public init(from decoder: any Swift.Decoder) throws
            public func hash(into hasher: inout Swift.Hasher)
            public static func == (a: Candle.Operations.PostUsers.Output.NotFound.Body.JsonPayload, b: Candle.Operations.PostUsers.Output.NotFound.Body.JsonPayload) -> Swift.Bool
            public func encode(to encoder: any Swift.Encoder) throws
            public var hashValue: Swift.Int {
              get
            }
          }
          case json(Candle.Operations.PostUsers.Output.NotFound.Body.JsonPayload)
          public var json: Candle.Operations.PostUsers.Output.NotFound.Body.JsonPayload {
            get throws
          }
          public func hash(into hasher: inout Swift.Hasher)
          public static func == (a: Candle.Operations.PostUsers.Output.NotFound.Body, b: Candle.Operations.PostUsers.Output.NotFound.Body) -> Swift.Bool
          public var hashValue: Swift.Int {
            get
          }
        }
        public var body: Candle.Operations.PostUsers.Output.NotFound.Body
        public init(headers: Candle.Operations.PostUsers.Output.NotFound.Headers = .init(), body: Candle.Operations.PostUsers.Output.NotFound.Body)
        public func hash(into hasher: inout Swift.Hasher)
        public static func == (a: Candle.Operations.PostUsers.Output.NotFound, b: Candle.Operations.PostUsers.Output.NotFound) -> Swift.Bool
        public var hashValue: Swift.Int {
          get
        }
      }
      case notFound(Candle.Operations.PostUsers.Output.NotFound)
      public var notFound: Candle.Operations.PostUsers.Output.NotFound {
        get throws
      }
      public struct UnprocessableContent : Swift.Sendable, Swift.Hashable {
        public struct Headers : Swift.Sendable, Swift.Hashable {
          @frozen public enum ContentTypePayload : Swift.String, Swift.Codable, Swift.Hashable, Swift.Sendable, Swift.CaseIterable {
            case applicationJson
            public init?(rawValue: Swift.String)
            public typealias AllCases = [Candle.Operations.PostUsers.Output.UnprocessableContent.Headers.ContentTypePayload]
            public typealias RawValue = Swift.String
            nonisolated public static var allCases: [Candle.Operations.PostUsers.Output.UnprocessableContent.Headers.ContentTypePayload] {
              get
            }
            public var rawValue: Swift.String {
              get
            }
          }
          public var contentType: Candle.Operations.PostUsers.Output.UnprocessableContent.Headers.ContentTypePayload?
          public init(contentType: Candle.Operations.PostUsers.Output.UnprocessableContent.Headers.ContentTypePayload? = nil)
          public func hash(into hasher: inout Swift.Hasher)
          public static func == (a: Candle.Operations.PostUsers.Output.UnprocessableContent.Headers, b: Candle.Operations.PostUsers.Output.UnprocessableContent.Headers) -> Swift.Bool
          public var hashValue: Swift.Int {
            get
          }
        }
        public var headers: Candle.Operations.PostUsers.Output.UnprocessableContent.Headers
        @frozen public enum Body : Swift.Sendable, Swift.Hashable {
          public struct JsonPayload : Swift.Codable, Swift.Hashable, Swift.Sendable {
            @frozen public enum KindPayload : Swift.String, Swift.Codable, Swift.Hashable, Swift.Sendable, Swift.CaseIterable {
              case schemaInvalid_request
              public init?(rawValue: Swift.String)
              public typealias AllCases = [Candle.Operations.PostUsers.Output.UnprocessableContent.Body.JsonPayload.KindPayload]
              public typealias RawValue = Swift.String
              nonisolated public static var allCases: [Candle.Operations.PostUsers.Output.UnprocessableContent.Body.JsonPayload.KindPayload] {
                get
              }
              public var rawValue: Swift.String {
                get
              }
            }
            public var kind: Candle.Operations.PostUsers.Output.UnprocessableContent.Body.JsonPayload.KindPayload
            public var message: Swift.String
            public var details: Swift.String?
            public init(kind: Candle.Operations.PostUsers.Output.UnprocessableContent.Body.JsonPayload.KindPayload, message: Swift.String, details: Swift.String? = nil)
            public enum CodingKeys : Swift.String, Swift.CodingKey {
              case kind
              case message
              case details
              public init?(rawValue: Swift.String)
              public init?(stringValue: Swift.String)
              public init?(intValue: Swift.Int)
              public typealias RawValue = Swift.String
              public var intValue: Swift.Int? {
                get
              }
              public var rawValue: Swift.String {
                get
              }
              public var stringValue: Swift.String {
                get
              }
            }
            public init(from decoder: any Swift.Decoder) throws
            public func hash(into hasher: inout Swift.Hasher)
            public static func == (a: Candle.Operations.PostUsers.Output.UnprocessableContent.Body.JsonPayload, b: Candle.Operations.PostUsers.Output.UnprocessableContent.Body.JsonPayload) -> Swift.Bool
            public func encode(to encoder: any Swift.Encoder) throws
            public var hashValue: Swift.Int {
              get
            }
          }
          case json(Candle.Operations.PostUsers.Output.UnprocessableContent.Body.JsonPayload)
          public var json: Candle.Operations.PostUsers.Output.UnprocessableContent.Body.JsonPayload {
            get throws
          }
          public func hash(into hasher: inout Swift.Hasher)
          public static func == (a: Candle.Operations.PostUsers.Output.UnprocessableContent.Body, b: Candle.Operations.PostUsers.Output.UnprocessableContent.Body) -> Swift.Bool
          public var hashValue: Swift.Int {
            get
          }
        }
        public var body: Candle.Operations.PostUsers.Output.UnprocessableContent.Body
        public init(headers: Candle.Operations.PostUsers.Output.UnprocessableContent.Headers = .init(), body: Candle.Operations.PostUsers.Output.UnprocessableContent.Body)
        public func hash(into hasher: inout Swift.Hasher)
        public static func == (a: Candle.Operations.PostUsers.Output.UnprocessableContent, b: Candle.Operations.PostUsers.Output.UnprocessableContent) -> Swift.Bool
        public var hashValue: Swift.Int {
          get
        }
      }
      case unprocessableContent(Candle.Operations.PostUsers.Output.UnprocessableContent)
      public var unprocessableContent: Candle.Operations.PostUsers.Output.UnprocessableContent {
        get throws
      }
      public struct TooManyRequests : Swift.Sendable, Swift.Hashable {
        public struct Headers : Swift.Sendable, Swift.Hashable {
          @frozen public enum ContentTypePayload : Swift.String, Swift.Codable, Swift.Hashable, Swift.Sendable, Swift.CaseIterable {
            case applicationJson
            public init?(rawValue: Swift.String)
            public typealias AllCases = [Candle.Operations.PostUsers.Output.TooManyRequests.Headers.ContentTypePayload]
            public typealias RawValue = Swift.String
            nonisolated public static var allCases: [Candle.Operations.PostUsers.Output.TooManyRequests.Headers.ContentTypePayload] {
              get
            }
            public var rawValue: Swift.String {
              get
            }
          }
          public var contentType: Candle.Operations.PostUsers.Output.TooManyRequests.Headers.ContentTypePayload?
          public init(contentType: Candle.Operations.PostUsers.Output.TooManyRequests.Headers.ContentTypePayload? = nil)
          public func hash(into hasher: inout Swift.Hasher)
          public static func == (a: Candle.Operations.PostUsers.Output.TooManyRequests.Headers, b: Candle.Operations.PostUsers.Output.TooManyRequests.Headers) -> Swift.Bool
          public var hashValue: Swift.Int {
            get
          }
        }
        public var headers: Candle.Operations.PostUsers.Output.TooManyRequests.Headers
        @frozen public enum Body : Swift.Sendable, Swift.Hashable {
          public struct JsonPayload : Swift.Codable, Swift.Hashable, Swift.Sendable {
            @frozen public enum KindPayload : Swift.String, Swift.Codable, Swift.Hashable, Swift.Sendable, Swift.CaseIterable {
              case overUserLimit_app
              public init?(rawValue: Swift.String)
              public typealias AllCases = [Candle.Operations.PostUsers.Output.TooManyRequests.Body.JsonPayload.KindPayload]
              public typealias RawValue = Swift.String
              nonisolated public static var allCases: [Candle.Operations.PostUsers.Output.TooManyRequests.Body.JsonPayload.KindPayload] {
                get
              }
              public var rawValue: Swift.String {
                get
              }
            }
            public var kind: Candle.Operations.PostUsers.Output.TooManyRequests.Body.JsonPayload.KindPayload
            public var message: Swift.String
            public var details: Swift.String?
            public init(kind: Candle.Operations.PostUsers.Output.TooManyRequests.Body.JsonPayload.KindPayload, message: Swift.String, details: Swift.String? = nil)
            public enum CodingKeys : Swift.String, Swift.CodingKey {
              case kind
              case message
              case details
              public init?(rawValue: Swift.String)
              public init?(stringValue: Swift.String)
              public init?(intValue: Swift.Int)
              public typealias RawValue = Swift.String
              public var intValue: Swift.Int? {
                get
              }
              public var rawValue: Swift.String {
                get
              }
              public var stringValue: Swift.String {
                get
              }
            }
            public init(from decoder: any Swift.Decoder) throws
            public func hash(into hasher: inout Swift.Hasher)
            public static func == (a: Candle.Operations.PostUsers.Output.TooManyRequests.Body.JsonPayload, b: Candle.Operations.PostUsers.Output.TooManyRequests.Body.JsonPayload) -> Swift.Bool
            public func encode(to encoder: any Swift.Encoder) throws
            public var hashValue: Swift.Int {
              get
            }
          }
          case json(Candle.Operations.PostUsers.Output.TooManyRequests.Body.JsonPayload)
          public var json: Candle.Operations.PostUsers.Output.TooManyRequests.Body.JsonPayload {
            get throws
          }
          public func hash(into hasher: inout Swift.Hasher)
          public static func == (a: Candle.Operations.PostUsers.Output.TooManyRequests.Body, b: Candle.Operations.PostUsers.Output.TooManyRequests.Body) -> Swift.Bool
          public var hashValue: Swift.Int {
            get
          }
        }
        public var body: Candle.Operations.PostUsers.Output.TooManyRequests.Body
        public init(headers: Candle.Operations.PostUsers.Output.TooManyRequests.Headers = .init(), body: Candle.Operations.PostUsers.Output.TooManyRequests.Body)
        public func hash(into hasher: inout Swift.Hasher)
        public static func == (a: Candle.Operations.PostUsers.Output.TooManyRequests, b: Candle.Operations.PostUsers.Output.TooManyRequests) -> Swift.Bool
        public var hashValue: Swift.Int {
          get
        }
      }
      case tooManyRequests(Candle.Operations.PostUsers.Output.TooManyRequests)
      public var tooManyRequests: Candle.Operations.PostUsers.Output.TooManyRequests {
        get throws
      }
      public struct InternalServerError : Swift.Sendable, Swift.Hashable {
        public struct Headers : Swift.Sendable, Swift.Hashable {
          @frozen public enum ContentTypePayload : Swift.String, Swift.Codable, Swift.Hashable, Swift.Sendable, Swift.CaseIterable {
            case applicationJson
            public init?(rawValue: Swift.String)
            public typealias AllCases = [Candle.Operations.PostUsers.Output.InternalServerError.Headers.ContentTypePayload]
            public typealias RawValue = Swift.String
            nonisolated public static var allCases: [Candle.Operations.PostUsers.Output.InternalServerError.Headers.ContentTypePayload] {
              get
            }
            public var rawValue: Swift.String {
              get
            }
          }
          public var contentType: Candle.Operations.PostUsers.Output.InternalServerError.Headers.ContentTypePayload?
          public init(contentType: Candle.Operations.PostUsers.Output.InternalServerError.Headers.ContentTypePayload? = nil)
          public func hash(into hasher: inout Swift.Hasher)
          public static func == (a: Candle.Operations.PostUsers.Output.InternalServerError.Headers, b: Candle.Operations.PostUsers.Output.InternalServerError.Headers) -> Swift.Bool
          public var hashValue: Swift.Int {
            get
          }
        }
        public var headers: Candle.Operations.PostUsers.Output.InternalServerError.Headers
        @frozen public enum Body : Swift.Sendable, Swift.Hashable {
          public struct JsonPayload : Swift.Codable, Swift.Hashable, Swift.Sendable {
            @frozen public enum KindPayload : Swift.String, Swift.Codable, Swift.Hashable, Swift.Sendable, Swift.CaseIterable {
              case unexpected
              public init?(rawValue: Swift.String)
              public typealias AllCases = [Candle.Operations.PostUsers.Output.InternalServerError.Body.JsonPayload.KindPayload]
              public typealias RawValue = Swift.String
              nonisolated public static var allCases: [Candle.Operations.PostUsers.Output.InternalServerError.Body.JsonPayload.KindPayload] {
                get
              }
              public var rawValue: Swift.String {
                get
              }
            }
            public var kind: Candle.Operations.PostUsers.Output.InternalServerError.Body.JsonPayload.KindPayload
            public var message: Swift.String
            public var details: Swift.String?
            public init(kind: Candle.Operations.PostUsers.Output.InternalServerError.Body.JsonPayload.KindPayload, message: Swift.String, details: Swift.String? = nil)
            public enum CodingKeys : Swift.String, Swift.CodingKey {
              case kind
              case message
              case details
              public init?(rawValue: Swift.String)
              public init?(stringValue: Swift.String)
              public init?(intValue: Swift.Int)
              public typealias RawValue = Swift.String
              public var intValue: Swift.Int? {
                get
              }
              public var rawValue: Swift.String {
                get
              }
              public var stringValue: Swift.String {
                get
              }
            }
            public init(from decoder: any Swift.Decoder) throws
            public func hash(into hasher: inout Swift.Hasher)
            public static func == (a: Candle.Operations.PostUsers.Output.InternalServerError.Body.JsonPayload, b: Candle.Operations.PostUsers.Output.InternalServerError.Body.JsonPayload) -> Swift.Bool
            public func encode(to encoder: any Swift.Encoder) throws
            public var hashValue: Swift.Int {
              get
            }
          }
          case json(Candle.Operations.PostUsers.Output.InternalServerError.Body.JsonPayload)
          public var json: Candle.Operations.PostUsers.Output.InternalServerError.Body.JsonPayload {
            get throws
          }
          public func hash(into hasher: inout Swift.Hasher)
          public static func == (a: Candle.Operations.PostUsers.Output.InternalServerError.Body, b: Candle.Operations.PostUsers.Output.InternalServerError.Body) -> Swift.Bool
          public var hashValue: Swift.Int {
            get
          }
        }
        public var body: Candle.Operations.PostUsers.Output.InternalServerError.Body
        public init(headers: Candle.Operations.PostUsers.Output.InternalServerError.Headers = .init(), body: Candle.Operations.PostUsers.Output.InternalServerError.Body)
        public func hash(into hasher: inout Swift.Hasher)
        public static func == (a: Candle.Operations.PostUsers.Output.InternalServerError, b: Candle.Operations.PostUsers.Output.InternalServerError) -> Swift.Bool
        public var hashValue: Swift.Int {
          get
        }
      }
      case internalServerError(Candle.Operations.PostUsers.Output.InternalServerError)
      public var internalServerError: Candle.Operations.PostUsers.Output.InternalServerError {
        get throws
      }
      case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
      public func hash(into hasher: inout Swift.Hasher)
      public static func == (a: Candle.Operations.PostUsers.Output, b: Candle.Operations.PostUsers.Output) -> Swift.Bool
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public enum AcceptableContentType : OpenAPIRuntime.AcceptableProtocol {
      case json
      case other(Swift.String)
      public init?(rawValue: Swift.String)
      public var rawValue: Swift.String {
        get
      }
      public static var allCases: [Candle.Operations.PostUsers.AcceptableContentType] {
        get
      }
      public typealias AllCases = [Candle.Operations.PostUsers.AcceptableContentType]
      public typealias RawValue = Swift.String
    }
  }
  public enum PutUsers {
    public static let id: Swift.String
    public struct Input : Swift.Sendable, Swift.Hashable {
      public struct Headers : Swift.Sendable, Swift.Hashable {
        public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Candle.Operations.PutUsers.AcceptableContentType>]
        public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Candle.Operations.PutUsers.AcceptableContentType>] = .defaultValues())
        public func hash(into hasher: inout Swift.Hasher)
        public static func == (a: Candle.Operations.PutUsers.Input.Headers, b: Candle.Operations.PutUsers.Input.Headers) -> Swift.Bool
        public var hashValue: Swift.Int {
          get
        }
      }
      public var headers: Candle.Operations.PutUsers.Input.Headers
      @frozen public enum Body : Swift.Sendable, Swift.Hashable {
        case json(Candle.Components.Schemas.AppUser)
        public func hash(into hasher: inout Swift.Hasher)
        public static func == (a: Candle.Operations.PutUsers.Input.Body, b: Candle.Operations.PutUsers.Input.Body) -> Swift.Bool
        public var hashValue: Swift.Int {
          get
        }
      }
      public var body: Candle.Operations.PutUsers.Input.Body
      public init(headers: Candle.Operations.PutUsers.Input.Headers = .init(), body: Candle.Operations.PutUsers.Input.Body)
      public func hash(into hasher: inout Swift.Hasher)
      public static func == (a: Candle.Operations.PutUsers.Input, b: Candle.Operations.PutUsers.Input) -> Swift.Bool
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public enum Output : Swift.Sendable, Swift.Hashable {
      public struct NoContent : Swift.Sendable, Swift.Hashable {
        public init()
        public func hash(into hasher: inout Swift.Hasher)
        public static func == (a: Candle.Operations.PutUsers.Output.NoContent, b: Candle.Operations.PutUsers.Output.NoContent) -> Swift.Bool
        public var hashValue: Swift.Int {
          get
        }
      }
      case noContent(Candle.Operations.PutUsers.Output.NoContent)
      public static var noContent: Candle.Operations.PutUsers.Output {
        get
      }
      public var noContent: Candle.Operations.PutUsers.Output.NoContent {
        get throws
      }
      public struct Unauthorized : Swift.Sendable, Swift.Hashable {
        public struct Headers : Swift.Sendable, Swift.Hashable {
          @frozen public enum ContentTypePayload : Swift.String, Swift.Codable, Swift.Hashable, Swift.Sendable, Swift.CaseIterable {
            case applicationJson
            public init?(rawValue: Swift.String)
            public typealias AllCases = [Candle.Operations.PutUsers.Output.Unauthorized.Headers.ContentTypePayload]
            public typealias RawValue = Swift.String
            nonisolated public static var allCases: [Candle.Operations.PutUsers.Output.Unauthorized.Headers.ContentTypePayload] {
              get
            }
            public var rawValue: Swift.String {
              get
            }
          }
          public var contentType: Candle.Operations.PutUsers.Output.Unauthorized.Headers.ContentTypePayload?
          public init(contentType: Candle.Operations.PutUsers.Output.Unauthorized.Headers.ContentTypePayload? = nil)
          public func hash(into hasher: inout Swift.Hasher)
          public static func == (a: Candle.Operations.PutUsers.Output.Unauthorized.Headers, b: Candle.Operations.PutUsers.Output.Unauthorized.Headers) -> Swift.Bool
          public var hashValue: Swift.Int {
            get
          }
        }
        public var headers: Candle.Operations.PutUsers.Output.Unauthorized.Headers
        @frozen public enum Body : Swift.Sendable, Swift.Hashable {
          public struct JsonPayload : Swift.Codable, Swift.Hashable, Swift.Sendable {
            @frozen public enum KindPayload : Swift.String, Swift.Codable, Swift.Hashable, Swift.Sendable, Swift.CaseIterable {
              case badAuthorization_user
              case badAuthorization_app
              public init?(rawValue: Swift.String)
              public typealias AllCases = [Candle.Operations.PutUsers.Output.Unauthorized.Body.JsonPayload.KindPayload]
              public typealias RawValue = Swift.String
              nonisolated public static var allCases: [Candle.Operations.PutUsers.Output.Unauthorized.Body.JsonPayload.KindPayload] {
                get
              }
              public var rawValue: Swift.String {
                get
              }
            }
            public var kind: Candle.Operations.PutUsers.Output.Unauthorized.Body.JsonPayload.KindPayload
            public var message: Swift.String
            public var details: Swift.String?
            public init(kind: Candle.Operations.PutUsers.Output.Unauthorized.Body.JsonPayload.KindPayload, message: Swift.String, details: Swift.String? = nil)
            public enum CodingKeys : Swift.String, Swift.CodingKey {
              case kind
              case message
              case details
              public init?(rawValue: Swift.String)
              public init?(stringValue: Swift.String)
              public init?(intValue: Swift.Int)
              public typealias RawValue = Swift.String
              public var intValue: Swift.Int? {
                get
              }
              public var rawValue: Swift.String {
                get
              }
              public var stringValue: Swift.String {
                get
              }
            }
            public init(from decoder: any Swift.Decoder) throws
            public func hash(into hasher: inout Swift.Hasher)
            public static func == (a: Candle.Operations.PutUsers.Output.Unauthorized.Body.JsonPayload, b: Candle.Operations.PutUsers.Output.Unauthorized.Body.JsonPayload) -> Swift.Bool
            public func encode(to encoder: any Swift.Encoder) throws
            public var hashValue: Swift.Int {
              get
            }
          }
          case json(Candle.Operations.PutUsers.Output.Unauthorized.Body.JsonPayload)
          public var json: Candle.Operations.PutUsers.Output.Unauthorized.Body.JsonPayload {
            get throws
          }
          public func hash(into hasher: inout Swift.Hasher)
          public static func == (a: Candle.Operations.PutUsers.Output.Unauthorized.Body, b: Candle.Operations.PutUsers.Output.Unauthorized.Body) -> Swift.Bool
          public var hashValue: Swift.Int {
            get
          }
        }
        public var body: Candle.Operations.PutUsers.Output.Unauthorized.Body
        public init(headers: Candle.Operations.PutUsers.Output.Unauthorized.Headers = .init(), body: Candle.Operations.PutUsers.Output.Unauthorized.Body)
        public func hash(into hasher: inout Swift.Hasher)
        public static func == (a: Candle.Operations.PutUsers.Output.Unauthorized, b: Candle.Operations.PutUsers.Output.Unauthorized) -> Swift.Bool
        public var hashValue: Swift.Int {
          get
        }
      }
      case unauthorized(Candle.Operations.PutUsers.Output.Unauthorized)
      public var unauthorized: Candle.Operations.PutUsers.Output.Unauthorized {
        get throws
      }
      public struct Forbidden : Swift.Sendable, Swift.Hashable {
        public struct Headers : Swift.Sendable, Swift.Hashable {
          @frozen public enum ContentTypePayload : Swift.String, Swift.Codable, Swift.Hashable, Swift.Sendable, Swift.CaseIterable {
            case applicationJson
            public init?(rawValue: Swift.String)
            public typealias AllCases = [Candle.Operations.PutUsers.Output.Forbidden.Headers.ContentTypePayload]
            public typealias RawValue = Swift.String
            nonisolated public static var allCases: [Candle.Operations.PutUsers.Output.Forbidden.Headers.ContentTypePayload] {
              get
            }
            public var rawValue: Swift.String {
              get
            }
          }
          public var contentType: Candle.Operations.PutUsers.Output.Forbidden.Headers.ContentTypePayload?
          public init(contentType: Candle.Operations.PutUsers.Output.Forbidden.Headers.ContentTypePayload? = nil)
          public func hash(into hasher: inout Swift.Hasher)
          public static func == (a: Candle.Operations.PutUsers.Output.Forbidden.Headers, b: Candle.Operations.PutUsers.Output.Forbidden.Headers) -> Swift.Bool
          public var hashValue: Swift.Int {
            get
          }
        }
        public var headers: Candle.Operations.PutUsers.Output.Forbidden.Headers
        @frozen public enum Body : Swift.Sendable, Swift.Hashable {
          public struct JsonPayload : Swift.Codable, Swift.Hashable, Swift.Sendable {
            @frozen public enum KindPayload : Swift.String, Swift.Codable, Swift.Hashable, Swift.Sendable, Swift.CaseIterable {
              case disabledPendingPayment_app
              public init?(rawValue: Swift.String)
              public typealias AllCases = [Candle.Operations.PutUsers.Output.Forbidden.Body.JsonPayload.KindPayload]
              public typealias RawValue = Swift.String
              nonisolated public static var allCases: [Candle.Operations.PutUsers.Output.Forbidden.Body.JsonPayload.KindPayload] {
                get
              }
              public var rawValue: Swift.String {
                get
              }
            }
            public var kind: Candle.Operations.PutUsers.Output.Forbidden.Body.JsonPayload.KindPayload
            public var message: Swift.String
            public var details: Swift.String?
            public init(kind: Candle.Operations.PutUsers.Output.Forbidden.Body.JsonPayload.KindPayload, message: Swift.String, details: Swift.String? = nil)
            public enum CodingKeys : Swift.String, Swift.CodingKey {
              case kind
              case message
              case details
              public init?(rawValue: Swift.String)
              public init?(stringValue: Swift.String)
              public init?(intValue: Swift.Int)
              public typealias RawValue = Swift.String
              public var intValue: Swift.Int? {
                get
              }
              public var rawValue: Swift.String {
                get
              }
              public var stringValue: Swift.String {
                get
              }
            }
            public init(from decoder: any Swift.Decoder) throws
            public func hash(into hasher: inout Swift.Hasher)
            public static func == (a: Candle.Operations.PutUsers.Output.Forbidden.Body.JsonPayload, b: Candle.Operations.PutUsers.Output.Forbidden.Body.JsonPayload) -> Swift.Bool
            public func encode(to encoder: any Swift.Encoder) throws
            public var hashValue: Swift.Int {
              get
            }
          }
          case json(Candle.Operations.PutUsers.Output.Forbidden.Body.JsonPayload)
          public var json: Candle.Operations.PutUsers.Output.Forbidden.Body.JsonPayload {
            get throws
          }
          public func hash(into hasher: inout Swift.Hasher)
          public static func == (a: Candle.Operations.PutUsers.Output.Forbidden.Body, b: Candle.Operations.PutUsers.Output.Forbidden.Body) -> Swift.Bool
          public var hashValue: Swift.Int {
            get
          }
        }
        public var body: Candle.Operations.PutUsers.Output.Forbidden.Body
        public init(headers: Candle.Operations.PutUsers.Output.Forbidden.Headers = .init(), body: Candle.Operations.PutUsers.Output.Forbidden.Body)
        public func hash(into hasher: inout Swift.Hasher)
        public static func == (a: Candle.Operations.PutUsers.Output.Forbidden, b: Candle.Operations.PutUsers.Output.Forbidden) -> Swift.Bool
        public var hashValue: Swift.Int {
          get
        }
      }
      case forbidden(Candle.Operations.PutUsers.Output.Forbidden)
      public var forbidden: Candle.Operations.PutUsers.Output.Forbidden {
        get throws
      }
      public struct NotFound : Swift.Sendable, Swift.Hashable {
        public struct Headers : Swift.Sendable, Swift.Hashable {
          @frozen public enum ContentTypePayload : Swift.String, Swift.Codable, Swift.Hashable, Swift.Sendable, Swift.CaseIterable {
            case applicationJson
            public init?(rawValue: Swift.String)
            public typealias AllCases = [Candle.Operations.PutUsers.Output.NotFound.Headers.ContentTypePayload]
            public typealias RawValue = Swift.String
            nonisolated public static var allCases: [Candle.Operations.PutUsers.Output.NotFound.Headers.ContentTypePayload] {
              get
            }
            public var rawValue: Swift.String {
              get
            }
          }
          public var contentType: Candle.Operations.PutUsers.Output.NotFound.Headers.ContentTypePayload?
          public init(contentType: Candle.Operations.PutUsers.Output.NotFound.Headers.ContentTypePayload? = nil)
          public func hash(into hasher: inout Swift.Hasher)
          public static func == (a: Candle.Operations.PutUsers.Output.NotFound.Headers, b: Candle.Operations.PutUsers.Output.NotFound.Headers) -> Swift.Bool
          public var hashValue: Swift.Int {
            get
          }
        }
        public var headers: Candle.Operations.PutUsers.Output.NotFound.Headers
        @frozen public enum Body : Swift.Sendable, Swift.Hashable {
          public struct JsonPayload : Swift.Codable, Swift.Hashable, Swift.Sendable {
            @frozen public enum KindPayload : Swift.String, Swift.Codable, Swift.Hashable, Swift.Sendable, Swift.CaseIterable {
              case notFound_user
              case notFound_app
              public init?(rawValue: Swift.String)
              public typealias AllCases = [Candle.Operations.PutUsers.Output.NotFound.Body.JsonPayload.KindPayload]
              public typealias RawValue = Swift.String
              nonisolated public static var allCases: [Candle.Operations.PutUsers.Output.NotFound.Body.JsonPayload.KindPayload] {
                get
              }
              public var rawValue: Swift.String {
                get
              }
            }
            public var kind: Candle.Operations.PutUsers.Output.NotFound.Body.JsonPayload.KindPayload
            public var message: Swift.String
            public var details: Swift.String?
            public init(kind: Candle.Operations.PutUsers.Output.NotFound.Body.JsonPayload.KindPayload, message: Swift.String, details: Swift.String? = nil)
            public enum CodingKeys : Swift.String, Swift.CodingKey {
              case kind
              case message
              case details
              public init?(rawValue: Swift.String)
              public init?(stringValue: Swift.String)
              public init?(intValue: Swift.Int)
              public typealias RawValue = Swift.String
              public var intValue: Swift.Int? {
                get
              }
              public var rawValue: Swift.String {
                get
              }
              public var stringValue: Swift.String {
                get
              }
            }
            public init(from decoder: any Swift.Decoder) throws
            public func hash(into hasher: inout Swift.Hasher)
            public static func == (a: Candle.Operations.PutUsers.Output.NotFound.Body.JsonPayload, b: Candle.Operations.PutUsers.Output.NotFound.Body.JsonPayload) -> Swift.Bool
            public func encode(to encoder: any Swift.Encoder) throws
            public var hashValue: Swift.Int {
              get
            }
          }
          case json(Candle.Operations.PutUsers.Output.NotFound.Body.JsonPayload)
          public var json: Candle.Operations.PutUsers.Output.NotFound.Body.JsonPayload {
            get throws
          }
          public func hash(into hasher: inout Swift.Hasher)
          public static func == (a: Candle.Operations.PutUsers.Output.NotFound.Body, b: Candle.Operations.PutUsers.Output.NotFound.Body) -> Swift.Bool
          public var hashValue: Swift.Int {
            get
          }
        }
        public var body: Candle.Operations.PutUsers.Output.NotFound.Body
        public init(headers: Candle.Operations.PutUsers.Output.NotFound.Headers = .init(), body: Candle.Operations.PutUsers.Output.NotFound.Body)
        public func hash(into hasher: inout Swift.Hasher)
        public static func == (a: Candle.Operations.PutUsers.Output.NotFound, b: Candle.Operations.PutUsers.Output.NotFound) -> Swift.Bool
        public var hashValue: Swift.Int {
          get
        }
      }
      case notFound(Candle.Operations.PutUsers.Output.NotFound)
      public var notFound: Candle.Operations.PutUsers.Output.NotFound {
        get throws
      }
      public struct Conflict : Swift.Sendable, Swift.Hashable {
        public struct Headers : Swift.Sendable, Swift.Hashable {
          @frozen public enum ContentTypePayload : Swift.String, Swift.Codable, Swift.Hashable, Swift.Sendable, Swift.CaseIterable {
            case applicationJson
            public init?(rawValue: Swift.String)
            public typealias AllCases = [Candle.Operations.PutUsers.Output.Conflict.Headers.ContentTypePayload]
            public typealias RawValue = Swift.String
            nonisolated public static var allCases: [Candle.Operations.PutUsers.Output.Conflict.Headers.ContentTypePayload] {
              get
            }
            public var rawValue: Swift.String {
              get
            }
          }
          public var contentType: Candle.Operations.PutUsers.Output.Conflict.Headers.ContentTypePayload?
          public init(contentType: Candle.Operations.PutUsers.Output.Conflict.Headers.ContentTypePayload? = nil)
          public func hash(into hasher: inout Swift.Hasher)
          public static func == (a: Candle.Operations.PutUsers.Output.Conflict.Headers, b: Candle.Operations.PutUsers.Output.Conflict.Headers) -> Swift.Bool
          public var hashValue: Swift.Int {
            get
          }
        }
        public var headers: Candle.Operations.PutUsers.Output.Conflict.Headers
        @frozen public enum Body : Swift.Sendable, Swift.Hashable {
          public struct JsonPayload : Swift.Codable, Swift.Hashable, Swift.Sendable {
            @frozen public enum KindPayload : Swift.String, Swift.Codable, Swift.Hashable, Swift.Sendable, Swift.CaseIterable {
              case different_app
              case different_appUser
              public init?(rawValue: Swift.String)
              public typealias AllCases = [Candle.Operations.PutUsers.Output.Conflict.Body.JsonPayload.KindPayload]
              public typealias RawValue = Swift.String
              nonisolated public static var allCases: [Candle.Operations.PutUsers.Output.Conflict.Body.JsonPayload.KindPayload] {
                get
              }
              public var rawValue: Swift.String {
                get
              }
            }
            public var kind: Candle.Operations.PutUsers.Output.Conflict.Body.JsonPayload.KindPayload
            public var message: Swift.String
            public var details: Swift.String?
            public init(kind: Candle.Operations.PutUsers.Output.Conflict.Body.JsonPayload.KindPayload, message: Swift.String, details: Swift.String? = nil)
            public enum CodingKeys : Swift.String, Swift.CodingKey {
              case kind
              case message
              case details
              public init?(rawValue: Swift.String)
              public init?(stringValue: Swift.String)
              public init?(intValue: Swift.Int)
              public typealias RawValue = Swift.String
              public var intValue: Swift.Int? {
                get
              }
              public var rawValue: Swift.String {
                get
              }
              public var stringValue: Swift.String {
                get
              }
            }
            public init(from decoder: any Swift.Decoder) throws
            public func hash(into hasher: inout Swift.Hasher)
            public static func == (a: Candle.Operations.PutUsers.Output.Conflict.Body.JsonPayload, b: Candle.Operations.PutUsers.Output.Conflict.Body.JsonPayload) -> Swift.Bool
            public func encode(to encoder: any Swift.Encoder) throws
            public var hashValue: Swift.Int {
              get
            }
          }
          case json(Candle.Operations.PutUsers.Output.Conflict.Body.JsonPayload)
          public var json: Candle.Operations.PutUsers.Output.Conflict.Body.JsonPayload {
            get throws
          }
          public func hash(into hasher: inout Swift.Hasher)
          public static func == (a: Candle.Operations.PutUsers.Output.Conflict.Body, b: Candle.Operations.PutUsers.Output.Conflict.Body) -> Swift.Bool
          public var hashValue: Swift.Int {
            get
          }
        }
        public var body: Candle.Operations.PutUsers.Output.Conflict.Body
        public init(headers: Candle.Operations.PutUsers.Output.Conflict.Headers = .init(), body: Candle.Operations.PutUsers.Output.Conflict.Body)
        public func hash(into hasher: inout Swift.Hasher)
        public static func == (a: Candle.Operations.PutUsers.Output.Conflict, b: Candle.Operations.PutUsers.Output.Conflict) -> Swift.Bool
        public var hashValue: Swift.Int {
          get
        }
      }
      case conflict(Candle.Operations.PutUsers.Output.Conflict)
      public var conflict: Candle.Operations.PutUsers.Output.Conflict {
        get throws
      }
      public struct UnprocessableContent : Swift.Sendable, Swift.Hashable {
        public struct Headers : Swift.Sendable, Swift.Hashable {
          @frozen public enum ContentTypePayload : Swift.String, Swift.Codable, Swift.Hashable, Swift.Sendable, Swift.CaseIterable {
            case applicationJson
            public init?(rawValue: Swift.String)
            public typealias AllCases = [Candle.Operations.PutUsers.Output.UnprocessableContent.Headers.ContentTypePayload]
            public typealias RawValue = Swift.String
            nonisolated public static var allCases: [Candle.Operations.PutUsers.Output.UnprocessableContent.Headers.ContentTypePayload] {
              get
            }
            public var rawValue: Swift.String {
              get
            }
          }
          public var contentType: Candle.Operations.PutUsers.Output.UnprocessableContent.Headers.ContentTypePayload?
          public init(contentType: Candle.Operations.PutUsers.Output.UnprocessableContent.Headers.ContentTypePayload? = nil)
          public func hash(into hasher: inout Swift.Hasher)
          public static func == (a: Candle.Operations.PutUsers.Output.UnprocessableContent.Headers, b: Candle.Operations.PutUsers.Output.UnprocessableContent.Headers) -> Swift.Bool
          public var hashValue: Swift.Int {
            get
          }
        }
        public var headers: Candle.Operations.PutUsers.Output.UnprocessableContent.Headers
        @frozen public enum Body : Swift.Sendable, Swift.Hashable {
          public struct JsonPayload : Swift.Codable, Swift.Hashable, Swift.Sendable {
            @frozen public enum KindPayload : Swift.String, Swift.Codable, Swift.Hashable, Swift.Sendable, Swift.CaseIterable {
              case schemaInvalid_request
              public init?(rawValue: Swift.String)
              public typealias AllCases = [Candle.Operations.PutUsers.Output.UnprocessableContent.Body.JsonPayload.KindPayload]
              public typealias RawValue = Swift.String
              nonisolated public static var allCases: [Candle.Operations.PutUsers.Output.UnprocessableContent.Body.JsonPayload.KindPayload] {
                get
              }
              public var rawValue: Swift.String {
                get
              }
            }
            public var kind: Candle.Operations.PutUsers.Output.UnprocessableContent.Body.JsonPayload.KindPayload
            public var message: Swift.String
            public var details: Swift.String?
            public init(kind: Candle.Operations.PutUsers.Output.UnprocessableContent.Body.JsonPayload.KindPayload, message: Swift.String, details: Swift.String? = nil)
            public enum CodingKeys : Swift.String, Swift.CodingKey {
              case kind
              case message
              case details
              public init?(rawValue: Swift.String)
              public init?(stringValue: Swift.String)
              public init?(intValue: Swift.Int)
              public typealias RawValue = Swift.String
              public var intValue: Swift.Int? {
                get
              }
              public var rawValue: Swift.String {
                get
              }
              public var stringValue: Swift.String {
                get
              }
            }
            public init(from decoder: any Swift.Decoder) throws
            public func hash(into hasher: inout Swift.Hasher)
            public static func == (a: Candle.Operations.PutUsers.Output.UnprocessableContent.Body.JsonPayload, b: Candle.Operations.PutUsers.Output.UnprocessableContent.Body.JsonPayload) -> Swift.Bool
            public func encode(to encoder: any Swift.Encoder) throws
            public var hashValue: Swift.Int {
              get
            }
          }
          case json(Candle.Operations.PutUsers.Output.UnprocessableContent.Body.JsonPayload)
          public var json: Candle.Operations.PutUsers.Output.UnprocessableContent.Body.JsonPayload {
            get throws
          }
          public func hash(into hasher: inout Swift.Hasher)
          public static func == (a: Candle.Operations.PutUsers.Output.UnprocessableContent.Body, b: Candle.Operations.PutUsers.Output.UnprocessableContent.Body) -> Swift.Bool
          public var hashValue: Swift.Int {
            get
          }
        }
        public var body: Candle.Operations.PutUsers.Output.UnprocessableContent.Body
        public init(headers: Candle.Operations.PutUsers.Output.UnprocessableContent.Headers = .init(), body: Candle.Operations.PutUsers.Output.UnprocessableContent.Body)
        public func hash(into hasher: inout Swift.Hasher)
        public static func == (a: Candle.Operations.PutUsers.Output.UnprocessableContent, b: Candle.Operations.PutUsers.Output.UnprocessableContent) -> Swift.Bool
        public var hashValue: Swift.Int {
          get
        }
      }
      case unprocessableContent(Candle.Operations.PutUsers.Output.UnprocessableContent)
      public var unprocessableContent: Candle.Operations.PutUsers.Output.UnprocessableContent {
        get throws
      }
      public struct InternalServerError : Swift.Sendable, Swift.Hashable {
        public struct Headers : Swift.Sendable, Swift.Hashable {
          @frozen public enum ContentTypePayload : Swift.String, Swift.Codable, Swift.Hashable, Swift.Sendable, Swift.CaseIterable {
            case applicationJson
            public init?(rawValue: Swift.String)
            public typealias AllCases = [Candle.Operations.PutUsers.Output.InternalServerError.Headers.ContentTypePayload]
            public typealias RawValue = Swift.String
            nonisolated public static var allCases: [Candle.Operations.PutUsers.Output.InternalServerError.Headers.ContentTypePayload] {
              get
            }
            public var rawValue: Swift.String {
              get
            }
          }
          public var contentType: Candle.Operations.PutUsers.Output.InternalServerError.Headers.ContentTypePayload?
          public init(contentType: Candle.Operations.PutUsers.Output.InternalServerError.Headers.ContentTypePayload? = nil)
          public func hash(into hasher: inout Swift.Hasher)
          public static func == (a: Candle.Operations.PutUsers.Output.InternalServerError.Headers, b: Candle.Operations.PutUsers.Output.InternalServerError.Headers) -> Swift.Bool
          public var hashValue: Swift.Int {
            get
          }
        }
        public var headers: Candle.Operations.PutUsers.Output.InternalServerError.Headers
        @frozen public enum Body : Swift.Sendable, Swift.Hashable {
          public struct JsonPayload : Swift.Codable, Swift.Hashable, Swift.Sendable {
            @frozen public enum KindPayload : Swift.String, Swift.Codable, Swift.Hashable, Swift.Sendable, Swift.CaseIterable {
              case unexpected
              public init?(rawValue: Swift.String)
              public typealias AllCases = [Candle.Operations.PutUsers.Output.InternalServerError.Body.JsonPayload.KindPayload]
              public typealias RawValue = Swift.String
              nonisolated public static var allCases: [Candle.Operations.PutUsers.Output.InternalServerError.Body.JsonPayload.KindPayload] {
                get
              }
              public var rawValue: Swift.String {
                get
              }
            }
            public var kind: Candle.Operations.PutUsers.Output.InternalServerError.Body.JsonPayload.KindPayload
            public var message: Swift.String
            public var details: Swift.String?
            public init(kind: Candle.Operations.PutUsers.Output.InternalServerError.Body.JsonPayload.KindPayload, message: Swift.String, details: Swift.String? = nil)
            public enum CodingKeys : Swift.String, Swift.CodingKey {
              case kind
              case message
              case details
              public init?(rawValue: Swift.String)
              public init?(stringValue: Swift.String)
              public init?(intValue: Swift.Int)
              public typealias RawValue = Swift.String
              public var intValue: Swift.Int? {
                get
              }
              public var rawValue: Swift.String {
                get
              }
              public var stringValue: Swift.String {
                get
              }
            }
            public init(from decoder: any Swift.Decoder) throws
            public func hash(into hasher: inout Swift.Hasher)
            public static func == (a: Candle.Operations.PutUsers.Output.InternalServerError.Body.JsonPayload, b: Candle.Operations.PutUsers.Output.InternalServerError.Body.JsonPayload) -> Swift.Bool
            public func encode(to encoder: any Swift.Encoder) throws
            public var hashValue: Swift.Int {
              get
            }
          }
          case json(Candle.Operations.PutUsers.Output.InternalServerError.Body.JsonPayload)
          public var json: Candle.Operations.PutUsers.Output.InternalServerError.Body.JsonPayload {
            get throws
          }
          public func hash(into hasher: inout Swift.Hasher)
          public static func == (a: Candle.Operations.PutUsers.Output.InternalServerError.Body, b: Candle.Operations.PutUsers.Output.InternalServerError.Body) -> Swift.Bool
          public var hashValue: Swift.Int {
            get
          }
        }
        public var body: Candle.Operations.PutUsers.Output.InternalServerError.Body
        public init(headers: Candle.Operations.PutUsers.Output.InternalServerError.Headers = .init(), body: Candle.Operations.PutUsers.Output.InternalServerError.Body)
        public func hash(into hasher: inout Swift.Hasher)
        public static func == (a: Candle.Operations.PutUsers.Output.InternalServerError, b: Candle.Operations.PutUsers.Output.InternalServerError) -> Swift.Bool
        public var hashValue: Swift.Int {
          get
        }
      }
      case internalServerError(Candle.Operations.PutUsers.Output.InternalServerError)
      public var internalServerError: Candle.Operations.PutUsers.Output.InternalServerError {
        get throws
      }
      case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
      public func hash(into hasher: inout Swift.Hasher)
      public static func == (a: Candle.Operations.PutUsers.Output, b: Candle.Operations.PutUsers.Output) -> Swift.Bool
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public enum AcceptableContentType : OpenAPIRuntime.AcceptableProtocol {
      case json
      case other(Swift.String)
      public init?(rawValue: Swift.String)
      public var rawValue: Swift.String {
        get
      }
      public static var allCases: [Candle.Operations.PutUsers.AcceptableContentType] {
        get
      }
      public typealias AllCases = [Candle.Operations.PutUsers.AcceptableContentType]
      public typealias RawValue = Swift.String
    }
  }
  public enum DeleteUsers {
    public static let id: Swift.String
    public struct Input : Swift.Sendable, Swift.Hashable {
      public struct Headers : Swift.Sendable, Swift.Hashable {
        public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Candle.Operations.DeleteUsers.AcceptableContentType>]
        public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Candle.Operations.DeleteUsers.AcceptableContentType>] = .defaultValues())
        public func hash(into hasher: inout Swift.Hasher)
        public static func == (a: Candle.Operations.DeleteUsers.Input.Headers, b: Candle.Operations.DeleteUsers.Input.Headers) -> Swift.Bool
        public var hashValue: Swift.Int {
          get
        }
      }
      public var headers: Candle.Operations.DeleteUsers.Input.Headers
      @frozen public enum Body : Swift.Sendable, Swift.Hashable {
        case json(Candle.Components.Schemas.AppUser)
        public func hash(into hasher: inout Swift.Hasher)
        public static func == (a: Candle.Operations.DeleteUsers.Input.Body, b: Candle.Operations.DeleteUsers.Input.Body) -> Swift.Bool
        public var hashValue: Swift.Int {
          get
        }
      }
      public var body: Candle.Operations.DeleteUsers.Input.Body
      public init(headers: Candle.Operations.DeleteUsers.Input.Headers = .init(), body: Candle.Operations.DeleteUsers.Input.Body)
      public func hash(into hasher: inout Swift.Hasher)
      public static func == (a: Candle.Operations.DeleteUsers.Input, b: Candle.Operations.DeleteUsers.Input) -> Swift.Bool
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public enum Output : Swift.Sendable, Swift.Hashable {
      public struct NoContent : Swift.Sendable, Swift.Hashable {
        public init()
        public func hash(into hasher: inout Swift.Hasher)
        public static func == (a: Candle.Operations.DeleteUsers.Output.NoContent, b: Candle.Operations.DeleteUsers.Output.NoContent) -> Swift.Bool
        public var hashValue: Swift.Int {
          get
        }
      }
      case noContent(Candle.Operations.DeleteUsers.Output.NoContent)
      public static var noContent: Candle.Operations.DeleteUsers.Output {
        get
      }
      public var noContent: Candle.Operations.DeleteUsers.Output.NoContent {
        get throws
      }
      public struct Unauthorized : Swift.Sendable, Swift.Hashable {
        public struct Headers : Swift.Sendable, Swift.Hashable {
          @frozen public enum ContentTypePayload : Swift.String, Swift.Codable, Swift.Hashable, Swift.Sendable, Swift.CaseIterable {
            case applicationJson
            public init?(rawValue: Swift.String)
            public typealias AllCases = [Candle.Operations.DeleteUsers.Output.Unauthorized.Headers.ContentTypePayload]
            public typealias RawValue = Swift.String
            nonisolated public static var allCases: [Candle.Operations.DeleteUsers.Output.Unauthorized.Headers.ContentTypePayload] {
              get
            }
            public var rawValue: Swift.String {
              get
            }
          }
          public var contentType: Candle.Operations.DeleteUsers.Output.Unauthorized.Headers.ContentTypePayload?
          public init(contentType: Candle.Operations.DeleteUsers.Output.Unauthorized.Headers.ContentTypePayload? = nil)
          public func hash(into hasher: inout Swift.Hasher)
          public static func == (a: Candle.Operations.DeleteUsers.Output.Unauthorized.Headers, b: Candle.Operations.DeleteUsers.Output.Unauthorized.Headers) -> Swift.Bool
          public var hashValue: Swift.Int {
            get
          }
        }
        public var headers: Candle.Operations.DeleteUsers.Output.Unauthorized.Headers
        @frozen public enum Body : Swift.Sendable, Swift.Hashable {
          public struct JsonPayload : Swift.Codable, Swift.Hashable, Swift.Sendable {
            @frozen public enum KindPayload : Swift.String, Swift.Codable, Swift.Hashable, Swift.Sendable, Swift.CaseIterable {
              case badAuthorization_user
              case badAuthorization_app
              public init?(rawValue: Swift.String)
              public typealias AllCases = [Candle.Operations.DeleteUsers.Output.Unauthorized.Body.JsonPayload.KindPayload]
              public typealias RawValue = Swift.String
              nonisolated public static var allCases: [Candle.Operations.DeleteUsers.Output.Unauthorized.Body.JsonPayload.KindPayload] {
                get
              }
              public var rawValue: Swift.String {
                get
              }
            }
            public var kind: Candle.Operations.DeleteUsers.Output.Unauthorized.Body.JsonPayload.KindPayload
            public var message: Swift.String
            public var details: Swift.String?
            public init(kind: Candle.Operations.DeleteUsers.Output.Unauthorized.Body.JsonPayload.KindPayload, message: Swift.String, details: Swift.String? = nil)
            public enum CodingKeys : Swift.String, Swift.CodingKey {
              case kind
              case message
              case details
              public init?(rawValue: Swift.String)
              public init?(stringValue: Swift.String)
              public init?(intValue: Swift.Int)
              public typealias RawValue = Swift.String
              public var intValue: Swift.Int? {
                get
              }
              public var rawValue: Swift.String {
                get
              }
              public var stringValue: Swift.String {
                get
              }
            }
            public init(from decoder: any Swift.Decoder) throws
            public func hash(into hasher: inout Swift.Hasher)
            public static func == (a: Candle.Operations.DeleteUsers.Output.Unauthorized.Body.JsonPayload, b: Candle.Operations.DeleteUsers.Output.Unauthorized.Body.JsonPayload) -> Swift.Bool
            public func encode(to encoder: any Swift.Encoder) throws
            public var hashValue: Swift.Int {
              get
            }
          }
          case json(Candle.Operations.DeleteUsers.Output.Unauthorized.Body.JsonPayload)
          public var json: Candle.Operations.DeleteUsers.Output.Unauthorized.Body.JsonPayload {
            get throws
          }
          public func hash(into hasher: inout Swift.Hasher)
          public static func == (a: Candle.Operations.DeleteUsers.Output.Unauthorized.Body, b: Candle.Operations.DeleteUsers.Output.Unauthorized.Body) -> Swift.Bool
          public var hashValue: Swift.Int {
            get
          }
        }
        public var body: Candle.Operations.DeleteUsers.Output.Unauthorized.Body
        public init(headers: Candle.Operations.DeleteUsers.Output.Unauthorized.Headers = .init(), body: Candle.Operations.DeleteUsers.Output.Unauthorized.Body)
        public func hash(into hasher: inout Swift.Hasher)
        public static func == (a: Candle.Operations.DeleteUsers.Output.Unauthorized, b: Candle.Operations.DeleteUsers.Output.Unauthorized) -> Swift.Bool
        public var hashValue: Swift.Int {
          get
        }
      }
      case unauthorized(Candle.Operations.DeleteUsers.Output.Unauthorized)
      public var unauthorized: Candle.Operations.DeleteUsers.Output.Unauthorized {
        get throws
      }
      public struct Forbidden : Swift.Sendable, Swift.Hashable {
        public struct Headers : Swift.Sendable, Swift.Hashable {
          @frozen public enum ContentTypePayload : Swift.String, Swift.Codable, Swift.Hashable, Swift.Sendable, Swift.CaseIterable {
            case applicationJson
            public init?(rawValue: Swift.String)
            public typealias AllCases = [Candle.Operations.DeleteUsers.Output.Forbidden.Headers.ContentTypePayload]
            public typealias RawValue = Swift.String
            nonisolated public static var allCases: [Candle.Operations.DeleteUsers.Output.Forbidden.Headers.ContentTypePayload] {
              get
            }
            public var rawValue: Swift.String {
              get
            }
          }
          public var contentType: Candle.Operations.DeleteUsers.Output.Forbidden.Headers.ContentTypePayload?
          public init(contentType: Candle.Operations.DeleteUsers.Output.Forbidden.Headers.ContentTypePayload? = nil)
          public func hash(into hasher: inout Swift.Hasher)
          public static func == (a: Candle.Operations.DeleteUsers.Output.Forbidden.Headers, b: Candle.Operations.DeleteUsers.Output.Forbidden.Headers) -> Swift.Bool
          public var hashValue: Swift.Int {
            get
          }
        }
        public var headers: Candle.Operations.DeleteUsers.Output.Forbidden.Headers
        @frozen public enum Body : Swift.Sendable, Swift.Hashable {
          public struct JsonPayload : Swift.Codable, Swift.Hashable, Swift.Sendable {
            @frozen public enum KindPayload : Swift.String, Swift.Codable, Swift.Hashable, Swift.Sendable, Swift.CaseIterable {
              case disabledPendingPayment_app
              public init?(rawValue: Swift.String)
              public typealias AllCases = [Candle.Operations.DeleteUsers.Output.Forbidden.Body.JsonPayload.KindPayload]
              public typealias RawValue = Swift.String
              nonisolated public static var allCases: [Candle.Operations.DeleteUsers.Output.Forbidden.Body.JsonPayload.KindPayload] {
                get
              }
              public var rawValue: Swift.String {
                get
              }
            }
            public var kind: Candle.Operations.DeleteUsers.Output.Forbidden.Body.JsonPayload.KindPayload
            public var message: Swift.String
            public var details: Swift.String?
            public init(kind: Candle.Operations.DeleteUsers.Output.Forbidden.Body.JsonPayload.KindPayload, message: Swift.String, details: Swift.String? = nil)
            public enum CodingKeys : Swift.String, Swift.CodingKey {
              case kind
              case message
              case details
              public init?(rawValue: Swift.String)
              public init?(stringValue: Swift.String)
              public init?(intValue: Swift.Int)
              public typealias RawValue = Swift.String
              public var intValue: Swift.Int? {
                get
              }
              public var rawValue: Swift.String {
                get
              }
              public var stringValue: Swift.String {
                get
              }
            }
            public init(from decoder: any Swift.Decoder) throws
            public func hash(into hasher: inout Swift.Hasher)
            public static func == (a: Candle.Operations.DeleteUsers.Output.Forbidden.Body.JsonPayload, b: Candle.Operations.DeleteUsers.Output.Forbidden.Body.JsonPayload) -> Swift.Bool
            public func encode(to encoder: any Swift.Encoder) throws
            public var hashValue: Swift.Int {
              get
            }
          }
          case json(Candle.Operations.DeleteUsers.Output.Forbidden.Body.JsonPayload)
          public var json: Candle.Operations.DeleteUsers.Output.Forbidden.Body.JsonPayload {
            get throws
          }
          public func hash(into hasher: inout Swift.Hasher)
          public static func == (a: Candle.Operations.DeleteUsers.Output.Forbidden.Body, b: Candle.Operations.DeleteUsers.Output.Forbidden.Body) -> Swift.Bool
          public var hashValue: Swift.Int {
            get
          }
        }
        public var body: Candle.Operations.DeleteUsers.Output.Forbidden.Body
        public init(headers: Candle.Operations.DeleteUsers.Output.Forbidden.Headers = .init(), body: Candle.Operations.DeleteUsers.Output.Forbidden.Body)
        public func hash(into hasher: inout Swift.Hasher)
        public static func == (a: Candle.Operations.DeleteUsers.Output.Forbidden, b: Candle.Operations.DeleteUsers.Output.Forbidden) -> Swift.Bool
        public var hashValue: Swift.Int {
          get
        }
      }
      case forbidden(Candle.Operations.DeleteUsers.Output.Forbidden)
      public var forbidden: Candle.Operations.DeleteUsers.Output.Forbidden {
        get throws
      }
      public struct NotFound : Swift.Sendable, Swift.Hashable {
        public struct Headers : Swift.Sendable, Swift.Hashable {
          @frozen public enum ContentTypePayload : Swift.String, Swift.Codable, Swift.Hashable, Swift.Sendable, Swift.CaseIterable {
            case applicationJson
            public init?(rawValue: Swift.String)
            public typealias AllCases = [Candle.Operations.DeleteUsers.Output.NotFound.Headers.ContentTypePayload]
            public typealias RawValue = Swift.String
            nonisolated public static var allCases: [Candle.Operations.DeleteUsers.Output.NotFound.Headers.ContentTypePayload] {
              get
            }
            public var rawValue: Swift.String {
              get
            }
          }
          public var contentType: Candle.Operations.DeleteUsers.Output.NotFound.Headers.ContentTypePayload?
          public init(contentType: Candle.Operations.DeleteUsers.Output.NotFound.Headers.ContentTypePayload? = nil)
          public func hash(into hasher: inout Swift.Hasher)
          public static func == (a: Candle.Operations.DeleteUsers.Output.NotFound.Headers, b: Candle.Operations.DeleteUsers.Output.NotFound.Headers) -> Swift.Bool
          public var hashValue: Swift.Int {
            get
          }
        }
        public var headers: Candle.Operations.DeleteUsers.Output.NotFound.Headers
        @frozen public enum Body : Swift.Sendable, Swift.Hashable {
          public struct JsonPayload : Swift.Codable, Swift.Hashable, Swift.Sendable {
            @frozen public enum KindPayload : Swift.String, Swift.Codable, Swift.Hashable, Swift.Sendable, Swift.CaseIterable {
              case notFound_user
              case notFound_app
              public init?(rawValue: Swift.String)
              public typealias AllCases = [Candle.Operations.DeleteUsers.Output.NotFound.Body.JsonPayload.KindPayload]
              public typealias RawValue = Swift.String
              nonisolated public static var allCases: [Candle.Operations.DeleteUsers.Output.NotFound.Body.JsonPayload.KindPayload] {
                get
              }
              public var rawValue: Swift.String {
                get
              }
            }
            public var kind: Candle.Operations.DeleteUsers.Output.NotFound.Body.JsonPayload.KindPayload
            public var message: Swift.String
            public var details: Swift.String?
            public init(kind: Candle.Operations.DeleteUsers.Output.NotFound.Body.JsonPayload.KindPayload, message: Swift.String, details: Swift.String? = nil)
            public enum CodingKeys : Swift.String, Swift.CodingKey {
              case kind
              case message
              case details
              public init?(rawValue: Swift.String)
              public init?(stringValue: Swift.String)
              public init?(intValue: Swift.Int)
              public typealias RawValue = Swift.String
              public var intValue: Swift.Int? {
                get
              }
              public var rawValue: Swift.String {
                get
              }
              public var stringValue: Swift.String {
                get
              }
            }
            public init(from decoder: any Swift.Decoder) throws
            public func hash(into hasher: inout Swift.Hasher)
            public static func == (a: Candle.Operations.DeleteUsers.Output.NotFound.Body.JsonPayload, b: Candle.Operations.DeleteUsers.Output.NotFound.Body.JsonPayload) -> Swift.Bool
            public func encode(to encoder: any Swift.Encoder) throws
            public var hashValue: Swift.Int {
              get
            }
          }
          case json(Candle.Operations.DeleteUsers.Output.NotFound.Body.JsonPayload)
          public var json: Candle.Operations.DeleteUsers.Output.NotFound.Body.JsonPayload {
            get throws
          }
          public func hash(into hasher: inout Swift.Hasher)
          public static func == (a: Candle.Operations.DeleteUsers.Output.NotFound.Body, b: Candle.Operations.DeleteUsers.Output.NotFound.Body) -> Swift.Bool
          public var hashValue: Swift.Int {
            get
          }
        }
        public var body: Candle.Operations.DeleteUsers.Output.NotFound.Body
        public init(headers: Candle.Operations.DeleteUsers.Output.NotFound.Headers = .init(), body: Candle.Operations.DeleteUsers.Output.NotFound.Body)
        public func hash(into hasher: inout Swift.Hasher)
        public static func == (a: Candle.Operations.DeleteUsers.Output.NotFound, b: Candle.Operations.DeleteUsers.Output.NotFound) -> Swift.Bool
        public var hashValue: Swift.Int {
          get
        }
      }
      case notFound(Candle.Operations.DeleteUsers.Output.NotFound)
      public var notFound: Candle.Operations.DeleteUsers.Output.NotFound {
        get throws
      }
      public struct UnprocessableContent : Swift.Sendable, Swift.Hashable {
        public struct Headers : Swift.Sendable, Swift.Hashable {
          @frozen public enum ContentTypePayload : Swift.String, Swift.Codable, Swift.Hashable, Swift.Sendable, Swift.CaseIterable {
            case applicationJson
            public init?(rawValue: Swift.String)
            public typealias AllCases = [Candle.Operations.DeleteUsers.Output.UnprocessableContent.Headers.ContentTypePayload]
            public typealias RawValue = Swift.String
            nonisolated public static var allCases: [Candle.Operations.DeleteUsers.Output.UnprocessableContent.Headers.ContentTypePayload] {
              get
            }
            public var rawValue: Swift.String {
              get
            }
          }
          public var contentType: Candle.Operations.DeleteUsers.Output.UnprocessableContent.Headers.ContentTypePayload?
          public init(contentType: Candle.Operations.DeleteUsers.Output.UnprocessableContent.Headers.ContentTypePayload? = nil)
          public func hash(into hasher: inout Swift.Hasher)
          public static func == (a: Candle.Operations.DeleteUsers.Output.UnprocessableContent.Headers, b: Candle.Operations.DeleteUsers.Output.UnprocessableContent.Headers) -> Swift.Bool
          public var hashValue: Swift.Int {
            get
          }
        }
        public var headers: Candle.Operations.DeleteUsers.Output.UnprocessableContent.Headers
        @frozen public enum Body : Swift.Sendable, Swift.Hashable {
          public struct JsonPayload : Swift.Codable, Swift.Hashable, Swift.Sendable {
            @frozen public enum KindPayload : Swift.String, Swift.Codable, Swift.Hashable, Swift.Sendable, Swift.CaseIterable {
              case schemaInvalid_request
              public init?(rawValue: Swift.String)
              public typealias AllCases = [Candle.Operations.DeleteUsers.Output.UnprocessableContent.Body.JsonPayload.KindPayload]
              public typealias RawValue = Swift.String
              nonisolated public static var allCases: [Candle.Operations.DeleteUsers.Output.UnprocessableContent.Body.JsonPayload.KindPayload] {
                get
              }
              public var rawValue: Swift.String {
                get
              }
            }
            public var kind: Candle.Operations.DeleteUsers.Output.UnprocessableContent.Body.JsonPayload.KindPayload
            public var message: Swift.String
            public var details: Swift.String?
            public init(kind: Candle.Operations.DeleteUsers.Output.UnprocessableContent.Body.JsonPayload.KindPayload, message: Swift.String, details: Swift.String? = nil)
            public enum CodingKeys : Swift.String, Swift.CodingKey {
              case kind
              case message
              case details
              public init?(rawValue: Swift.String)
              public init?(stringValue: Swift.String)
              public init?(intValue: Swift.Int)
              public typealias RawValue = Swift.String
              public var intValue: Swift.Int? {
                get
              }
              public var rawValue: Swift.String {
                get
              }
              public var stringValue: Swift.String {
                get
              }
            }
            public init(from decoder: any Swift.Decoder) throws
            public func hash(into hasher: inout Swift.Hasher)
            public static func == (a: Candle.Operations.DeleteUsers.Output.UnprocessableContent.Body.JsonPayload, b: Candle.Operations.DeleteUsers.Output.UnprocessableContent.Body.JsonPayload) -> Swift.Bool
            public func encode(to encoder: any Swift.Encoder) throws
            public var hashValue: Swift.Int {
              get
            }
          }
          case json(Candle.Operations.DeleteUsers.Output.UnprocessableContent.Body.JsonPayload)
          public var json: Candle.Operations.DeleteUsers.Output.UnprocessableContent.Body.JsonPayload {
            get throws
          }
          public func hash(into hasher: inout Swift.Hasher)
          public static func == (a: Candle.Operations.DeleteUsers.Output.UnprocessableContent.Body, b: Candle.Operations.DeleteUsers.Output.UnprocessableContent.Body) -> Swift.Bool
          public var hashValue: Swift.Int {
            get
          }
        }
        public var body: Candle.Operations.DeleteUsers.Output.UnprocessableContent.Body
        public init(headers: Candle.Operations.DeleteUsers.Output.UnprocessableContent.Headers = .init(), body: Candle.Operations.DeleteUsers.Output.UnprocessableContent.Body)
        public func hash(into hasher: inout Swift.Hasher)
        public static func == (a: Candle.Operations.DeleteUsers.Output.UnprocessableContent, b: Candle.Operations.DeleteUsers.Output.UnprocessableContent) -> Swift.Bool
        public var hashValue: Swift.Int {
          get
        }
      }
      case unprocessableContent(Candle.Operations.DeleteUsers.Output.UnprocessableContent)
      public var unprocessableContent: Candle.Operations.DeleteUsers.Output.UnprocessableContent {
        get throws
      }
      public struct InternalServerError : Swift.Sendable, Swift.Hashable {
        public struct Headers : Swift.Sendable, Swift.Hashable {
          @frozen public enum ContentTypePayload : Swift.String, Swift.Codable, Swift.Hashable, Swift.Sendable, Swift.CaseIterable {
            case applicationJson
            public init?(rawValue: Swift.String)
            public typealias AllCases = [Candle.Operations.DeleteUsers.Output.InternalServerError.Headers.ContentTypePayload]
            public typealias RawValue = Swift.String
            nonisolated public static var allCases: [Candle.Operations.DeleteUsers.Output.InternalServerError.Headers.ContentTypePayload] {
              get
            }
            public var rawValue: Swift.String {
              get
            }
          }
          public var contentType: Candle.Operations.DeleteUsers.Output.InternalServerError.Headers.ContentTypePayload?
          public init(contentType: Candle.Operations.DeleteUsers.Output.InternalServerError.Headers.ContentTypePayload? = nil)
          public func hash(into hasher: inout Swift.Hasher)
          public static func == (a: Candle.Operations.DeleteUsers.Output.InternalServerError.Headers, b: Candle.Operations.DeleteUsers.Output.InternalServerError.Headers) -> Swift.Bool
          public var hashValue: Swift.Int {
            get
          }
        }
        public var headers: Candle.Operations.DeleteUsers.Output.InternalServerError.Headers
        @frozen public enum Body : Swift.Sendable, Swift.Hashable {
          public struct JsonPayload : Swift.Codable, Swift.Hashable, Swift.Sendable {
            @frozen public enum KindPayload : Swift.String, Swift.Codable, Swift.Hashable, Swift.Sendable, Swift.CaseIterable {
              case unexpected
              public init?(rawValue: Swift.String)
              public typealias AllCases = [Candle.Operations.DeleteUsers.Output.InternalServerError.Body.JsonPayload.KindPayload]
              public typealias RawValue = Swift.String
              nonisolated public static var allCases: [Candle.Operations.DeleteUsers.Output.InternalServerError.Body.JsonPayload.KindPayload] {
                get
              }
              public var rawValue: Swift.String {
                get
              }
            }
            public var kind: Candle.Operations.DeleteUsers.Output.InternalServerError.Body.JsonPayload.KindPayload
            public var message: Swift.String
            public var details: Swift.String?
            public init(kind: Candle.Operations.DeleteUsers.Output.InternalServerError.Body.JsonPayload.KindPayload, message: Swift.String, details: Swift.String? = nil)
            public enum CodingKeys : Swift.String, Swift.CodingKey {
              case kind
              case message
              case details
              public init?(rawValue: Swift.String)
              public init?(stringValue: Swift.String)
              public init?(intValue: Swift.Int)
              public typealias RawValue = Swift.String
              public var intValue: Swift.Int? {
                get
              }
              public var rawValue: Swift.String {
                get
              }
              public var stringValue: Swift.String {
                get
              }
            }
            public init(from decoder: any Swift.Decoder) throws
            public func hash(into hasher: inout Swift.Hasher)
            public static func == (a: Candle.Operations.DeleteUsers.Output.InternalServerError.Body.JsonPayload, b: Candle.Operations.DeleteUsers.Output.InternalServerError.Body.JsonPayload) -> Swift.Bool
            public func encode(to encoder: any Swift.Encoder) throws
            public var hashValue: Swift.Int {
              get
            }
          }
          case json(Candle.Operations.DeleteUsers.Output.InternalServerError.Body.JsonPayload)
          public var json: Candle.Operations.DeleteUsers.Output.InternalServerError.Body.JsonPayload {
            get throws
          }
          public func hash(into hasher: inout Swift.Hasher)
          public static func == (a: Candle.Operations.DeleteUsers.Output.InternalServerError.Body, b: Candle.Operations.DeleteUsers.Output.InternalServerError.Body) -> Swift.Bool
          public var hashValue: Swift.Int {
            get
          }
        }
        public var body: Candle.Operations.DeleteUsers.Output.InternalServerError.Body
        public init(headers: Candle.Operations.DeleteUsers.Output.InternalServerError.Headers = .init(), body: Candle.Operations.DeleteUsers.Output.InternalServerError.Body)
        public func hash(into hasher: inout Swift.Hasher)
        public static func == (a: Candle.Operations.DeleteUsers.Output.InternalServerError, b: Candle.Operations.DeleteUsers.Output.InternalServerError) -> Swift.Bool
        public var hashValue: Swift.Int {
          get
        }
      }
      case internalServerError(Candle.Operations.DeleteUsers.Output.InternalServerError)
      public var internalServerError: Candle.Operations.DeleteUsers.Output.InternalServerError {
        get throws
      }
      case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
      public func hash(into hasher: inout Swift.Hasher)
      public static func == (a: Candle.Operations.DeleteUsers.Output, b: Candle.Operations.DeleteUsers.Output) -> Swift.Bool
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public enum AcceptableContentType : OpenAPIRuntime.AcceptableProtocol {
      case json
      case other(Swift.String)
      public init?(rawValue: Swift.String)
      public var rawValue: Swift.String {
        get
      }
      public static var allCases: [Candle.Operations.DeleteUsers.AcceptableContentType] {
        get
      }
      public typealias AllCases = [Candle.Operations.DeleteUsers.AcceptableContentType]
      public typealias RawValue = Swift.String
    }
  }
  public enum GetLinkedAccounts {
    public static let id: Swift.String
    public struct Input : Swift.Sendable, Swift.Hashable {
      public struct Headers : Swift.Sendable, Swift.Hashable {
        public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Candle.Operations.GetLinkedAccounts.AcceptableContentType>]
        public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Candle.Operations.GetLinkedAccounts.AcceptableContentType>] = .defaultValues())
        public func hash(into hasher: inout Swift.Hasher)
        public static func == (a: Candle.Operations.GetLinkedAccounts.Input.Headers, b: Candle.Operations.GetLinkedAccounts.Input.Headers) -> Swift.Bool
        public var hashValue: Swift.Int {
          get
        }
      }
      public var headers: Candle.Operations.GetLinkedAccounts.Input.Headers
      public init(headers: Candle.Operations.GetLinkedAccounts.Input.Headers = .init())
      public func hash(into hasher: inout Swift.Hasher)
      public static func == (a: Candle.Operations.GetLinkedAccounts.Input, b: Candle.Operations.GetLinkedAccounts.Input) -> Swift.Bool
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public enum Output : Swift.Sendable, Swift.Hashable {
      public struct Ok : Swift.Sendable, Swift.Hashable {
        public struct Headers : Swift.Sendable, Swift.Hashable {
          @frozen public enum ContentTypePayload : Swift.String, Swift.Codable, Swift.Hashable, Swift.Sendable, Swift.CaseIterable {
            case applicationJson
            public init?(rawValue: Swift.String)
            public typealias AllCases = [Candle.Operations.GetLinkedAccounts.Output.Ok.Headers.ContentTypePayload]
            public typealias RawValue = Swift.String
            nonisolated public static var allCases: [Candle.Operations.GetLinkedAccounts.Output.Ok.Headers.ContentTypePayload] {
              get
            }
            public var rawValue: Swift.String {
              get
            }
          }
          public var contentType: Candle.Operations.GetLinkedAccounts.Output.Ok.Headers.ContentTypePayload?
          @frozen public enum ContentEncodingPayload : Swift.String, Swift.Codable, Swift.Hashable, Swift.Sendable, Swift.CaseIterable {
            case gzip
            public init?(rawValue: Swift.String)
            public typealias AllCases = [Candle.Operations.GetLinkedAccounts.Output.Ok.Headers.ContentEncodingPayload]
            public typealias RawValue = Swift.String
            nonisolated public static var allCases: [Candle.Operations.GetLinkedAccounts.Output.Ok.Headers.ContentEncodingPayload] {
              get
            }
            public var rawValue: Swift.String {
              get
            }
          }
          public var contentEncoding: Candle.Operations.GetLinkedAccounts.Output.Ok.Headers.ContentEncodingPayload?
          public init(contentType: Candle.Operations.GetLinkedAccounts.Output.Ok.Headers.ContentTypePayload? = nil, contentEncoding: Candle.Operations.GetLinkedAccounts.Output.Ok.Headers.ContentEncodingPayload? = nil)
          public func hash(into hasher: inout Swift.Hasher)
          public static func == (a: Candle.Operations.GetLinkedAccounts.Output.Ok.Headers, b: Candle.Operations.GetLinkedAccounts.Output.Ok.Headers) -> Swift.Bool
          public var hashValue: Swift.Int {
            get
          }
        }
        public var headers: Candle.Operations.GetLinkedAccounts.Output.Ok.Headers
        @frozen public enum Body : Swift.Sendable, Swift.Hashable {
          case json([Candle.Components.Schemas.LinkedAccount])
          public var json: [Candle.Components.Schemas.LinkedAccount] {
            get throws
          }
          public func hash(into hasher: inout Swift.Hasher)
          public static func == (a: Candle.Operations.GetLinkedAccounts.Output.Ok.Body, b: Candle.Operations.GetLinkedAccounts.Output.Ok.Body) -> Swift.Bool
          public var hashValue: Swift.Int {
            get
          }
        }
        public var body: Candle.Operations.GetLinkedAccounts.Output.Ok.Body
        public init(headers: Candle.Operations.GetLinkedAccounts.Output.Ok.Headers = .init(), body: Candle.Operations.GetLinkedAccounts.Output.Ok.Body)
        public func hash(into hasher: inout Swift.Hasher)
        public static func == (a: Candle.Operations.GetLinkedAccounts.Output.Ok, b: Candle.Operations.GetLinkedAccounts.Output.Ok) -> Swift.Bool
        public var hashValue: Swift.Int {
          get
        }
      }
      case ok(Candle.Operations.GetLinkedAccounts.Output.Ok)
      public var ok: Candle.Operations.GetLinkedAccounts.Output.Ok {
        get throws
      }
      public struct Unauthorized : Swift.Sendable, Swift.Hashable {
        public struct Headers : Swift.Sendable, Swift.Hashable {
          @frozen public enum ContentTypePayload : Swift.String, Swift.Codable, Swift.Hashable, Swift.Sendable, Swift.CaseIterable {
            case applicationJson
            public init?(rawValue: Swift.String)
            public typealias AllCases = [Candle.Operations.GetLinkedAccounts.Output.Unauthorized.Headers.ContentTypePayload]
            public typealias RawValue = Swift.String
            nonisolated public static var allCases: [Candle.Operations.GetLinkedAccounts.Output.Unauthorized.Headers.ContentTypePayload] {
              get
            }
            public var rawValue: Swift.String {
              get
            }
          }
          public var contentType: Candle.Operations.GetLinkedAccounts.Output.Unauthorized.Headers.ContentTypePayload?
          public init(contentType: Candle.Operations.GetLinkedAccounts.Output.Unauthorized.Headers.ContentTypePayload? = nil)
          public func hash(into hasher: inout Swift.Hasher)
          public static func == (a: Candle.Operations.GetLinkedAccounts.Output.Unauthorized.Headers, b: Candle.Operations.GetLinkedAccounts.Output.Unauthorized.Headers) -> Swift.Bool
          public var hashValue: Swift.Int {
            get
          }
        }
        public var headers: Candle.Operations.GetLinkedAccounts.Output.Unauthorized.Headers
        @frozen public enum Body : Swift.Sendable, Swift.Hashable {
          public struct JsonPayload : Swift.Codable, Swift.Hashable, Swift.Sendable {
            @frozen public enum KindPayload : Swift.String, Swift.Codable, Swift.Hashable, Swift.Sendable, Swift.CaseIterable {
              case badAuthorization_user
              public init?(rawValue: Swift.String)
              public typealias AllCases = [Candle.Operations.GetLinkedAccounts.Output.Unauthorized.Body.JsonPayload.KindPayload]
              public typealias RawValue = Swift.String
              nonisolated public static var allCases: [Candle.Operations.GetLinkedAccounts.Output.Unauthorized.Body.JsonPayload.KindPayload] {
                get
              }
              public var rawValue: Swift.String {
                get
              }
            }
            public var kind: Candle.Operations.GetLinkedAccounts.Output.Unauthorized.Body.JsonPayload.KindPayload
            public var message: Swift.String
            public var details: Swift.String?
            public init(kind: Candle.Operations.GetLinkedAccounts.Output.Unauthorized.Body.JsonPayload.KindPayload, message: Swift.String, details: Swift.String? = nil)
            public enum CodingKeys : Swift.String, Swift.CodingKey {
              case kind
              case message
              case details
              public init?(rawValue: Swift.String)
              public init?(stringValue: Swift.String)
              public init?(intValue: Swift.Int)
              public typealias RawValue = Swift.String
              public var intValue: Swift.Int? {
                get
              }
              public var rawValue: Swift.String {
                get
              }
              public var stringValue: Swift.String {
                get
              }
            }
            public init(from decoder: any Swift.Decoder) throws
            public func hash(into hasher: inout Swift.Hasher)
            public static func == (a: Candle.Operations.GetLinkedAccounts.Output.Unauthorized.Body.JsonPayload, b: Candle.Operations.GetLinkedAccounts.Output.Unauthorized.Body.JsonPayload) -> Swift.Bool
            public func encode(to encoder: any Swift.Encoder) throws
            public var hashValue: Swift.Int {
              get
            }
          }
          case json(Candle.Operations.GetLinkedAccounts.Output.Unauthorized.Body.JsonPayload)
          public var json: Candle.Operations.GetLinkedAccounts.Output.Unauthorized.Body.JsonPayload {
            get throws
          }
          public func hash(into hasher: inout Swift.Hasher)
          public static func == (a: Candle.Operations.GetLinkedAccounts.Output.Unauthorized.Body, b: Candle.Operations.GetLinkedAccounts.Output.Unauthorized.Body) -> Swift.Bool
          public var hashValue: Swift.Int {
            get
          }
        }
        public var body: Candle.Operations.GetLinkedAccounts.Output.Unauthorized.Body
        public init(headers: Candle.Operations.GetLinkedAccounts.Output.Unauthorized.Headers = .init(), body: Candle.Operations.GetLinkedAccounts.Output.Unauthorized.Body)
        public func hash(into hasher: inout Swift.Hasher)
        public static func == (a: Candle.Operations.GetLinkedAccounts.Output.Unauthorized, b: Candle.Operations.GetLinkedAccounts.Output.Unauthorized) -> Swift.Bool
        public var hashValue: Swift.Int {
          get
        }
      }
      case unauthorized(Candle.Operations.GetLinkedAccounts.Output.Unauthorized)
      public var unauthorized: Candle.Operations.GetLinkedAccounts.Output.Unauthorized {
        get throws
      }
      public struct NotFound : Swift.Sendable, Swift.Hashable {
        public struct Headers : Swift.Sendable, Swift.Hashable {
          @frozen public enum ContentTypePayload : Swift.String, Swift.Codable, Swift.Hashable, Swift.Sendable, Swift.CaseIterable {
            case applicationJson
            public init?(rawValue: Swift.String)
            public typealias AllCases = [Candle.Operations.GetLinkedAccounts.Output.NotFound.Headers.ContentTypePayload]
            public typealias RawValue = Swift.String
            nonisolated public static var allCases: [Candle.Operations.GetLinkedAccounts.Output.NotFound.Headers.ContentTypePayload] {
              get
            }
            public var rawValue: Swift.String {
              get
            }
          }
          public var contentType: Candle.Operations.GetLinkedAccounts.Output.NotFound.Headers.ContentTypePayload?
          public init(contentType: Candle.Operations.GetLinkedAccounts.Output.NotFound.Headers.ContentTypePayload? = nil)
          public func hash(into hasher: inout Swift.Hasher)
          public static func == (a: Candle.Operations.GetLinkedAccounts.Output.NotFound.Headers, b: Candle.Operations.GetLinkedAccounts.Output.NotFound.Headers) -> Swift.Bool
          public var hashValue: Swift.Int {
            get
          }
        }
        public var headers: Candle.Operations.GetLinkedAccounts.Output.NotFound.Headers
        @frozen public enum Body : Swift.Sendable, Swift.Hashable {
          public struct JsonPayload : Swift.Codable, Swift.Hashable, Swift.Sendable {
            @frozen public enum KindPayload : Swift.String, Swift.Codable, Swift.Hashable, Swift.Sendable, Swift.CaseIterable {
              case notFound_user
              public init?(rawValue: Swift.String)
              public typealias AllCases = [Candle.Operations.GetLinkedAccounts.Output.NotFound.Body.JsonPayload.KindPayload]
              public typealias RawValue = Swift.String
              nonisolated public static var allCases: [Candle.Operations.GetLinkedAccounts.Output.NotFound.Body.JsonPayload.KindPayload] {
                get
              }
              public var rawValue: Swift.String {
                get
              }
            }
            public var kind: Candle.Operations.GetLinkedAccounts.Output.NotFound.Body.JsonPayload.KindPayload
            public var message: Swift.String
            public var details: Swift.String?
            public init(kind: Candle.Operations.GetLinkedAccounts.Output.NotFound.Body.JsonPayload.KindPayload, message: Swift.String, details: Swift.String? = nil)
            public enum CodingKeys : Swift.String, Swift.CodingKey {
              case kind
              case message
              case details
              public init?(rawValue: Swift.String)
              public init?(stringValue: Swift.String)
              public init?(intValue: Swift.Int)
              public typealias RawValue = Swift.String
              public var intValue: Swift.Int? {
                get
              }
              public var rawValue: Swift.String {
                get
              }
              public var stringValue: Swift.String {
                get
              }
            }
            public init(from decoder: any Swift.Decoder) throws
            public func hash(into hasher: inout Swift.Hasher)
            public static func == (a: Candle.Operations.GetLinkedAccounts.Output.NotFound.Body.JsonPayload, b: Candle.Operations.GetLinkedAccounts.Output.NotFound.Body.JsonPayload) -> Swift.Bool
            public func encode(to encoder: any Swift.Encoder) throws
            public var hashValue: Swift.Int {
              get
            }
          }
          case json(Candle.Operations.GetLinkedAccounts.Output.NotFound.Body.JsonPayload)
          public var json: Candle.Operations.GetLinkedAccounts.Output.NotFound.Body.JsonPayload {
            get throws
          }
          public func hash(into hasher: inout Swift.Hasher)
          public static func == (a: Candle.Operations.GetLinkedAccounts.Output.NotFound.Body, b: Candle.Operations.GetLinkedAccounts.Output.NotFound.Body) -> Swift.Bool
          public var hashValue: Swift.Int {
            get
          }
        }
        public var body: Candle.Operations.GetLinkedAccounts.Output.NotFound.Body
        public init(headers: Candle.Operations.GetLinkedAccounts.Output.NotFound.Headers = .init(), body: Candle.Operations.GetLinkedAccounts.Output.NotFound.Body)
        public func hash(into hasher: inout Swift.Hasher)
        public static func == (a: Candle.Operations.GetLinkedAccounts.Output.NotFound, b: Candle.Operations.GetLinkedAccounts.Output.NotFound) -> Swift.Bool
        public var hashValue: Swift.Int {
          get
        }
      }
      case notFound(Candle.Operations.GetLinkedAccounts.Output.NotFound)
      public var notFound: Candle.Operations.GetLinkedAccounts.Output.NotFound {
        get throws
      }
      public struct UnprocessableContent : Swift.Sendable, Swift.Hashable {
        public struct Headers : Swift.Sendable, Swift.Hashable {
          @frozen public enum ContentTypePayload : Swift.String, Swift.Codable, Swift.Hashable, Swift.Sendable, Swift.CaseIterable {
            case applicationJson
            public init?(rawValue: Swift.String)
            public typealias AllCases = [Candle.Operations.GetLinkedAccounts.Output.UnprocessableContent.Headers.ContentTypePayload]
            public typealias RawValue = Swift.String
            nonisolated public static var allCases: [Candle.Operations.GetLinkedAccounts.Output.UnprocessableContent.Headers.ContentTypePayload] {
              get
            }
            public var rawValue: Swift.String {
              get
            }
          }
          public var contentType: Candle.Operations.GetLinkedAccounts.Output.UnprocessableContent.Headers.ContentTypePayload?
          public init(contentType: Candle.Operations.GetLinkedAccounts.Output.UnprocessableContent.Headers.ContentTypePayload? = nil)
          public func hash(into hasher: inout Swift.Hasher)
          public static func == (a: Candle.Operations.GetLinkedAccounts.Output.UnprocessableContent.Headers, b: Candle.Operations.GetLinkedAccounts.Output.UnprocessableContent.Headers) -> Swift.Bool
          public var hashValue: Swift.Int {
            get
          }
        }
        public var headers: Candle.Operations.GetLinkedAccounts.Output.UnprocessableContent.Headers
        @frozen public enum Body : Swift.Sendable, Swift.Hashable {
          public struct JsonPayload : Swift.Codable, Swift.Hashable, Swift.Sendable {
            @frozen public enum KindPayload : Swift.String, Swift.Codable, Swift.Hashable, Swift.Sendable, Swift.CaseIterable {
              case schemaInvalid_request
              public init?(rawValue: Swift.String)
              public typealias AllCases = [Candle.Operations.GetLinkedAccounts.Output.UnprocessableContent.Body.JsonPayload.KindPayload]
              public typealias RawValue = Swift.String
              nonisolated public static var allCases: [Candle.Operations.GetLinkedAccounts.Output.UnprocessableContent.Body.JsonPayload.KindPayload] {
                get
              }
              public var rawValue: Swift.String {
                get
              }
            }
            public var kind: Candle.Operations.GetLinkedAccounts.Output.UnprocessableContent.Body.JsonPayload.KindPayload
            public var message: Swift.String
            public var details: Swift.String?
            public init(kind: Candle.Operations.GetLinkedAccounts.Output.UnprocessableContent.Body.JsonPayload.KindPayload, message: Swift.String, details: Swift.String? = nil)
            public enum CodingKeys : Swift.String, Swift.CodingKey {
              case kind
              case message
              case details
              public init?(rawValue: Swift.String)
              public init?(stringValue: Swift.String)
              public init?(intValue: Swift.Int)
              public typealias RawValue = Swift.String
              public var intValue: Swift.Int? {
                get
              }
              public var rawValue: Swift.String {
                get
              }
              public var stringValue: Swift.String {
                get
              }
            }
            public init(from decoder: any Swift.Decoder) throws
            public func hash(into hasher: inout Swift.Hasher)
            public static func == (a: Candle.Operations.GetLinkedAccounts.Output.UnprocessableContent.Body.JsonPayload, b: Candle.Operations.GetLinkedAccounts.Output.UnprocessableContent.Body.JsonPayload) -> Swift.Bool
            public func encode(to encoder: any Swift.Encoder) throws
            public var hashValue: Swift.Int {
              get
            }
          }
          case json(Candle.Operations.GetLinkedAccounts.Output.UnprocessableContent.Body.JsonPayload)
          public var json: Candle.Operations.GetLinkedAccounts.Output.UnprocessableContent.Body.JsonPayload {
            get throws
          }
          public func hash(into hasher: inout Swift.Hasher)
          public static func == (a: Candle.Operations.GetLinkedAccounts.Output.UnprocessableContent.Body, b: Candle.Operations.GetLinkedAccounts.Output.UnprocessableContent.Body) -> Swift.Bool
          public var hashValue: Swift.Int {
            get
          }
        }
        public var body: Candle.Operations.GetLinkedAccounts.Output.UnprocessableContent.Body
        public init(headers: Candle.Operations.GetLinkedAccounts.Output.UnprocessableContent.Headers = .init(), body: Candle.Operations.GetLinkedAccounts.Output.UnprocessableContent.Body)
        public func hash(into hasher: inout Swift.Hasher)
        public static func == (a: Candle.Operations.GetLinkedAccounts.Output.UnprocessableContent, b: Candle.Operations.GetLinkedAccounts.Output.UnprocessableContent) -> Swift.Bool
        public var hashValue: Swift.Int {
          get
        }
      }
      case unprocessableContent(Candle.Operations.GetLinkedAccounts.Output.UnprocessableContent)
      public var unprocessableContent: Candle.Operations.GetLinkedAccounts.Output.UnprocessableContent {
        get throws
      }
      public struct InternalServerError : Swift.Sendable, Swift.Hashable {
        public struct Headers : Swift.Sendable, Swift.Hashable {
          @frozen public enum ContentTypePayload : Swift.String, Swift.Codable, Swift.Hashable, Swift.Sendable, Swift.CaseIterable {
            case applicationJson
            public init?(rawValue: Swift.String)
            public typealias AllCases = [Candle.Operations.GetLinkedAccounts.Output.InternalServerError.Headers.ContentTypePayload]
            public typealias RawValue = Swift.String
            nonisolated public static var allCases: [Candle.Operations.GetLinkedAccounts.Output.InternalServerError.Headers.ContentTypePayload] {
              get
            }
            public var rawValue: Swift.String {
              get
            }
          }
          public var contentType: Candle.Operations.GetLinkedAccounts.Output.InternalServerError.Headers.ContentTypePayload?
          public init(contentType: Candle.Operations.GetLinkedAccounts.Output.InternalServerError.Headers.ContentTypePayload? = nil)
          public func hash(into hasher: inout Swift.Hasher)
          public static func == (a: Candle.Operations.GetLinkedAccounts.Output.InternalServerError.Headers, b: Candle.Operations.GetLinkedAccounts.Output.InternalServerError.Headers) -> Swift.Bool
          public var hashValue: Swift.Int {
            get
          }
        }
        public var headers: Candle.Operations.GetLinkedAccounts.Output.InternalServerError.Headers
        @frozen public enum Body : Swift.Sendable, Swift.Hashable {
          public struct JsonPayload : Swift.Codable, Swift.Hashable, Swift.Sendable {
            @frozen public enum KindPayload : Swift.String, Swift.Codable, Swift.Hashable, Swift.Sendable, Swift.CaseIterable {
              case unexpected
              public init?(rawValue: Swift.String)
              public typealias AllCases = [Candle.Operations.GetLinkedAccounts.Output.InternalServerError.Body.JsonPayload.KindPayload]
              public typealias RawValue = Swift.String
              nonisolated public static var allCases: [Candle.Operations.GetLinkedAccounts.Output.InternalServerError.Body.JsonPayload.KindPayload] {
                get
              }
              public var rawValue: Swift.String {
                get
              }
            }
            public var kind: Candle.Operations.GetLinkedAccounts.Output.InternalServerError.Body.JsonPayload.KindPayload
            public var message: Swift.String
            public var details: Swift.String?
            public init(kind: Candle.Operations.GetLinkedAccounts.Output.InternalServerError.Body.JsonPayload.KindPayload, message: Swift.String, details: Swift.String? = nil)
            public enum CodingKeys : Swift.String, Swift.CodingKey {
              case kind
              case message
              case details
              public init?(rawValue: Swift.String)
              public init?(stringValue: Swift.String)
              public init?(intValue: Swift.Int)
              public typealias RawValue = Swift.String
              public var intValue: Swift.Int? {
                get
              }
              public var rawValue: Swift.String {
                get
              }
              public var stringValue: Swift.String {
                get
              }
            }
            public init(from decoder: any Swift.Decoder) throws
            public func hash(into hasher: inout Swift.Hasher)
            public static func == (a: Candle.Operations.GetLinkedAccounts.Output.InternalServerError.Body.JsonPayload, b: Candle.Operations.GetLinkedAccounts.Output.InternalServerError.Body.JsonPayload) -> Swift.Bool
            public func encode(to encoder: any Swift.Encoder) throws
            public var hashValue: Swift.Int {
              get
            }
          }
          case json(Candle.Operations.GetLinkedAccounts.Output.InternalServerError.Body.JsonPayload)
          public var json: Candle.Operations.GetLinkedAccounts.Output.InternalServerError.Body.JsonPayload {
            get throws
          }
          public func hash(into hasher: inout Swift.Hasher)
          public static func == (a: Candle.Operations.GetLinkedAccounts.Output.InternalServerError.Body, b: Candle.Operations.GetLinkedAccounts.Output.InternalServerError.Body) -> Swift.Bool
          public var hashValue: Swift.Int {
            get
          }
        }
        public var body: Candle.Operations.GetLinkedAccounts.Output.InternalServerError.Body
        public init(headers: Candle.Operations.GetLinkedAccounts.Output.InternalServerError.Headers = .init(), body: Candle.Operations.GetLinkedAccounts.Output.InternalServerError.Body)
        public func hash(into hasher: inout Swift.Hasher)
        public static func == (a: Candle.Operations.GetLinkedAccounts.Output.InternalServerError, b: Candle.Operations.GetLinkedAccounts.Output.InternalServerError) -> Swift.Bool
        public var hashValue: Swift.Int {
          get
        }
      }
      case internalServerError(Candle.Operations.GetLinkedAccounts.Output.InternalServerError)
      public var internalServerError: Candle.Operations.GetLinkedAccounts.Output.InternalServerError {
        get throws
      }
      case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
      public func hash(into hasher: inout Swift.Hasher)
      public static func == (a: Candle.Operations.GetLinkedAccounts.Output, b: Candle.Operations.GetLinkedAccounts.Output) -> Swift.Bool
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public enum AcceptableContentType : OpenAPIRuntime.AcceptableProtocol {
      case json
      case other(Swift.String)
      public init?(rawValue: Swift.String)
      public var rawValue: Swift.String {
        get
      }
      public static var allCases: [Candle.Operations.GetLinkedAccounts.AcceptableContentType] {
        get
      }
      public typealias AllCases = [Candle.Operations.GetLinkedAccounts.AcceptableContentType]
      public typealias RawValue = Swift.String
    }
  }
  public enum PostLinkedAccounts {
    public static let id: Swift.String
    public struct Input : Swift.Sendable, Swift.Hashable {
      public struct Headers : Swift.Sendable, Swift.Hashable {
        public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Candle.Operations.PostLinkedAccounts.AcceptableContentType>]
        public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Candle.Operations.PostLinkedAccounts.AcceptableContentType>] = .defaultValues())
        public func hash(into hasher: inout Swift.Hasher)
        public static func == (a: Candle.Operations.PostLinkedAccounts.Input.Headers, b: Candle.Operations.PostLinkedAccounts.Input.Headers) -> Swift.Bool
        public var hashValue: Swift.Int {
          get
        }
      }
      public var headers: Candle.Operations.PostLinkedAccounts.Input.Headers
      @frozen public enum Body : Swift.Sendable, Swift.Hashable {
        case json(Candle.Components.Schemas.LinkRequest)
        public func hash(into hasher: inout Swift.Hasher)
        public static func == (a: Candle.Operations.PostLinkedAccounts.Input.Body, b: Candle.Operations.PostLinkedAccounts.Input.Body) -> Swift.Bool
        public var hashValue: Swift.Int {
          get
        }
      }
      public var body: Candle.Operations.PostLinkedAccounts.Input.Body
      public init(headers: Candle.Operations.PostLinkedAccounts.Input.Headers = .init(), body: Candle.Operations.PostLinkedAccounts.Input.Body)
      public func hash(into hasher: inout Swift.Hasher)
      public static func == (a: Candle.Operations.PostLinkedAccounts.Input, b: Candle.Operations.PostLinkedAccounts.Input) -> Swift.Bool
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public enum Output : Swift.Sendable, Swift.Hashable {
      public struct Created : Swift.Sendable, Swift.Hashable {
        public struct Headers : Swift.Sendable, Swift.Hashable {
          @frozen public enum ContentTypePayload : Swift.String, Swift.Codable, Swift.Hashable, Swift.Sendable, Swift.CaseIterable {
            case applicationJson
            public init?(rawValue: Swift.String)
            public typealias AllCases = [Candle.Operations.PostLinkedAccounts.Output.Created.Headers.ContentTypePayload]
            public typealias RawValue = Swift.String
            nonisolated public static var allCases: [Candle.Operations.PostLinkedAccounts.Output.Created.Headers.ContentTypePayload] {
              get
            }
            public var rawValue: Swift.String {
              get
            }
          }
          public var contentType: Candle.Operations.PostLinkedAccounts.Output.Created.Headers.ContentTypePayload?
          public init(contentType: Candle.Operations.PostLinkedAccounts.Output.Created.Headers.ContentTypePayload? = nil)
          public func hash(into hasher: inout Swift.Hasher)
          public static func == (a: Candle.Operations.PostLinkedAccounts.Output.Created.Headers, b: Candle.Operations.PostLinkedAccounts.Output.Created.Headers) -> Swift.Bool
          public var hashValue: Swift.Int {
            get
          }
        }
        public var headers: Candle.Operations.PostLinkedAccounts.Output.Created.Headers
        @frozen public enum Body : Swift.Sendable, Swift.Hashable {
          case json(Candle.Components.Schemas.LinkedAccount)
          public var json: Candle.Components.Schemas.LinkedAccount {
            get throws
          }
          public func hash(into hasher: inout Swift.Hasher)
          public static func == (a: Candle.Operations.PostLinkedAccounts.Output.Created.Body, b: Candle.Operations.PostLinkedAccounts.Output.Created.Body) -> Swift.Bool
          public var hashValue: Swift.Int {
            get
          }
        }
        public var body: Candle.Operations.PostLinkedAccounts.Output.Created.Body
        public init(headers: Candle.Operations.PostLinkedAccounts.Output.Created.Headers = .init(), body: Candle.Operations.PostLinkedAccounts.Output.Created.Body)
        public func hash(into hasher: inout Swift.Hasher)
        public static func == (a: Candle.Operations.PostLinkedAccounts.Output.Created, b: Candle.Operations.PostLinkedAccounts.Output.Created) -> Swift.Bool
        public var hashValue: Swift.Int {
          get
        }
      }
      case created(Candle.Operations.PostLinkedAccounts.Output.Created)
      public var created: Candle.Operations.PostLinkedAccounts.Output.Created {
        get throws
      }
      public struct Unauthorized : Swift.Sendable, Swift.Hashable {
        public struct Headers : Swift.Sendable, Swift.Hashable {
          @frozen public enum ContentTypePayload : Swift.String, Swift.Codable, Swift.Hashable, Swift.Sendable, Swift.CaseIterable {
            case applicationJson
            public init?(rawValue: Swift.String)
            public typealias AllCases = [Candle.Operations.PostLinkedAccounts.Output.Unauthorized.Headers.ContentTypePayload]
            public typealias RawValue = Swift.String
            nonisolated public static var allCases: [Candle.Operations.PostLinkedAccounts.Output.Unauthorized.Headers.ContentTypePayload] {
              get
            }
            public var rawValue: Swift.String {
              get
            }
          }
          public var contentType: Candle.Operations.PostLinkedAccounts.Output.Unauthorized.Headers.ContentTypePayload?
          public init(contentType: Candle.Operations.PostLinkedAccounts.Output.Unauthorized.Headers.ContentTypePayload? = nil)
          public func hash(into hasher: inout Swift.Hasher)
          public static func == (a: Candle.Operations.PostLinkedAccounts.Output.Unauthorized.Headers, b: Candle.Operations.PostLinkedAccounts.Output.Unauthorized.Headers) -> Swift.Bool
          public var hashValue: Swift.Int {
            get
          }
        }
        public var headers: Candle.Operations.PostLinkedAccounts.Output.Unauthorized.Headers
        @frozen public enum Body : Swift.Sendable, Swift.Hashable {
          public struct JsonPayload : Swift.Codable, Swift.Hashable, Swift.Sendable {
            @frozen public enum KindPayload : Swift.String, Swift.Codable, Swift.Hashable, Swift.Sendable, Swift.CaseIterable {
              case badAuthorization_credentialsIncorrect
              case badAuthorization_accountLocked
              case badAuthorization_mfaExpired
              case badAuthorization_mfaResponseIncorrect
              case badAuthorization_user
              public init?(rawValue: Swift.String)
              public typealias AllCases = [Candle.Operations.PostLinkedAccounts.Output.Unauthorized.Body.JsonPayload.KindPayload]
              public typealias RawValue = Swift.String
              nonisolated public static var allCases: [Candle.Operations.PostLinkedAccounts.Output.Unauthorized.Body.JsonPayload.KindPayload] {
                get
              }
              public var rawValue: Swift.String {
                get
              }
            }
            public var kind: Candle.Operations.PostLinkedAccounts.Output.Unauthorized.Body.JsonPayload.KindPayload
            public var message: Swift.String
            public var details: Swift.String?
            public init(kind: Candle.Operations.PostLinkedAccounts.Output.Unauthorized.Body.JsonPayload.KindPayload, message: Swift.String, details: Swift.String? = nil)
            public enum CodingKeys : Swift.String, Swift.CodingKey {
              case kind
              case message
              case details
              public init?(rawValue: Swift.String)
              public init?(stringValue: Swift.String)
              public init?(intValue: Swift.Int)
              public typealias RawValue = Swift.String
              public var intValue: Swift.Int? {
                get
              }
              public var rawValue: Swift.String {
                get
              }
              public var stringValue: Swift.String {
                get
              }
            }
            public init(from decoder: any Swift.Decoder) throws
            public func hash(into hasher: inout Swift.Hasher)
            public static func == (a: Candle.Operations.PostLinkedAccounts.Output.Unauthorized.Body.JsonPayload, b: Candle.Operations.PostLinkedAccounts.Output.Unauthorized.Body.JsonPayload) -> Swift.Bool
            public func encode(to encoder: any Swift.Encoder) throws
            public var hashValue: Swift.Int {
              get
            }
          }
          case json(Candle.Operations.PostLinkedAccounts.Output.Unauthorized.Body.JsonPayload)
          public var json: Candle.Operations.PostLinkedAccounts.Output.Unauthorized.Body.JsonPayload {
            get throws
          }
          public func hash(into hasher: inout Swift.Hasher)
          public static func == (a: Candle.Operations.PostLinkedAccounts.Output.Unauthorized.Body, b: Candle.Operations.PostLinkedAccounts.Output.Unauthorized.Body) -> Swift.Bool
          public var hashValue: Swift.Int {
            get
          }
        }
        public var body: Candle.Operations.PostLinkedAccounts.Output.Unauthorized.Body
        public init(headers: Candle.Operations.PostLinkedAccounts.Output.Unauthorized.Headers = .init(), body: Candle.Operations.PostLinkedAccounts.Output.Unauthorized.Body)
        public func hash(into hasher: inout Swift.Hasher)
        public static func == (a: Candle.Operations.PostLinkedAccounts.Output.Unauthorized, b: Candle.Operations.PostLinkedAccounts.Output.Unauthorized) -> Swift.Bool
        public var hashValue: Swift.Int {
          get
        }
      }
      case unauthorized(Candle.Operations.PostLinkedAccounts.Output.Unauthorized)
      public var unauthorized: Candle.Operations.PostLinkedAccounts.Output.Unauthorized {
        get throws
      }
      public struct NotFound : Swift.Sendable, Swift.Hashable {
        public struct Headers : Swift.Sendable, Swift.Hashable {
          @frozen public enum ContentTypePayload : Swift.String, Swift.Codable, Swift.Hashable, Swift.Sendable, Swift.CaseIterable {
            case applicationJson
            public init?(rawValue: Swift.String)
            public typealias AllCases = [Candle.Operations.PostLinkedAccounts.Output.NotFound.Headers.ContentTypePayload]
            public typealias RawValue = Swift.String
            nonisolated public static var allCases: [Candle.Operations.PostLinkedAccounts.Output.NotFound.Headers.ContentTypePayload] {
              get
            }
            public var rawValue: Swift.String {
              get
            }
          }
          public var contentType: Candle.Operations.PostLinkedAccounts.Output.NotFound.Headers.ContentTypePayload?
          public init(contentType: Candle.Operations.PostLinkedAccounts.Output.NotFound.Headers.ContentTypePayload? = nil)
          public func hash(into hasher: inout Swift.Hasher)
          public static func == (a: Candle.Operations.PostLinkedAccounts.Output.NotFound.Headers, b: Candle.Operations.PostLinkedAccounts.Output.NotFound.Headers) -> Swift.Bool
          public var hashValue: Swift.Int {
            get
          }
        }
        public var headers: Candle.Operations.PostLinkedAccounts.Output.NotFound.Headers
        @frozen public enum Body : Swift.Sendable, Swift.Hashable {
          public struct JsonPayload : Swift.Codable, Swift.Hashable, Swift.Sendable {
            @frozen public enum KindPayload : Swift.String, Swift.Codable, Swift.Hashable, Swift.Sendable, Swift.CaseIterable {
              case notFound_user
              public init?(rawValue: Swift.String)
              public typealias AllCases = [Candle.Operations.PostLinkedAccounts.Output.NotFound.Body.JsonPayload.KindPayload]
              public typealias RawValue = Swift.String
              nonisolated public static var allCases: [Candle.Operations.PostLinkedAccounts.Output.NotFound.Body.JsonPayload.KindPayload] {
                get
              }
              public var rawValue: Swift.String {
                get
              }
            }
            public var kind: Candle.Operations.PostLinkedAccounts.Output.NotFound.Body.JsonPayload.KindPayload
            public var message: Swift.String
            public var details: Swift.String?
            public init(kind: Candle.Operations.PostLinkedAccounts.Output.NotFound.Body.JsonPayload.KindPayload, message: Swift.String, details: Swift.String? = nil)
            public enum CodingKeys : Swift.String, Swift.CodingKey {
              case kind
              case message
              case details
              public init?(rawValue: Swift.String)
              public init?(stringValue: Swift.String)
              public init?(intValue: Swift.Int)
              public typealias RawValue = Swift.String
              public var intValue: Swift.Int? {
                get
              }
              public var rawValue: Swift.String {
                get
              }
              public var stringValue: Swift.String {
                get
              }
            }
            public init(from decoder: any Swift.Decoder) throws
            public func hash(into hasher: inout Swift.Hasher)
            public static func == (a: Candle.Operations.PostLinkedAccounts.Output.NotFound.Body.JsonPayload, b: Candle.Operations.PostLinkedAccounts.Output.NotFound.Body.JsonPayload) -> Swift.Bool
            public func encode(to encoder: any Swift.Encoder) throws
            public var hashValue: Swift.Int {
              get
            }
          }
          case json(Candle.Operations.PostLinkedAccounts.Output.NotFound.Body.JsonPayload)
          public var json: Candle.Operations.PostLinkedAccounts.Output.NotFound.Body.JsonPayload {
            get throws
          }
          public func hash(into hasher: inout Swift.Hasher)
          public static func == (a: Candle.Operations.PostLinkedAccounts.Output.NotFound.Body, b: Candle.Operations.PostLinkedAccounts.Output.NotFound.Body) -> Swift.Bool
          public var hashValue: Swift.Int {
            get
          }
        }
        public var body: Candle.Operations.PostLinkedAccounts.Output.NotFound.Body
        public init(headers: Candle.Operations.PostLinkedAccounts.Output.NotFound.Headers = .init(), body: Candle.Operations.PostLinkedAccounts.Output.NotFound.Body)
        public func hash(into hasher: inout Swift.Hasher)
        public static func == (a: Candle.Operations.PostLinkedAccounts.Output.NotFound, b: Candle.Operations.PostLinkedAccounts.Output.NotFound) -> Swift.Bool
        public var hashValue: Swift.Int {
          get
        }
      }
      case notFound(Candle.Operations.PostLinkedAccounts.Output.NotFound)
      public var notFound: Candle.Operations.PostLinkedAccounts.Output.NotFound {
        get throws
      }
      public struct Conflict : Swift.Sendable, Swift.Hashable {
        public struct Headers : Swift.Sendable, Swift.Hashable {
          @frozen public enum ContentTypePayload : Swift.String, Swift.Codable, Swift.Hashable, Swift.Sendable, Swift.CaseIterable {
            case applicationJson
            public init?(rawValue: Swift.String)
            public typealias AllCases = [Candle.Operations.PostLinkedAccounts.Output.Conflict.Headers.ContentTypePayload]
            public typealias RawValue = Swift.String
            nonisolated public static var allCases: [Candle.Operations.PostLinkedAccounts.Output.Conflict.Headers.ContentTypePayload] {
              get
            }
            public var rawValue: Swift.String {
              get
            }
          }
          public var contentType: Candle.Operations.PostLinkedAccounts.Output.Conflict.Headers.ContentTypePayload?
          public init(contentType: Candle.Operations.PostLinkedAccounts.Output.Conflict.Headers.ContentTypePayload? = nil)
          public func hash(into hasher: inout Swift.Hasher)
          public static func == (a: Candle.Operations.PostLinkedAccounts.Output.Conflict.Headers, b: Candle.Operations.PostLinkedAccounts.Output.Conflict.Headers) -> Swift.Bool
          public var hashValue: Swift.Int {
            get
          }
        }
        public var headers: Candle.Operations.PostLinkedAccounts.Output.Conflict.Headers
        @frozen public enum Body : Swift.Sendable, Swift.Hashable {
          public struct JsonPayload : Swift.Codable, Swift.Hashable, Swift.Sendable {
            @frozen public enum KindPayload : Swift.String, Swift.Codable, Swift.Hashable, Swift.Sendable, Swift.CaseIterable {
              case alreadyLinked_account
              public init?(rawValue: Swift.String)
              public typealias AllCases = [Candle.Operations.PostLinkedAccounts.Output.Conflict.Body.JsonPayload.KindPayload]
              public typealias RawValue = Swift.String
              nonisolated public static var allCases: [Candle.Operations.PostLinkedAccounts.Output.Conflict.Body.JsonPayload.KindPayload] {
                get
              }
              public var rawValue: Swift.String {
                get
              }
            }
            public var kind: Candle.Operations.PostLinkedAccounts.Output.Conflict.Body.JsonPayload.KindPayload
            public var message: Swift.String
            public var details: Swift.String?
            public init(kind: Candle.Operations.PostLinkedAccounts.Output.Conflict.Body.JsonPayload.KindPayload, message: Swift.String, details: Swift.String? = nil)
            public enum CodingKeys : Swift.String, Swift.CodingKey {
              case kind
              case message
              case details
              public init?(rawValue: Swift.String)
              public init?(stringValue: Swift.String)
              public init?(intValue: Swift.Int)
              public typealias RawValue = Swift.String
              public var intValue: Swift.Int? {
                get
              }
              public var rawValue: Swift.String {
                get
              }
              public var stringValue: Swift.String {
                get
              }
            }
            public init(from decoder: any Swift.Decoder) throws
            public func hash(into hasher: inout Swift.Hasher)
            public static func == (a: Candle.Operations.PostLinkedAccounts.Output.Conflict.Body.JsonPayload, b: Candle.Operations.PostLinkedAccounts.Output.Conflict.Body.JsonPayload) -> Swift.Bool
            public func encode(to encoder: any Swift.Encoder) throws
            public var hashValue: Swift.Int {
              get
            }
          }
          case json(Candle.Operations.PostLinkedAccounts.Output.Conflict.Body.JsonPayload)
          public var json: Candle.Operations.PostLinkedAccounts.Output.Conflict.Body.JsonPayload {
            get throws
          }
          public func hash(into hasher: inout Swift.Hasher)
          public static func == (a: Candle.Operations.PostLinkedAccounts.Output.Conflict.Body, b: Candle.Operations.PostLinkedAccounts.Output.Conflict.Body) -> Swift.Bool
          public var hashValue: Swift.Int {
            get
          }
        }
        public var body: Candle.Operations.PostLinkedAccounts.Output.Conflict.Body
        public init(headers: Candle.Operations.PostLinkedAccounts.Output.Conflict.Headers = .init(), body: Candle.Operations.PostLinkedAccounts.Output.Conflict.Body)
        public func hash(into hasher: inout Swift.Hasher)
        public static func == (a: Candle.Operations.PostLinkedAccounts.Output.Conflict, b: Candle.Operations.PostLinkedAccounts.Output.Conflict) -> Swift.Bool
        public var hashValue: Swift.Int {
          get
        }
      }
      case conflict(Candle.Operations.PostLinkedAccounts.Output.Conflict)
      public var conflict: Candle.Operations.PostLinkedAccounts.Output.Conflict {
        get throws
      }
      public struct UnprocessableContent : Swift.Sendable, Swift.Hashable {
        public struct Headers : Swift.Sendable, Swift.Hashable {
          @frozen public enum ContentTypePayload : Swift.String, Swift.Codable, Swift.Hashable, Swift.Sendable, Swift.CaseIterable {
            case applicationJson
            public init?(rawValue: Swift.String)
            public typealias AllCases = [Candle.Operations.PostLinkedAccounts.Output.UnprocessableContent.Headers.ContentTypePayload]
            public typealias RawValue = Swift.String
            nonisolated public static var allCases: [Candle.Operations.PostLinkedAccounts.Output.UnprocessableContent.Headers.ContentTypePayload] {
              get
            }
            public var rawValue: Swift.String {
              get
            }
          }
          public var contentType: Candle.Operations.PostLinkedAccounts.Output.UnprocessableContent.Headers.ContentTypePayload?
          public init(contentType: Candle.Operations.PostLinkedAccounts.Output.UnprocessableContent.Headers.ContentTypePayload? = nil)
          public func hash(into hasher: inout Swift.Hasher)
          public static func == (a: Candle.Operations.PostLinkedAccounts.Output.UnprocessableContent.Headers, b: Candle.Operations.PostLinkedAccounts.Output.UnprocessableContent.Headers) -> Swift.Bool
          public var hashValue: Swift.Int {
            get
          }
        }
        public var headers: Candle.Operations.PostLinkedAccounts.Output.UnprocessableContent.Headers
        @frozen public enum Body : Swift.Sendable, Swift.Hashable {
          public struct JsonPayload : Swift.Codable, Swift.Hashable, Swift.Sendable {
            @frozen public enum KindPayload : Swift.String, Swift.Codable, Swift.Hashable, Swift.Sendable, Swift.CaseIterable {
              case schemaInvalid_request
              public init?(rawValue: Swift.String)
              public typealias AllCases = [Candle.Operations.PostLinkedAccounts.Output.UnprocessableContent.Body.JsonPayload.KindPayload]
              public typealias RawValue = Swift.String
              nonisolated public static var allCases: [Candle.Operations.PostLinkedAccounts.Output.UnprocessableContent.Body.JsonPayload.KindPayload] {
                get
              }
              public var rawValue: Swift.String {
                get
              }
            }
            public var kind: Candle.Operations.PostLinkedAccounts.Output.UnprocessableContent.Body.JsonPayload.KindPayload
            public var message: Swift.String
            public var details: Swift.String?
            public init(kind: Candle.Operations.PostLinkedAccounts.Output.UnprocessableContent.Body.JsonPayload.KindPayload, message: Swift.String, details: Swift.String? = nil)
            public enum CodingKeys : Swift.String, Swift.CodingKey {
              case kind
              case message
              case details
              public init?(rawValue: Swift.String)
              public init?(stringValue: Swift.String)
              public init?(intValue: Swift.Int)
              public typealias RawValue = Swift.String
              public var intValue: Swift.Int? {
                get
              }
              public var rawValue: Swift.String {
                get
              }
              public var stringValue: Swift.String {
                get
              }
            }
            public init(from decoder: any Swift.Decoder) throws
            public func hash(into hasher: inout Swift.Hasher)
            public static func == (a: Candle.Operations.PostLinkedAccounts.Output.UnprocessableContent.Body.JsonPayload, b: Candle.Operations.PostLinkedAccounts.Output.UnprocessableContent.Body.JsonPayload) -> Swift.Bool
            public func encode(to encoder: any Swift.Encoder) throws
            public var hashValue: Swift.Int {
              get
            }
          }
          case json(Candle.Operations.PostLinkedAccounts.Output.UnprocessableContent.Body.JsonPayload)
          public var json: Candle.Operations.PostLinkedAccounts.Output.UnprocessableContent.Body.JsonPayload {
            get throws
          }
          public func hash(into hasher: inout Swift.Hasher)
          public static func == (a: Candle.Operations.PostLinkedAccounts.Output.UnprocessableContent.Body, b: Candle.Operations.PostLinkedAccounts.Output.UnprocessableContent.Body) -> Swift.Bool
          public var hashValue: Swift.Int {
            get
          }
        }
        public var body: Candle.Operations.PostLinkedAccounts.Output.UnprocessableContent.Body
        public init(headers: Candle.Operations.PostLinkedAccounts.Output.UnprocessableContent.Headers = .init(), body: Candle.Operations.PostLinkedAccounts.Output.UnprocessableContent.Body)
        public func hash(into hasher: inout Swift.Hasher)
        public static func == (a: Candle.Operations.PostLinkedAccounts.Output.UnprocessableContent, b: Candle.Operations.PostLinkedAccounts.Output.UnprocessableContent) -> Swift.Bool
        public var hashValue: Swift.Int {
          get
        }
      }
      case unprocessableContent(Candle.Operations.PostLinkedAccounts.Output.UnprocessableContent)
      public var unprocessableContent: Candle.Operations.PostLinkedAccounts.Output.UnprocessableContent {
        get throws
      }
      public struct PreconditionRequired : Swift.Sendable, Swift.Hashable {
        public struct Headers : Swift.Sendable, Swift.Hashable {
          @frozen public enum ContentTypePayload : Swift.String, Swift.Codable, Swift.Hashable, Swift.Sendable, Swift.CaseIterable {
            case applicationJson
            public init?(rawValue: Swift.String)
            public typealias AllCases = [Candle.Operations.PostLinkedAccounts.Output.PreconditionRequired.Headers.ContentTypePayload]
            public typealias RawValue = Swift.String
            nonisolated public static var allCases: [Candle.Operations.PostLinkedAccounts.Output.PreconditionRequired.Headers.ContentTypePayload] {
              get
            }
            public var rawValue: Swift.String {
              get
            }
          }
          public var contentType: Candle.Operations.PostLinkedAccounts.Output.PreconditionRequired.Headers.ContentTypePayload?
          public init(contentType: Candle.Operations.PostLinkedAccounts.Output.PreconditionRequired.Headers.ContentTypePayload? = nil)
          public func hash(into hasher: inout Swift.Hasher)
          public static func == (a: Candle.Operations.PostLinkedAccounts.Output.PreconditionRequired.Headers, b: Candle.Operations.PostLinkedAccounts.Output.PreconditionRequired.Headers) -> Swift.Bool
          public var hashValue: Swift.Int {
            get
          }
        }
        public var headers: Candle.Operations.PostLinkedAccounts.Output.PreconditionRequired.Headers
        @frozen public enum Body : Swift.Sendable, Swift.Hashable {
          case json(Candle.Components.Schemas.MFARequest)
          public var json: Candle.Components.Schemas.MFARequest {
            get throws
          }
          public func hash(into hasher: inout Swift.Hasher)
          public static func == (a: Candle.Operations.PostLinkedAccounts.Output.PreconditionRequired.Body, b: Candle.Operations.PostLinkedAccounts.Output.PreconditionRequired.Body) -> Swift.Bool
          public var hashValue: Swift.Int {
            get
          }
        }
        public var body: Candle.Operations.PostLinkedAccounts.Output.PreconditionRequired.Body
        public init(headers: Candle.Operations.PostLinkedAccounts.Output.PreconditionRequired.Headers = .init(), body: Candle.Operations.PostLinkedAccounts.Output.PreconditionRequired.Body)
        public func hash(into hasher: inout Swift.Hasher)
        public static func == (a: Candle.Operations.PostLinkedAccounts.Output.PreconditionRequired, b: Candle.Operations.PostLinkedAccounts.Output.PreconditionRequired) -> Swift.Bool
        public var hashValue: Swift.Int {
          get
        }
      }
      case preconditionRequired(Candle.Operations.PostLinkedAccounts.Output.PreconditionRequired)
      public var preconditionRequired: Candle.Operations.PostLinkedAccounts.Output.PreconditionRequired {
        get throws
      }
      public struct InternalServerError : Swift.Sendable, Swift.Hashable {
        public struct Headers : Swift.Sendable, Swift.Hashable {
          @frozen public enum ContentTypePayload : Swift.String, Swift.Codable, Swift.Hashable, Swift.Sendable, Swift.CaseIterable {
            case applicationJson
            public init?(rawValue: Swift.String)
            public typealias AllCases = [Candle.Operations.PostLinkedAccounts.Output.InternalServerError.Headers.ContentTypePayload]
            public typealias RawValue = Swift.String
            nonisolated public static var allCases: [Candle.Operations.PostLinkedAccounts.Output.InternalServerError.Headers.ContentTypePayload] {
              get
            }
            public var rawValue: Swift.String {
              get
            }
          }
          public var contentType: Candle.Operations.PostLinkedAccounts.Output.InternalServerError.Headers.ContentTypePayload?
          public init(contentType: Candle.Operations.PostLinkedAccounts.Output.InternalServerError.Headers.ContentTypePayload? = nil)
          public func hash(into hasher: inout Swift.Hasher)
          public static func == (a: Candle.Operations.PostLinkedAccounts.Output.InternalServerError.Headers, b: Candle.Operations.PostLinkedAccounts.Output.InternalServerError.Headers) -> Swift.Bool
          public var hashValue: Swift.Int {
            get
          }
        }
        public var headers: Candle.Operations.PostLinkedAccounts.Output.InternalServerError.Headers
        @frozen public enum Body : Swift.Sendable, Swift.Hashable {
          public struct JsonPayload : Swift.Codable, Swift.Hashable, Swift.Sendable {
            @frozen public enum KindPayload : Swift.String, Swift.Codable, Swift.Hashable, Swift.Sendable, Swift.CaseIterable {
              case unexpected
              public init?(rawValue: Swift.String)
              public typealias AllCases = [Candle.Operations.PostLinkedAccounts.Output.InternalServerError.Body.JsonPayload.KindPayload]
              public typealias RawValue = Swift.String
              nonisolated public static var allCases: [Candle.Operations.PostLinkedAccounts.Output.InternalServerError.Body.JsonPayload.KindPayload] {
                get
              }
              public var rawValue: Swift.String {
                get
              }
            }
            public var kind: Candle.Operations.PostLinkedAccounts.Output.InternalServerError.Body.JsonPayload.KindPayload
            public var message: Swift.String
            public var details: Swift.String?
            public init(kind: Candle.Operations.PostLinkedAccounts.Output.InternalServerError.Body.JsonPayload.KindPayload, message: Swift.String, details: Swift.String? = nil)
            public enum CodingKeys : Swift.String, Swift.CodingKey {
              case kind
              case message
              case details
              public init?(rawValue: Swift.String)
              public init?(stringValue: Swift.String)
              public init?(intValue: Swift.Int)
              public typealias RawValue = Swift.String
              public var intValue: Swift.Int? {
                get
              }
              public var rawValue: Swift.String {
                get
              }
              public var stringValue: Swift.String {
                get
              }
            }
            public init(from decoder: any Swift.Decoder) throws
            public func hash(into hasher: inout Swift.Hasher)
            public static func == (a: Candle.Operations.PostLinkedAccounts.Output.InternalServerError.Body.JsonPayload, b: Candle.Operations.PostLinkedAccounts.Output.InternalServerError.Body.JsonPayload) -> Swift.Bool
            public func encode(to encoder: any Swift.Encoder) throws
            public var hashValue: Swift.Int {
              get
            }
          }
          case json(Candle.Operations.PostLinkedAccounts.Output.InternalServerError.Body.JsonPayload)
          public var json: Candle.Operations.PostLinkedAccounts.Output.InternalServerError.Body.JsonPayload {
            get throws
          }
          public func hash(into hasher: inout Swift.Hasher)
          public static func == (a: Candle.Operations.PostLinkedAccounts.Output.InternalServerError.Body, b: Candle.Operations.PostLinkedAccounts.Output.InternalServerError.Body) -> Swift.Bool
          public var hashValue: Swift.Int {
            get
          }
        }
        public var body: Candle.Operations.PostLinkedAccounts.Output.InternalServerError.Body
        public init(headers: Candle.Operations.PostLinkedAccounts.Output.InternalServerError.Headers = .init(), body: Candle.Operations.PostLinkedAccounts.Output.InternalServerError.Body)
        public func hash(into hasher: inout Swift.Hasher)
        public static func == (a: Candle.Operations.PostLinkedAccounts.Output.InternalServerError, b: Candle.Operations.PostLinkedAccounts.Output.InternalServerError) -> Swift.Bool
        public var hashValue: Swift.Int {
          get
        }
      }
      case internalServerError(Candle.Operations.PostLinkedAccounts.Output.InternalServerError)
      public var internalServerError: Candle.Operations.PostLinkedAccounts.Output.InternalServerError {
        get throws
      }
      case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
      public func hash(into hasher: inout Swift.Hasher)
      public static func == (a: Candle.Operations.PostLinkedAccounts.Output, b: Candle.Operations.PostLinkedAccounts.Output) -> Swift.Bool
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public enum AcceptableContentType : OpenAPIRuntime.AcceptableProtocol {
      case json
      case other(Swift.String)
      public init?(rawValue: Swift.String)
      public var rawValue: Swift.String {
        get
      }
      public static var allCases: [Candle.Operations.PostLinkedAccounts.AcceptableContentType] {
        get
      }
      public typealias AllCases = [Candle.Operations.PostLinkedAccounts.AcceptableContentType]
      public typealias RawValue = Swift.String
    }
  }
  public enum DeleteLinkedAccount {
    public static let id: Swift.String
    public struct Input : Swift.Sendable, Swift.Hashable {
      public struct Path : Swift.Sendable, Swift.Hashable {
        public var linkedAccountID: Candle.Components.Schemas.LinkedAccountID
        public init(linkedAccountID: Candle.Components.Schemas.LinkedAccountID)
        public func hash(into hasher: inout Swift.Hasher)
        public static func == (a: Candle.Operations.DeleteLinkedAccount.Input.Path, b: Candle.Operations.DeleteLinkedAccount.Input.Path) -> Swift.Bool
        public var hashValue: Swift.Int {
          get
        }
      }
      public var path: Candle.Operations.DeleteLinkedAccount.Input.Path
      public struct Headers : Swift.Sendable, Swift.Hashable {
        public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Candle.Operations.DeleteLinkedAccount.AcceptableContentType>]
        public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Candle.Operations.DeleteLinkedAccount.AcceptableContentType>] = .defaultValues())
        public func hash(into hasher: inout Swift.Hasher)
        public static func == (a: Candle.Operations.DeleteLinkedAccount.Input.Headers, b: Candle.Operations.DeleteLinkedAccount.Input.Headers) -> Swift.Bool
        public var hashValue: Swift.Int {
          get
        }
      }
      public var headers: Candle.Operations.DeleteLinkedAccount.Input.Headers
      public init(path: Candle.Operations.DeleteLinkedAccount.Input.Path, headers: Candle.Operations.DeleteLinkedAccount.Input.Headers = .init())
      public func hash(into hasher: inout Swift.Hasher)
      public static func == (a: Candle.Operations.DeleteLinkedAccount.Input, b: Candle.Operations.DeleteLinkedAccount.Input) -> Swift.Bool
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public enum Output : Swift.Sendable, Swift.Hashable {
      public struct NoContent : Swift.Sendable, Swift.Hashable {
        public struct Headers : Swift.Sendable, Swift.Hashable {
          @frozen public enum ContentTypePayload : Swift.String, Swift.Codable, Swift.Hashable, Swift.Sendable, Swift.CaseIterable {
            case applicationJson
            public init?(rawValue: Swift.String)
            public typealias AllCases = [Candle.Operations.DeleteLinkedAccount.Output.NoContent.Headers.ContentTypePayload]
            public typealias RawValue = Swift.String
            nonisolated public static var allCases: [Candle.Operations.DeleteLinkedAccount.Output.NoContent.Headers.ContentTypePayload] {
              get
            }
            public var rawValue: Swift.String {
              get
            }
          }
          public var contentType: Candle.Operations.DeleteLinkedAccount.Output.NoContent.Headers.ContentTypePayload?
          @frozen public enum ContentEncodingPayload : Swift.String, Swift.Codable, Swift.Hashable, Swift.Sendable, Swift.CaseIterable {
            case gzip
            public init?(rawValue: Swift.String)
            public typealias AllCases = [Candle.Operations.DeleteLinkedAccount.Output.NoContent.Headers.ContentEncodingPayload]
            public typealias RawValue = Swift.String
            nonisolated public static var allCases: [Candle.Operations.DeleteLinkedAccount.Output.NoContent.Headers.ContentEncodingPayload] {
              get
            }
            public var rawValue: Swift.String {
              get
            }
          }
          public var contentEncoding: Candle.Operations.DeleteLinkedAccount.Output.NoContent.Headers.ContentEncodingPayload?
          public init(contentType: Candle.Operations.DeleteLinkedAccount.Output.NoContent.Headers.ContentTypePayload? = nil, contentEncoding: Candle.Operations.DeleteLinkedAccount.Output.NoContent.Headers.ContentEncodingPayload? = nil)
          public func hash(into hasher: inout Swift.Hasher)
          public static func == (a: Candle.Operations.DeleteLinkedAccount.Output.NoContent.Headers, b: Candle.Operations.DeleteLinkedAccount.Output.NoContent.Headers) -> Swift.Bool
          public var hashValue: Swift.Int {
            get
          }
        }
        public var headers: Candle.Operations.DeleteLinkedAccount.Output.NoContent.Headers
        public init(headers: Candle.Operations.DeleteLinkedAccount.Output.NoContent.Headers = .init())
        public func hash(into hasher: inout Swift.Hasher)
        public static func == (a: Candle.Operations.DeleteLinkedAccount.Output.NoContent, b: Candle.Operations.DeleteLinkedAccount.Output.NoContent) -> Swift.Bool
        public var hashValue: Swift.Int {
          get
        }
      }
      case noContent(Candle.Operations.DeleteLinkedAccount.Output.NoContent)
      public var noContent: Candle.Operations.DeleteLinkedAccount.Output.NoContent {
        get throws
      }
      public struct Unauthorized : Swift.Sendable, Swift.Hashable {
        public struct Headers : Swift.Sendable, Swift.Hashable {
          @frozen public enum ContentTypePayload : Swift.String, Swift.Codable, Swift.Hashable, Swift.Sendable, Swift.CaseIterable {
            case applicationJson
            public init?(rawValue: Swift.String)
            public typealias AllCases = [Candle.Operations.DeleteLinkedAccount.Output.Unauthorized.Headers.ContentTypePayload]
            public typealias RawValue = Swift.String
            nonisolated public static var allCases: [Candle.Operations.DeleteLinkedAccount.Output.Unauthorized.Headers.ContentTypePayload] {
              get
            }
            public var rawValue: Swift.String {
              get
            }
          }
          public var contentType: Candle.Operations.DeleteLinkedAccount.Output.Unauthorized.Headers.ContentTypePayload?
          public init(contentType: Candle.Operations.DeleteLinkedAccount.Output.Unauthorized.Headers.ContentTypePayload? = nil)
          public func hash(into hasher: inout Swift.Hasher)
          public static func == (a: Candle.Operations.DeleteLinkedAccount.Output.Unauthorized.Headers, b: Candle.Operations.DeleteLinkedAccount.Output.Unauthorized.Headers) -> Swift.Bool
          public var hashValue: Swift.Int {
            get
          }
        }
        public var headers: Candle.Operations.DeleteLinkedAccount.Output.Unauthorized.Headers
        @frozen public enum Body : Swift.Sendable, Swift.Hashable {
          public struct JsonPayload : Swift.Codable, Swift.Hashable, Swift.Sendable {
            @frozen public enum KindPayload : Swift.String, Swift.Codable, Swift.Hashable, Swift.Sendable, Swift.CaseIterable {
              case badAuthorization_user
              public init?(rawValue: Swift.String)
              public typealias AllCases = [Candle.Operations.DeleteLinkedAccount.Output.Unauthorized.Body.JsonPayload.KindPayload]
              public typealias RawValue = Swift.String
              nonisolated public static var allCases: [Candle.Operations.DeleteLinkedAccount.Output.Unauthorized.Body.JsonPayload.KindPayload] {
                get
              }
              public var rawValue: Swift.String {
                get
              }
            }
            public var kind: Candle.Operations.DeleteLinkedAccount.Output.Unauthorized.Body.JsonPayload.KindPayload
            public var message: Swift.String
            public var details: Swift.String?
            public init(kind: Candle.Operations.DeleteLinkedAccount.Output.Unauthorized.Body.JsonPayload.KindPayload, message: Swift.String, details: Swift.String? = nil)
            public enum CodingKeys : Swift.String, Swift.CodingKey {
              case kind
              case message
              case details
              public init?(rawValue: Swift.String)
              public init?(stringValue: Swift.String)
              public init?(intValue: Swift.Int)
              public typealias RawValue = Swift.String
              public var intValue: Swift.Int? {
                get
              }
              public var rawValue: Swift.String {
                get
              }
              public var stringValue: Swift.String {
                get
              }
            }
            public init(from decoder: any Swift.Decoder) throws
            public func hash(into hasher: inout Swift.Hasher)
            public static func == (a: Candle.Operations.DeleteLinkedAccount.Output.Unauthorized.Body.JsonPayload, b: Candle.Operations.DeleteLinkedAccount.Output.Unauthorized.Body.JsonPayload) -> Swift.Bool
            public func encode(to encoder: any Swift.Encoder) throws
            public var hashValue: Swift.Int {
              get
            }
          }
          case json(Candle.Operations.DeleteLinkedAccount.Output.Unauthorized.Body.JsonPayload)
          public var json: Candle.Operations.DeleteLinkedAccount.Output.Unauthorized.Body.JsonPayload {
            get throws
          }
          public func hash(into hasher: inout Swift.Hasher)
          public static func == (a: Candle.Operations.DeleteLinkedAccount.Output.Unauthorized.Body, b: Candle.Operations.DeleteLinkedAccount.Output.Unauthorized.Body) -> Swift.Bool
          public var hashValue: Swift.Int {
            get
          }
        }
        public var body: Candle.Operations.DeleteLinkedAccount.Output.Unauthorized.Body
        public init(headers: Candle.Operations.DeleteLinkedAccount.Output.Unauthorized.Headers = .init(), body: Candle.Operations.DeleteLinkedAccount.Output.Unauthorized.Body)
        public func hash(into hasher: inout Swift.Hasher)
        public static func == (a: Candle.Operations.DeleteLinkedAccount.Output.Unauthorized, b: Candle.Operations.DeleteLinkedAccount.Output.Unauthorized) -> Swift.Bool
        public var hashValue: Swift.Int {
          get
        }
      }
      case unauthorized(Candle.Operations.DeleteLinkedAccount.Output.Unauthorized)
      public var unauthorized: Candle.Operations.DeleteLinkedAccount.Output.Unauthorized {
        get throws
      }
      public struct NotFound : Swift.Sendable, Swift.Hashable {
        public struct Headers : Swift.Sendable, Swift.Hashable {
          @frozen public enum ContentTypePayload : Swift.String, Swift.Codable, Swift.Hashable, Swift.Sendable, Swift.CaseIterable {
            case applicationJson
            public init?(rawValue: Swift.String)
            public typealias AllCases = [Candle.Operations.DeleteLinkedAccount.Output.NotFound.Headers.ContentTypePayload]
            public typealias RawValue = Swift.String
            nonisolated public static var allCases: [Candle.Operations.DeleteLinkedAccount.Output.NotFound.Headers.ContentTypePayload] {
              get
            }
            public var rawValue: Swift.String {
              get
            }
          }
          public var contentType: Candle.Operations.DeleteLinkedAccount.Output.NotFound.Headers.ContentTypePayload?
          public init(contentType: Candle.Operations.DeleteLinkedAccount.Output.NotFound.Headers.ContentTypePayload? = nil)
          public func hash(into hasher: inout Swift.Hasher)
          public static func == (a: Candle.Operations.DeleteLinkedAccount.Output.NotFound.Headers, b: Candle.Operations.DeleteLinkedAccount.Output.NotFound.Headers) -> Swift.Bool
          public var hashValue: Swift.Int {
            get
          }
        }
        public var headers: Candle.Operations.DeleteLinkedAccount.Output.NotFound.Headers
        @frozen public enum Body : Swift.Sendable, Swift.Hashable {
          public struct JsonPayload : Swift.Codable, Swift.Hashable, Swift.Sendable {
            @frozen public enum KindPayload : Swift.String, Swift.Codable, Swift.Hashable, Swift.Sendable, Swift.CaseIterable {
              case notFound_user
              case notFound_linkedAccount
              public init?(rawValue: Swift.String)
              public typealias AllCases = [Candle.Operations.DeleteLinkedAccount.Output.NotFound.Body.JsonPayload.KindPayload]
              public typealias RawValue = Swift.String
              nonisolated public static var allCases: [Candle.Operations.DeleteLinkedAccount.Output.NotFound.Body.JsonPayload.KindPayload] {
                get
              }
              public var rawValue: Swift.String {
                get
              }
            }
            public var kind: Candle.Operations.DeleteLinkedAccount.Output.NotFound.Body.JsonPayload.KindPayload
            public var message: Swift.String
            public var details: Swift.String?
            public init(kind: Candle.Operations.DeleteLinkedAccount.Output.NotFound.Body.JsonPayload.KindPayload, message: Swift.String, details: Swift.String? = nil)
            public enum CodingKeys : Swift.String, Swift.CodingKey {
              case kind
              case message
              case details
              public init?(rawValue: Swift.String)
              public init?(stringValue: Swift.String)
              public init?(intValue: Swift.Int)
              public typealias RawValue = Swift.String
              public var intValue: Swift.Int? {
                get
              }
              public var rawValue: Swift.String {
                get
              }
              public var stringValue: Swift.String {
                get
              }
            }
            public init(from decoder: any Swift.Decoder) throws
            public func hash(into hasher: inout Swift.Hasher)
            public static func == (a: Candle.Operations.DeleteLinkedAccount.Output.NotFound.Body.JsonPayload, b: Candle.Operations.DeleteLinkedAccount.Output.NotFound.Body.JsonPayload) -> Swift.Bool
            public func encode(to encoder: any Swift.Encoder) throws
            public var hashValue: Swift.Int {
              get
            }
          }
          case json(Candle.Operations.DeleteLinkedAccount.Output.NotFound.Body.JsonPayload)
          public var json: Candle.Operations.DeleteLinkedAccount.Output.NotFound.Body.JsonPayload {
            get throws
          }
          public func hash(into hasher: inout Swift.Hasher)
          public static func == (a: Candle.Operations.DeleteLinkedAccount.Output.NotFound.Body, b: Candle.Operations.DeleteLinkedAccount.Output.NotFound.Body) -> Swift.Bool
          public var hashValue: Swift.Int {
            get
          }
        }
        public var body: Candle.Operations.DeleteLinkedAccount.Output.NotFound.Body
        public init(headers: Candle.Operations.DeleteLinkedAccount.Output.NotFound.Headers = .init(), body: Candle.Operations.DeleteLinkedAccount.Output.NotFound.Body)
        public func hash(into hasher: inout Swift.Hasher)
        public static func == (a: Candle.Operations.DeleteLinkedAccount.Output.NotFound, b: Candle.Operations.DeleteLinkedAccount.Output.NotFound) -> Swift.Bool
        public var hashValue: Swift.Int {
          get
        }
      }
      case notFound(Candle.Operations.DeleteLinkedAccount.Output.NotFound)
      public var notFound: Candle.Operations.DeleteLinkedAccount.Output.NotFound {
        get throws
      }
      public struct Conflict : Swift.Sendable, Swift.Hashable {
        public struct Headers : Swift.Sendable, Swift.Hashable {
          @frozen public enum ContentTypePayload : Swift.String, Swift.Codable, Swift.Hashable, Swift.Sendable, Swift.CaseIterable {
            case applicationJson
            public init?(rawValue: Swift.String)
            public typealias AllCases = [Candle.Operations.DeleteLinkedAccount.Output.Conflict.Headers.ContentTypePayload]
            public typealias RawValue = Swift.String
            nonisolated public static var allCases: [Candle.Operations.DeleteLinkedAccount.Output.Conflict.Headers.ContentTypePayload] {
              get
            }
            public var rawValue: Swift.String {
              get
            }
          }
          public var contentType: Candle.Operations.DeleteLinkedAccount.Output.Conflict.Headers.ContentTypePayload?
          public init(contentType: Candle.Operations.DeleteLinkedAccount.Output.Conflict.Headers.ContentTypePayload? = nil)
          public func hash(into hasher: inout Swift.Hasher)
          public static func == (a: Candle.Operations.DeleteLinkedAccount.Output.Conflict.Headers, b: Candle.Operations.DeleteLinkedAccount.Output.Conflict.Headers) -> Swift.Bool
          public var hashValue: Swift.Int {
            get
          }
        }
        public var headers: Candle.Operations.DeleteLinkedAccount.Output.Conflict.Headers
        @frozen public enum Body : Swift.Sendable, Swift.Hashable {
          public struct JsonPayload : Swift.Codable, Swift.Hashable, Swift.Sendable {
            @frozen public enum KindPayload : Swift.String, Swift.Codable, Swift.Hashable, Swift.Sendable, Swift.CaseIterable {
              case alreadyUnlinked_account
              public init?(rawValue: Swift.String)
              public typealias AllCases = [Candle.Operations.DeleteLinkedAccount.Output.Conflict.Body.JsonPayload.KindPayload]
              public typealias RawValue = Swift.String
              nonisolated public static var allCases: [Candle.Operations.DeleteLinkedAccount.Output.Conflict.Body.JsonPayload.KindPayload] {
                get
              }
              public var rawValue: Swift.String {
                get
              }
            }
            public var kind: Candle.Operations.DeleteLinkedAccount.Output.Conflict.Body.JsonPayload.KindPayload
            public var message: Swift.String
            public var details: Swift.String?
            public init(kind: Candle.Operations.DeleteLinkedAccount.Output.Conflict.Body.JsonPayload.KindPayload, message: Swift.String, details: Swift.String? = nil)
            public enum CodingKeys : Swift.String, Swift.CodingKey {
              case kind
              case message
              case details
              public init?(rawValue: Swift.String)
              public init?(stringValue: Swift.String)
              public init?(intValue: Swift.Int)
              public typealias RawValue = Swift.String
              public var intValue: Swift.Int? {
                get
              }
              public var rawValue: Swift.String {
                get
              }
              public var stringValue: Swift.String {
                get
              }
            }
            public init(from decoder: any Swift.Decoder) throws
            public func hash(into hasher: inout Swift.Hasher)
            public static func == (a: Candle.Operations.DeleteLinkedAccount.Output.Conflict.Body.JsonPayload, b: Candle.Operations.DeleteLinkedAccount.Output.Conflict.Body.JsonPayload) -> Swift.Bool
            public func encode(to encoder: any Swift.Encoder) throws
            public var hashValue: Swift.Int {
              get
            }
          }
          case json(Candle.Operations.DeleteLinkedAccount.Output.Conflict.Body.JsonPayload)
          public var json: Candle.Operations.DeleteLinkedAccount.Output.Conflict.Body.JsonPayload {
            get throws
          }
          public func hash(into hasher: inout Swift.Hasher)
          public static func == (a: Candle.Operations.DeleteLinkedAccount.Output.Conflict.Body, b: Candle.Operations.DeleteLinkedAccount.Output.Conflict.Body) -> Swift.Bool
          public var hashValue: Swift.Int {
            get
          }
        }
        public var body: Candle.Operations.DeleteLinkedAccount.Output.Conflict.Body
        public init(headers: Candle.Operations.DeleteLinkedAccount.Output.Conflict.Headers = .init(), body: Candle.Operations.DeleteLinkedAccount.Output.Conflict.Body)
        public func hash(into hasher: inout Swift.Hasher)
        public static func == (a: Candle.Operations.DeleteLinkedAccount.Output.Conflict, b: Candle.Operations.DeleteLinkedAccount.Output.Conflict) -> Swift.Bool
        public var hashValue: Swift.Int {
          get
        }
      }
      case conflict(Candle.Operations.DeleteLinkedAccount.Output.Conflict)
      public var conflict: Candle.Operations.DeleteLinkedAccount.Output.Conflict {
        get throws
      }
      public struct UnprocessableContent : Swift.Sendable, Swift.Hashable {
        public struct Headers : Swift.Sendable, Swift.Hashable {
          @frozen public enum ContentTypePayload : Swift.String, Swift.Codable, Swift.Hashable, Swift.Sendable, Swift.CaseIterable {
            case applicationJson
            public init?(rawValue: Swift.String)
            public typealias AllCases = [Candle.Operations.DeleteLinkedAccount.Output.UnprocessableContent.Headers.ContentTypePayload]
            public typealias RawValue = Swift.String
            nonisolated public static var allCases: [Candle.Operations.DeleteLinkedAccount.Output.UnprocessableContent.Headers.ContentTypePayload] {
              get
            }
            public var rawValue: Swift.String {
              get
            }
          }
          public var contentType: Candle.Operations.DeleteLinkedAccount.Output.UnprocessableContent.Headers.ContentTypePayload?
          public init(contentType: Candle.Operations.DeleteLinkedAccount.Output.UnprocessableContent.Headers.ContentTypePayload? = nil)
          public func hash(into hasher: inout Swift.Hasher)
          public static func == (a: Candle.Operations.DeleteLinkedAccount.Output.UnprocessableContent.Headers, b: Candle.Operations.DeleteLinkedAccount.Output.UnprocessableContent.Headers) -> Swift.Bool
          public var hashValue: Swift.Int {
            get
          }
        }
        public var headers: Candle.Operations.DeleteLinkedAccount.Output.UnprocessableContent.Headers
        @frozen public enum Body : Swift.Sendable, Swift.Hashable {
          public struct JsonPayload : Swift.Codable, Swift.Hashable, Swift.Sendable {
            @frozen public enum KindPayload : Swift.String, Swift.Codable, Swift.Hashable, Swift.Sendable, Swift.CaseIterable {
              case schemaInvalid_request
              public init?(rawValue: Swift.String)
              public typealias AllCases = [Candle.Operations.DeleteLinkedAccount.Output.UnprocessableContent.Body.JsonPayload.KindPayload]
              public typealias RawValue = Swift.String
              nonisolated public static var allCases: [Candle.Operations.DeleteLinkedAccount.Output.UnprocessableContent.Body.JsonPayload.KindPayload] {
                get
              }
              public var rawValue: Swift.String {
                get
              }
            }
            public var kind: Candle.Operations.DeleteLinkedAccount.Output.UnprocessableContent.Body.JsonPayload.KindPayload
            public var message: Swift.String
            public var details: Swift.String?
            public init(kind: Candle.Operations.DeleteLinkedAccount.Output.UnprocessableContent.Body.JsonPayload.KindPayload, message: Swift.String, details: Swift.String? = nil)
            public enum CodingKeys : Swift.String, Swift.CodingKey {
              case kind
              case message
              case details
              public init?(rawValue: Swift.String)
              public init?(stringValue: Swift.String)
              public init?(intValue: Swift.Int)
              public typealias RawValue = Swift.String
              public var intValue: Swift.Int? {
                get
              }
              public var rawValue: Swift.String {
                get
              }
              public var stringValue: Swift.String {
                get
              }
            }
            public init(from decoder: any Swift.Decoder) throws
            public func hash(into hasher: inout Swift.Hasher)
            public static func == (a: Candle.Operations.DeleteLinkedAccount.Output.UnprocessableContent.Body.JsonPayload, b: Candle.Operations.DeleteLinkedAccount.Output.UnprocessableContent.Body.JsonPayload) -> Swift.Bool
            public func encode(to encoder: any Swift.Encoder) throws
            public var hashValue: Swift.Int {
              get
            }
          }
          case json(Candle.Operations.DeleteLinkedAccount.Output.UnprocessableContent.Body.JsonPayload)
          public var json: Candle.Operations.DeleteLinkedAccount.Output.UnprocessableContent.Body.JsonPayload {
            get throws
          }
          public func hash(into hasher: inout Swift.Hasher)
          public static func == (a: Candle.Operations.DeleteLinkedAccount.Output.UnprocessableContent.Body, b: Candle.Operations.DeleteLinkedAccount.Output.UnprocessableContent.Body) -> Swift.Bool
          public var hashValue: Swift.Int {
            get
          }
        }
        public var body: Candle.Operations.DeleteLinkedAccount.Output.UnprocessableContent.Body
        public init(headers: Candle.Operations.DeleteLinkedAccount.Output.UnprocessableContent.Headers = .init(), body: Candle.Operations.DeleteLinkedAccount.Output.UnprocessableContent.Body)
        public func hash(into hasher: inout Swift.Hasher)
        public static func == (a: Candle.Operations.DeleteLinkedAccount.Output.UnprocessableContent, b: Candle.Operations.DeleteLinkedAccount.Output.UnprocessableContent) -> Swift.Bool
        public var hashValue: Swift.Int {
          get
        }
      }
      case unprocessableContent(Candle.Operations.DeleteLinkedAccount.Output.UnprocessableContent)
      public var unprocessableContent: Candle.Operations.DeleteLinkedAccount.Output.UnprocessableContent {
        get throws
      }
      public struct InternalServerError : Swift.Sendable, Swift.Hashable {
        public struct Headers : Swift.Sendable, Swift.Hashable {
          @frozen public enum ContentTypePayload : Swift.String, Swift.Codable, Swift.Hashable, Swift.Sendable, Swift.CaseIterable {
            case applicationJson
            public init?(rawValue: Swift.String)
            public typealias AllCases = [Candle.Operations.DeleteLinkedAccount.Output.InternalServerError.Headers.ContentTypePayload]
            public typealias RawValue = Swift.String
            nonisolated public static var allCases: [Candle.Operations.DeleteLinkedAccount.Output.InternalServerError.Headers.ContentTypePayload] {
              get
            }
            public var rawValue: Swift.String {
              get
            }
          }
          public var contentType: Candle.Operations.DeleteLinkedAccount.Output.InternalServerError.Headers.ContentTypePayload?
          public init(contentType: Candle.Operations.DeleteLinkedAccount.Output.InternalServerError.Headers.ContentTypePayload? = nil)
          public func hash(into hasher: inout Swift.Hasher)
          public static func == (a: Candle.Operations.DeleteLinkedAccount.Output.InternalServerError.Headers, b: Candle.Operations.DeleteLinkedAccount.Output.InternalServerError.Headers) -> Swift.Bool
          public var hashValue: Swift.Int {
            get
          }
        }
        public var headers: Candle.Operations.DeleteLinkedAccount.Output.InternalServerError.Headers
        @frozen public enum Body : Swift.Sendable, Swift.Hashable {
          public struct JsonPayload : Swift.Codable, Swift.Hashable, Swift.Sendable {
            @frozen public enum KindPayload : Swift.String, Swift.Codable, Swift.Hashable, Swift.Sendable, Swift.CaseIterable {
              case unexpected
              public init?(rawValue: Swift.String)
              public typealias AllCases = [Candle.Operations.DeleteLinkedAccount.Output.InternalServerError.Body.JsonPayload.KindPayload]
              public typealias RawValue = Swift.String
              nonisolated public static var allCases: [Candle.Operations.DeleteLinkedAccount.Output.InternalServerError.Body.JsonPayload.KindPayload] {
                get
              }
              public var rawValue: Swift.String {
                get
              }
            }
            public var kind: Candle.Operations.DeleteLinkedAccount.Output.InternalServerError.Body.JsonPayload.KindPayload
            public var message: Swift.String
            public var details: Swift.String?
            public init(kind: Candle.Operations.DeleteLinkedAccount.Output.InternalServerError.Body.JsonPayload.KindPayload, message: Swift.String, details: Swift.String? = nil)
            public enum CodingKeys : Swift.String, Swift.CodingKey {
              case kind
              case message
              case details
              public init?(rawValue: Swift.String)
              public init?(stringValue: Swift.String)
              public init?(intValue: Swift.Int)
              public typealias RawValue = Swift.String
              public var intValue: Swift.Int? {
                get
              }
              public var rawValue: Swift.String {
                get
              }
              public var stringValue: Swift.String {
                get
              }
            }
            public init(from decoder: any Swift.Decoder) throws
            public func hash(into hasher: inout Swift.Hasher)
            public static func == (a: Candle.Operations.DeleteLinkedAccount.Output.InternalServerError.Body.JsonPayload, b: Candle.Operations.DeleteLinkedAccount.Output.InternalServerError.Body.JsonPayload) -> Swift.Bool
            public func encode(to encoder: any Swift.Encoder) throws
            public var hashValue: Swift.Int {
              get
            }
          }
          case json(Candle.Operations.DeleteLinkedAccount.Output.InternalServerError.Body.JsonPayload)
          public var json: Candle.Operations.DeleteLinkedAccount.Output.InternalServerError.Body.JsonPayload {
            get throws
          }
          public func hash(into hasher: inout Swift.Hasher)
          public static func == (a: Candle.Operations.DeleteLinkedAccount.Output.InternalServerError.Body, b: Candle.Operations.DeleteLinkedAccount.Output.InternalServerError.Body) -> Swift.Bool
          public var hashValue: Swift.Int {
            get
          }
        }
        public var body: Candle.Operations.DeleteLinkedAccount.Output.InternalServerError.Body
        public init(headers: Candle.Operations.DeleteLinkedAccount.Output.InternalServerError.Headers = .init(), body: Candle.Operations.DeleteLinkedAccount.Output.InternalServerError.Body)
        public func hash(into hasher: inout Swift.Hasher)
        public static func == (a: Candle.Operations.DeleteLinkedAccount.Output.InternalServerError, b: Candle.Operations.DeleteLinkedAccount.Output.InternalServerError) -> Swift.Bool
        public var hashValue: Swift.Int {
          get
        }
      }
      case internalServerError(Candle.Operations.DeleteLinkedAccount.Output.InternalServerError)
      public var internalServerError: Candle.Operations.DeleteLinkedAccount.Output.InternalServerError {
        get throws
      }
      case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
      public func hash(into hasher: inout Swift.Hasher)
      public static func == (a: Candle.Operations.DeleteLinkedAccount.Output, b: Candle.Operations.DeleteLinkedAccount.Output) -> Swift.Bool
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public enum AcceptableContentType : OpenAPIRuntime.AcceptableProtocol {
      case json
      case other(Swift.String)
      public init?(rawValue: Swift.String)
      public var rawValue: Swift.String {
        get
      }
      public static var allCases: [Candle.Operations.DeleteLinkedAccount.AcceptableContentType] {
        get
      }
      public typealias AllCases = [Candle.Operations.DeleteLinkedAccount.AcceptableContentType]
      public typealias RawValue = Swift.String
    }
  }
  public enum GetLinkedAccountsFiatAccounts {
    public static let id: Swift.String
    public struct Input : Swift.Sendable, Swift.Hashable {
      public struct Query : Swift.Sendable, Swift.Hashable {
        public var linkedAccountIDs: Swift.String?
        public init(linkedAccountIDs: Swift.String? = nil)
        public func hash(into hasher: inout Swift.Hasher)
        public static func == (a: Candle.Operations.GetLinkedAccountsFiatAccounts.Input.Query, b: Candle.Operations.GetLinkedAccountsFiatAccounts.Input.Query) -> Swift.Bool
        public var hashValue: Swift.Int {
          get
        }
      }
      public var query: Candle.Operations.GetLinkedAccountsFiatAccounts.Input.Query
      public struct Headers : Swift.Sendable, Swift.Hashable {
        public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Candle.Operations.GetLinkedAccountsFiatAccounts.AcceptableContentType>]
        public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Candle.Operations.GetLinkedAccountsFiatAccounts.AcceptableContentType>] = .defaultValues())
        public func hash(into hasher: inout Swift.Hasher)
        public static func == (a: Candle.Operations.GetLinkedAccountsFiatAccounts.Input.Headers, b: Candle.Operations.GetLinkedAccountsFiatAccounts.Input.Headers) -> Swift.Bool
        public var hashValue: Swift.Int {
          get
        }
      }
      public var headers: Candle.Operations.GetLinkedAccountsFiatAccounts.Input.Headers
      public init(query: Candle.Operations.GetLinkedAccountsFiatAccounts.Input.Query = .init(), headers: Candle.Operations.GetLinkedAccountsFiatAccounts.Input.Headers = .init())
      public func hash(into hasher: inout Swift.Hasher)
      public static func == (a: Candle.Operations.GetLinkedAccountsFiatAccounts.Input, b: Candle.Operations.GetLinkedAccountsFiatAccounts.Input) -> Swift.Bool
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public enum Output : Swift.Sendable, Swift.Hashable {
      public struct Ok : Swift.Sendable, Swift.Hashable {
        public struct Headers : Swift.Sendable, Swift.Hashable {
          @frozen public enum ContentTypePayload : Swift.String, Swift.Codable, Swift.Hashable, Swift.Sendable, Swift.CaseIterable {
            case applicationJson
            public init?(rawValue: Swift.String)
            public typealias AllCases = [Candle.Operations.GetLinkedAccountsFiatAccounts.Output.Ok.Headers.ContentTypePayload]
            public typealias RawValue = Swift.String
            nonisolated public static var allCases: [Candle.Operations.GetLinkedAccountsFiatAccounts.Output.Ok.Headers.ContentTypePayload] {
              get
            }
            public var rawValue: Swift.String {
              get
            }
          }
          public var contentType: Candle.Operations.GetLinkedAccountsFiatAccounts.Output.Ok.Headers.ContentTypePayload?
          @frozen public enum ContentEncodingPayload : Swift.String, Swift.Codable, Swift.Hashable, Swift.Sendable, Swift.CaseIterable {
            case gzip
            public init?(rawValue: Swift.String)
            public typealias AllCases = [Candle.Operations.GetLinkedAccountsFiatAccounts.Output.Ok.Headers.ContentEncodingPayload]
            public typealias RawValue = Swift.String
            nonisolated public static var allCases: [Candle.Operations.GetLinkedAccountsFiatAccounts.Output.Ok.Headers.ContentEncodingPayload] {
              get
            }
            public var rawValue: Swift.String {
              get
            }
          }
          public var contentEncoding: Candle.Operations.GetLinkedAccountsFiatAccounts.Output.Ok.Headers.ContentEncodingPayload?
          public init(contentType: Candle.Operations.GetLinkedAccountsFiatAccounts.Output.Ok.Headers.ContentTypePayload? = nil, contentEncoding: Candle.Operations.GetLinkedAccountsFiatAccounts.Output.Ok.Headers.ContentEncodingPayload? = nil)
          public func hash(into hasher: inout Swift.Hasher)
          public static func == (a: Candle.Operations.GetLinkedAccountsFiatAccounts.Output.Ok.Headers, b: Candle.Operations.GetLinkedAccountsFiatAccounts.Output.Ok.Headers) -> Swift.Bool
          public var hashValue: Swift.Int {
            get
          }
        }
        public var headers: Candle.Operations.GetLinkedAccountsFiatAccounts.Output.Ok.Headers
        @frozen public enum Body : Swift.Sendable, Swift.Hashable {
          case json([Candle.Components.Schemas.PrimaryFiatHoldingAccount])
          public var json: [Candle.Components.Schemas.PrimaryFiatHoldingAccount] {
            get throws
          }
          public func hash(into hasher: inout Swift.Hasher)
          public static func == (a: Candle.Operations.GetLinkedAccountsFiatAccounts.Output.Ok.Body, b: Candle.Operations.GetLinkedAccountsFiatAccounts.Output.Ok.Body) -> Swift.Bool
          public var hashValue: Swift.Int {
            get
          }
        }
        public var body: Candle.Operations.GetLinkedAccountsFiatAccounts.Output.Ok.Body
        public init(headers: Candle.Operations.GetLinkedAccountsFiatAccounts.Output.Ok.Headers = .init(), body: Candle.Operations.GetLinkedAccountsFiatAccounts.Output.Ok.Body)
        public func hash(into hasher: inout Swift.Hasher)
        public static func == (a: Candle.Operations.GetLinkedAccountsFiatAccounts.Output.Ok, b: Candle.Operations.GetLinkedAccountsFiatAccounts.Output.Ok) -> Swift.Bool
        public var hashValue: Swift.Int {
          get
        }
      }
      case ok(Candle.Operations.GetLinkedAccountsFiatAccounts.Output.Ok)
      public var ok: Candle.Operations.GetLinkedAccountsFiatAccounts.Output.Ok {
        get throws
      }
      public struct Unauthorized : Swift.Sendable, Swift.Hashable {
        public struct Headers : Swift.Sendable, Swift.Hashable {
          @frozen public enum ContentTypePayload : Swift.String, Swift.Codable, Swift.Hashable, Swift.Sendable, Swift.CaseIterable {
            case applicationJson
            public init?(rawValue: Swift.String)
            public typealias AllCases = [Candle.Operations.GetLinkedAccountsFiatAccounts.Output.Unauthorized.Headers.ContentTypePayload]
            public typealias RawValue = Swift.String
            nonisolated public static var allCases: [Candle.Operations.GetLinkedAccountsFiatAccounts.Output.Unauthorized.Headers.ContentTypePayload] {
              get
            }
            public var rawValue: Swift.String {
              get
            }
          }
          public var contentType: Candle.Operations.GetLinkedAccountsFiatAccounts.Output.Unauthorized.Headers.ContentTypePayload?
          public init(contentType: Candle.Operations.GetLinkedAccountsFiatAccounts.Output.Unauthorized.Headers.ContentTypePayload? = nil)
          public func hash(into hasher: inout Swift.Hasher)
          public static func == (a: Candle.Operations.GetLinkedAccountsFiatAccounts.Output.Unauthorized.Headers, b: Candle.Operations.GetLinkedAccountsFiatAccounts.Output.Unauthorized.Headers) -> Swift.Bool
          public var hashValue: Swift.Int {
            get
          }
        }
        public var headers: Candle.Operations.GetLinkedAccountsFiatAccounts.Output.Unauthorized.Headers
        @frozen public enum Body : Swift.Sendable, Swift.Hashable {
          public struct JsonPayload : Swift.Codable, Swift.Hashable, Swift.Sendable {
            @frozen public enum KindPayload : Swift.String, Swift.Codable, Swift.Hashable, Swift.Sendable, Swift.CaseIterable {
              case badAuthorization_user
              public init?(rawValue: Swift.String)
              public typealias AllCases = [Candle.Operations.GetLinkedAccountsFiatAccounts.Output.Unauthorized.Body.JsonPayload.KindPayload]
              public typealias RawValue = Swift.String
              nonisolated public static var allCases: [Candle.Operations.GetLinkedAccountsFiatAccounts.Output.Unauthorized.Body.JsonPayload.KindPayload] {
                get
              }
              public var rawValue: Swift.String {
                get
              }
            }
            public var kind: Candle.Operations.GetLinkedAccountsFiatAccounts.Output.Unauthorized.Body.JsonPayload.KindPayload
            public var message: Swift.String
            public var details: Swift.String?
            public init(kind: Candle.Operations.GetLinkedAccountsFiatAccounts.Output.Unauthorized.Body.JsonPayload.KindPayload, message: Swift.String, details: Swift.String? = nil)
            public enum CodingKeys : Swift.String, Swift.CodingKey {
              case kind
              case message
              case details
              public init?(rawValue: Swift.String)
              public init?(stringValue: Swift.String)
              public init?(intValue: Swift.Int)
              public typealias RawValue = Swift.String
              public var intValue: Swift.Int? {
                get
              }
              public var rawValue: Swift.String {
                get
              }
              public var stringValue: Swift.String {
                get
              }
            }
            public init(from decoder: any Swift.Decoder) throws
            public func hash(into hasher: inout Swift.Hasher)
            public static func == (a: Candle.Operations.GetLinkedAccountsFiatAccounts.Output.Unauthorized.Body.JsonPayload, b: Candle.Operations.GetLinkedAccountsFiatAccounts.Output.Unauthorized.Body.JsonPayload) -> Swift.Bool
            public func encode(to encoder: any Swift.Encoder) throws
            public var hashValue: Swift.Int {
              get
            }
          }
          case json(Candle.Operations.GetLinkedAccountsFiatAccounts.Output.Unauthorized.Body.JsonPayload)
          public var json: Candle.Operations.GetLinkedAccountsFiatAccounts.Output.Unauthorized.Body.JsonPayload {
            get throws
          }
          public func hash(into hasher: inout Swift.Hasher)
          public static func == (a: Candle.Operations.GetLinkedAccountsFiatAccounts.Output.Unauthorized.Body, b: Candle.Operations.GetLinkedAccountsFiatAccounts.Output.Unauthorized.Body) -> Swift.Bool
          public var hashValue: Swift.Int {
            get
          }
        }
        public var body: Candle.Operations.GetLinkedAccountsFiatAccounts.Output.Unauthorized.Body
        public init(headers: Candle.Operations.GetLinkedAccountsFiatAccounts.Output.Unauthorized.Headers = .init(), body: Candle.Operations.GetLinkedAccountsFiatAccounts.Output.Unauthorized.Body)
        public func hash(into hasher: inout Swift.Hasher)
        public static func == (a: Candle.Operations.GetLinkedAccountsFiatAccounts.Output.Unauthorized, b: Candle.Operations.GetLinkedAccountsFiatAccounts.Output.Unauthorized) -> Swift.Bool
        public var hashValue: Swift.Int {
          get
        }
      }
      case unauthorized(Candle.Operations.GetLinkedAccountsFiatAccounts.Output.Unauthorized)
      public var unauthorized: Candle.Operations.GetLinkedAccountsFiatAccounts.Output.Unauthorized {
        get throws
      }
      public struct NotFound : Swift.Sendable, Swift.Hashable {
        public struct Headers : Swift.Sendable, Swift.Hashable {
          @frozen public enum ContentTypePayload : Swift.String, Swift.Codable, Swift.Hashable, Swift.Sendable, Swift.CaseIterable {
            case applicationJson
            public init?(rawValue: Swift.String)
            public typealias AllCases = [Candle.Operations.GetLinkedAccountsFiatAccounts.Output.NotFound.Headers.ContentTypePayload]
            public typealias RawValue = Swift.String
            nonisolated public static var allCases: [Candle.Operations.GetLinkedAccountsFiatAccounts.Output.NotFound.Headers.ContentTypePayload] {
              get
            }
            public var rawValue: Swift.String {
              get
            }
          }
          public var contentType: Candle.Operations.GetLinkedAccountsFiatAccounts.Output.NotFound.Headers.ContentTypePayload?
          public init(contentType: Candle.Operations.GetLinkedAccountsFiatAccounts.Output.NotFound.Headers.ContentTypePayload? = nil)
          public func hash(into hasher: inout Swift.Hasher)
          public static func == (a: Candle.Operations.GetLinkedAccountsFiatAccounts.Output.NotFound.Headers, b: Candle.Operations.GetLinkedAccountsFiatAccounts.Output.NotFound.Headers) -> Swift.Bool
          public var hashValue: Swift.Int {
            get
          }
        }
        public var headers: Candle.Operations.GetLinkedAccountsFiatAccounts.Output.NotFound.Headers
        @frozen public enum Body : Swift.Sendable, Swift.Hashable {
          public struct JsonPayload : Swift.Codable, Swift.Hashable, Swift.Sendable {
            @frozen public enum KindPayload : Swift.String, Swift.Codable, Swift.Hashable, Swift.Sendable, Swift.CaseIterable {
              case notFound_user
              public init?(rawValue: Swift.String)
              public typealias AllCases = [Candle.Operations.GetLinkedAccountsFiatAccounts.Output.NotFound.Body.JsonPayload.KindPayload]
              public typealias RawValue = Swift.String
              nonisolated public static var allCases: [Candle.Operations.GetLinkedAccountsFiatAccounts.Output.NotFound.Body.JsonPayload.KindPayload] {
                get
              }
              public var rawValue: Swift.String {
                get
              }
            }
            public var kind: Candle.Operations.GetLinkedAccountsFiatAccounts.Output.NotFound.Body.JsonPayload.KindPayload
            public var message: Swift.String
            public var details: Swift.String?
            public init(kind: Candle.Operations.GetLinkedAccountsFiatAccounts.Output.NotFound.Body.JsonPayload.KindPayload, message: Swift.String, details: Swift.String? = nil)
            public enum CodingKeys : Swift.String, Swift.CodingKey {
              case kind
              case message
              case details
              public init?(rawValue: Swift.String)
              public init?(stringValue: Swift.String)
              public init?(intValue: Swift.Int)
              public typealias RawValue = Swift.String
              public var intValue: Swift.Int? {
                get
              }
              public var rawValue: Swift.String {
                get
              }
              public var stringValue: Swift.String {
                get
              }
            }
            public init(from decoder: any Swift.Decoder) throws
            public func hash(into hasher: inout Swift.Hasher)
            public static func == (a: Candle.Operations.GetLinkedAccountsFiatAccounts.Output.NotFound.Body.JsonPayload, b: Candle.Operations.GetLinkedAccountsFiatAccounts.Output.NotFound.Body.JsonPayload) -> Swift.Bool
            public func encode(to encoder: any Swift.Encoder) throws
            public var hashValue: Swift.Int {
              get
            }
          }
          case json(Candle.Operations.GetLinkedAccountsFiatAccounts.Output.NotFound.Body.JsonPayload)
          public var json: Candle.Operations.GetLinkedAccountsFiatAccounts.Output.NotFound.Body.JsonPayload {
            get throws
          }
          public func hash(into hasher: inout Swift.Hasher)
          public static func == (a: Candle.Operations.GetLinkedAccountsFiatAccounts.Output.NotFound.Body, b: Candle.Operations.GetLinkedAccountsFiatAccounts.Output.NotFound.Body) -> Swift.Bool
          public var hashValue: Swift.Int {
            get
          }
        }
        public var body: Candle.Operations.GetLinkedAccountsFiatAccounts.Output.NotFound.Body
        public init(headers: Candle.Operations.GetLinkedAccountsFiatAccounts.Output.NotFound.Headers = .init(), body: Candle.Operations.GetLinkedAccountsFiatAccounts.Output.NotFound.Body)
        public func hash(into hasher: inout Swift.Hasher)
        public static func == (a: Candle.Operations.GetLinkedAccountsFiatAccounts.Output.NotFound, b: Candle.Operations.GetLinkedAccountsFiatAccounts.Output.NotFound) -> Swift.Bool
        public var hashValue: Swift.Int {
          get
        }
      }
      case notFound(Candle.Operations.GetLinkedAccountsFiatAccounts.Output.NotFound)
      public var notFound: Candle.Operations.GetLinkedAccountsFiatAccounts.Output.NotFound {
        get throws
      }
      public struct UnprocessableContent : Swift.Sendable, Swift.Hashable {
        public struct Headers : Swift.Sendable, Swift.Hashable {
          @frozen public enum ContentTypePayload : Swift.String, Swift.Codable, Swift.Hashable, Swift.Sendable, Swift.CaseIterable {
            case applicationJson
            public init?(rawValue: Swift.String)
            public typealias AllCases = [Candle.Operations.GetLinkedAccountsFiatAccounts.Output.UnprocessableContent.Headers.ContentTypePayload]
            public typealias RawValue = Swift.String
            nonisolated public static var allCases: [Candle.Operations.GetLinkedAccountsFiatAccounts.Output.UnprocessableContent.Headers.ContentTypePayload] {
              get
            }
            public var rawValue: Swift.String {
              get
            }
          }
          public var contentType: Candle.Operations.GetLinkedAccountsFiatAccounts.Output.UnprocessableContent.Headers.ContentTypePayload?
          public init(contentType: Candle.Operations.GetLinkedAccountsFiatAccounts.Output.UnprocessableContent.Headers.ContentTypePayload? = nil)
          public func hash(into hasher: inout Swift.Hasher)
          public static func == (a: Candle.Operations.GetLinkedAccountsFiatAccounts.Output.UnprocessableContent.Headers, b: Candle.Operations.GetLinkedAccountsFiatAccounts.Output.UnprocessableContent.Headers) -> Swift.Bool
          public var hashValue: Swift.Int {
            get
          }
        }
        public var headers: Candle.Operations.GetLinkedAccountsFiatAccounts.Output.UnprocessableContent.Headers
        @frozen public enum Body : Swift.Sendable, Swift.Hashable {
          public struct JsonPayload : Swift.Codable, Swift.Hashable, Swift.Sendable {
            @frozen public enum KindPayload : Swift.String, Swift.Codable, Swift.Hashable, Swift.Sendable, Swift.CaseIterable {
              case schemaInvalid_request
              public init?(rawValue: Swift.String)
              public typealias AllCases = [Candle.Operations.GetLinkedAccountsFiatAccounts.Output.UnprocessableContent.Body.JsonPayload.KindPayload]
              public typealias RawValue = Swift.String
              nonisolated public static var allCases: [Candle.Operations.GetLinkedAccountsFiatAccounts.Output.UnprocessableContent.Body.JsonPayload.KindPayload] {
                get
              }
              public var rawValue: Swift.String {
                get
              }
            }
            public var kind: Candle.Operations.GetLinkedAccountsFiatAccounts.Output.UnprocessableContent.Body.JsonPayload.KindPayload
            public var message: Swift.String
            public var details: Swift.String?
            public init(kind: Candle.Operations.GetLinkedAccountsFiatAccounts.Output.UnprocessableContent.Body.JsonPayload.KindPayload, message: Swift.String, details: Swift.String? = nil)
            public enum CodingKeys : Swift.String, Swift.CodingKey {
              case kind
              case message
              case details
              public init?(rawValue: Swift.String)
              public init?(stringValue: Swift.String)
              public init?(intValue: Swift.Int)
              public typealias RawValue = Swift.String
              public var intValue: Swift.Int? {
                get
              }
              public var rawValue: Swift.String {
                get
              }
              public var stringValue: Swift.String {
                get
              }
            }
            public init(from decoder: any Swift.Decoder) throws
            public func hash(into hasher: inout Swift.Hasher)
            public static func == (a: Candle.Operations.GetLinkedAccountsFiatAccounts.Output.UnprocessableContent.Body.JsonPayload, b: Candle.Operations.GetLinkedAccountsFiatAccounts.Output.UnprocessableContent.Body.JsonPayload) -> Swift.Bool
            public func encode(to encoder: any Swift.Encoder) throws
            public var hashValue: Swift.Int {
              get
            }
          }
          case json(Candle.Operations.GetLinkedAccountsFiatAccounts.Output.UnprocessableContent.Body.JsonPayload)
          public var json: Candle.Operations.GetLinkedAccountsFiatAccounts.Output.UnprocessableContent.Body.JsonPayload {
            get throws
          }
          public func hash(into hasher: inout Swift.Hasher)
          public static func == (a: Candle.Operations.GetLinkedAccountsFiatAccounts.Output.UnprocessableContent.Body, b: Candle.Operations.GetLinkedAccountsFiatAccounts.Output.UnprocessableContent.Body) -> Swift.Bool
          public var hashValue: Swift.Int {
            get
          }
        }
        public var body: Candle.Operations.GetLinkedAccountsFiatAccounts.Output.UnprocessableContent.Body
        public init(headers: Candle.Operations.GetLinkedAccountsFiatAccounts.Output.UnprocessableContent.Headers = .init(), body: Candle.Operations.GetLinkedAccountsFiatAccounts.Output.UnprocessableContent.Body)
        public func hash(into hasher: inout Swift.Hasher)
        public static func == (a: Candle.Operations.GetLinkedAccountsFiatAccounts.Output.UnprocessableContent, b: Candle.Operations.GetLinkedAccountsFiatAccounts.Output.UnprocessableContent) -> Swift.Bool
        public var hashValue: Swift.Int {
          get
        }
      }
      case unprocessableContent(Candle.Operations.GetLinkedAccountsFiatAccounts.Output.UnprocessableContent)
      public var unprocessableContent: Candle.Operations.GetLinkedAccountsFiatAccounts.Output.UnprocessableContent {
        get throws
      }
      public struct InternalServerError : Swift.Sendable, Swift.Hashable {
        public struct Headers : Swift.Sendable, Swift.Hashable {
          @frozen public enum ContentTypePayload : Swift.String, Swift.Codable, Swift.Hashable, Swift.Sendable, Swift.CaseIterable {
            case applicationJson
            public init?(rawValue: Swift.String)
            public typealias AllCases = [Candle.Operations.GetLinkedAccountsFiatAccounts.Output.InternalServerError.Headers.ContentTypePayload]
            public typealias RawValue = Swift.String
            nonisolated public static var allCases: [Candle.Operations.GetLinkedAccountsFiatAccounts.Output.InternalServerError.Headers.ContentTypePayload] {
              get
            }
            public var rawValue: Swift.String {
              get
            }
          }
          public var contentType: Candle.Operations.GetLinkedAccountsFiatAccounts.Output.InternalServerError.Headers.ContentTypePayload?
          public init(contentType: Candle.Operations.GetLinkedAccountsFiatAccounts.Output.InternalServerError.Headers.ContentTypePayload? = nil)
          public func hash(into hasher: inout Swift.Hasher)
          public static func == (a: Candle.Operations.GetLinkedAccountsFiatAccounts.Output.InternalServerError.Headers, b: Candle.Operations.GetLinkedAccountsFiatAccounts.Output.InternalServerError.Headers) -> Swift.Bool
          public var hashValue: Swift.Int {
            get
          }
        }
        public var headers: Candle.Operations.GetLinkedAccountsFiatAccounts.Output.InternalServerError.Headers
        @frozen public enum Body : Swift.Sendable, Swift.Hashable {
          public struct JsonPayload : Swift.Codable, Swift.Hashable, Swift.Sendable {
            @frozen public enum KindPayload : Swift.String, Swift.Codable, Swift.Hashable, Swift.Sendable, Swift.CaseIterable {
              case unexpected
              public init?(rawValue: Swift.String)
              public typealias AllCases = [Candle.Operations.GetLinkedAccountsFiatAccounts.Output.InternalServerError.Body.JsonPayload.KindPayload]
              public typealias RawValue = Swift.String
              nonisolated public static var allCases: [Candle.Operations.GetLinkedAccountsFiatAccounts.Output.InternalServerError.Body.JsonPayload.KindPayload] {
                get
              }
              public var rawValue: Swift.String {
                get
              }
            }
            public var kind: Candle.Operations.GetLinkedAccountsFiatAccounts.Output.InternalServerError.Body.JsonPayload.KindPayload
            public var message: Swift.String
            public var details: Swift.String?
            public init(kind: Candle.Operations.GetLinkedAccountsFiatAccounts.Output.InternalServerError.Body.JsonPayload.KindPayload, message: Swift.String, details: Swift.String? = nil)
            public enum CodingKeys : Swift.String, Swift.CodingKey {
              case kind
              case message
              case details
              public init?(rawValue: Swift.String)
              public init?(stringValue: Swift.String)
              public init?(intValue: Swift.Int)
              public typealias RawValue = Swift.String
              public var intValue: Swift.Int? {
                get
              }
              public var rawValue: Swift.String {
                get
              }
              public var stringValue: Swift.String {
                get
              }
            }
            public init(from decoder: any Swift.Decoder) throws
            public func hash(into hasher: inout Swift.Hasher)
            public static func == (a: Candle.Operations.GetLinkedAccountsFiatAccounts.Output.InternalServerError.Body.JsonPayload, b: Candle.Operations.GetLinkedAccountsFiatAccounts.Output.InternalServerError.Body.JsonPayload) -> Swift.Bool
            public func encode(to encoder: any Swift.Encoder) throws
            public var hashValue: Swift.Int {
              get
            }
          }
          case json(Candle.Operations.GetLinkedAccountsFiatAccounts.Output.InternalServerError.Body.JsonPayload)
          public var json: Candle.Operations.GetLinkedAccountsFiatAccounts.Output.InternalServerError.Body.JsonPayload {
            get throws
          }
          public func hash(into hasher: inout Swift.Hasher)
          public static func == (a: Candle.Operations.GetLinkedAccountsFiatAccounts.Output.InternalServerError.Body, b: Candle.Operations.GetLinkedAccountsFiatAccounts.Output.InternalServerError.Body) -> Swift.Bool
          public var hashValue: Swift.Int {
            get
          }
        }
        public var body: Candle.Operations.GetLinkedAccountsFiatAccounts.Output.InternalServerError.Body
        public init(headers: Candle.Operations.GetLinkedAccountsFiatAccounts.Output.InternalServerError.Headers = .init(), body: Candle.Operations.GetLinkedAccountsFiatAccounts.Output.InternalServerError.Body)
        public func hash(into hasher: inout Swift.Hasher)
        public static func == (a: Candle.Operations.GetLinkedAccountsFiatAccounts.Output.InternalServerError, b: Candle.Operations.GetLinkedAccountsFiatAccounts.Output.InternalServerError) -> Swift.Bool
        public var hashValue: Swift.Int {
          get
        }
      }
      case internalServerError(Candle.Operations.GetLinkedAccountsFiatAccounts.Output.InternalServerError)
      public var internalServerError: Candle.Operations.GetLinkedAccountsFiatAccounts.Output.InternalServerError {
        get throws
      }
      case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
      public func hash(into hasher: inout Swift.Hasher)
      public static func == (a: Candle.Operations.GetLinkedAccountsFiatAccounts.Output, b: Candle.Operations.GetLinkedAccountsFiatAccounts.Output) -> Swift.Bool
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public enum AcceptableContentType : OpenAPIRuntime.AcceptableProtocol {
      case json
      case other(Swift.String)
      public init?(rawValue: Swift.String)
      public var rawValue: Swift.String {
        get
      }
      public static var allCases: [Candle.Operations.GetLinkedAccountsFiatAccounts.AcceptableContentType] {
        get
      }
      public typealias AllCases = [Candle.Operations.GetLinkedAccountsFiatAccounts.AcceptableContentType]
      public typealias RawValue = Swift.String
    }
  }
  public enum GetLinkedAccountsActivity {
    public static let id: Swift.String
    public struct Input : Swift.Sendable, Swift.Hashable {
      public struct Query : Swift.Sendable, Swift.Hashable {
        public var linkedAccountIDs: Swift.String?
        public var assetKind: Candle.Components.Schemas.AssetKind?
        public var span: Swift.String?
        public init(linkedAccountIDs: Swift.String? = nil, assetKind: Candle.Components.Schemas.AssetKind? = nil, span: Swift.String? = nil)
        public func hash(into hasher: inout Swift.Hasher)
        public static func == (a: Candle.Operations.GetLinkedAccountsActivity.Input.Query, b: Candle.Operations.GetLinkedAccountsActivity.Input.Query) -> Swift.Bool
        public var hashValue: Swift.Int {
          get
        }
      }
      public var query: Candle.Operations.GetLinkedAccountsActivity.Input.Query
      public struct Headers : Swift.Sendable, Swift.Hashable {
        public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Candle.Operations.GetLinkedAccountsActivity.AcceptableContentType>]
        public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Candle.Operations.GetLinkedAccountsActivity.AcceptableContentType>] = .defaultValues())
        public func hash(into hasher: inout Swift.Hasher)
        public static func == (a: Candle.Operations.GetLinkedAccountsActivity.Input.Headers, b: Candle.Operations.GetLinkedAccountsActivity.Input.Headers) -> Swift.Bool
        public var hashValue: Swift.Int {
          get
        }
      }
      public var headers: Candle.Operations.GetLinkedAccountsActivity.Input.Headers
      public init(query: Candle.Operations.GetLinkedAccountsActivity.Input.Query = .init(), headers: Candle.Operations.GetLinkedAccountsActivity.Input.Headers = .init())
      public func hash(into hasher: inout Swift.Hasher)
      public static func == (a: Candle.Operations.GetLinkedAccountsActivity.Input, b: Candle.Operations.GetLinkedAccountsActivity.Input) -> Swift.Bool
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public enum Output : Swift.Sendable, Swift.Hashable {
      public struct Ok : Swift.Sendable, Swift.Hashable {
        public struct Headers : Swift.Sendable, Swift.Hashable {
          @frozen public enum ContentTypePayload : Swift.String, Swift.Codable, Swift.Hashable, Swift.Sendable, Swift.CaseIterable {
            case applicationJson
            public init?(rawValue: Swift.String)
            public typealias AllCases = [Candle.Operations.GetLinkedAccountsActivity.Output.Ok.Headers.ContentTypePayload]
            public typealias RawValue = Swift.String
            nonisolated public static var allCases: [Candle.Operations.GetLinkedAccountsActivity.Output.Ok.Headers.ContentTypePayload] {
              get
            }
            public var rawValue: Swift.String {
              get
            }
          }
          public var contentType: Candle.Operations.GetLinkedAccountsActivity.Output.Ok.Headers.ContentTypePayload?
          @frozen public enum ContentEncodingPayload : Swift.String, Swift.Codable, Swift.Hashable, Swift.Sendable, Swift.CaseIterable {
            case gzip
            public init?(rawValue: Swift.String)
            public typealias AllCases = [Candle.Operations.GetLinkedAccountsActivity.Output.Ok.Headers.ContentEncodingPayload]
            public typealias RawValue = Swift.String
            nonisolated public static var allCases: [Candle.Operations.GetLinkedAccountsActivity.Output.Ok.Headers.ContentEncodingPayload] {
              get
            }
            public var rawValue: Swift.String {
              get
            }
          }
          public var contentEncoding: Candle.Operations.GetLinkedAccountsActivity.Output.Ok.Headers.ContentEncodingPayload?
          public init(contentType: Candle.Operations.GetLinkedAccountsActivity.Output.Ok.Headers.ContentTypePayload? = nil, contentEncoding: Candle.Operations.GetLinkedAccountsActivity.Output.Ok.Headers.ContentEncodingPayload? = nil)
          public func hash(into hasher: inout Swift.Hasher)
          public static func == (a: Candle.Operations.GetLinkedAccountsActivity.Output.Ok.Headers, b: Candle.Operations.GetLinkedAccountsActivity.Output.Ok.Headers) -> Swift.Bool
          public var hashValue: Swift.Int {
            get
          }
        }
        public var headers: Candle.Operations.GetLinkedAccountsActivity.Output.Ok.Headers
        @frozen public enum Body : Swift.Sendable, Swift.Hashable {
          case json([Candle.Components.Schemas.PortfolioActivityItem])
          public var json: [Candle.Components.Schemas.PortfolioActivityItem] {
            get throws
          }
          public func hash(into hasher: inout Swift.Hasher)
          public static func == (a: Candle.Operations.GetLinkedAccountsActivity.Output.Ok.Body, b: Candle.Operations.GetLinkedAccountsActivity.Output.Ok.Body) -> Swift.Bool
          public var hashValue: Swift.Int {
            get
          }
        }
        public var body: Candle.Operations.GetLinkedAccountsActivity.Output.Ok.Body
        public init(headers: Candle.Operations.GetLinkedAccountsActivity.Output.Ok.Headers = .init(), body: Candle.Operations.GetLinkedAccountsActivity.Output.Ok.Body)
        public func hash(into hasher: inout Swift.Hasher)
        public static func == (a: Candle.Operations.GetLinkedAccountsActivity.Output.Ok, b: Candle.Operations.GetLinkedAccountsActivity.Output.Ok) -> Swift.Bool
        public var hashValue: Swift.Int {
          get
        }
      }
      case ok(Candle.Operations.GetLinkedAccountsActivity.Output.Ok)
      public var ok: Candle.Operations.GetLinkedAccountsActivity.Output.Ok {
        get throws
      }
      public struct Unauthorized : Swift.Sendable, Swift.Hashable {
        public struct Headers : Swift.Sendable, Swift.Hashable {
          @frozen public enum ContentTypePayload : Swift.String, Swift.Codable, Swift.Hashable, Swift.Sendable, Swift.CaseIterable {
            case applicationJson
            public init?(rawValue: Swift.String)
            public typealias AllCases = [Candle.Operations.GetLinkedAccountsActivity.Output.Unauthorized.Headers.ContentTypePayload]
            public typealias RawValue = Swift.String
            nonisolated public static var allCases: [Candle.Operations.GetLinkedAccountsActivity.Output.Unauthorized.Headers.ContentTypePayload] {
              get
            }
            public var rawValue: Swift.String {
              get
            }
          }
          public var contentType: Candle.Operations.GetLinkedAccountsActivity.Output.Unauthorized.Headers.ContentTypePayload?
          public init(contentType: Candle.Operations.GetLinkedAccountsActivity.Output.Unauthorized.Headers.ContentTypePayload? = nil)
          public func hash(into hasher: inout Swift.Hasher)
          public static func == (a: Candle.Operations.GetLinkedAccountsActivity.Output.Unauthorized.Headers, b: Candle.Operations.GetLinkedAccountsActivity.Output.Unauthorized.Headers) -> Swift.Bool
          public var hashValue: Swift.Int {
            get
          }
        }
        public var headers: Candle.Operations.GetLinkedAccountsActivity.Output.Unauthorized.Headers
        @frozen public enum Body : Swift.Sendable, Swift.Hashable {
          public struct JsonPayload : Swift.Codable, Swift.Hashable, Swift.Sendable {
            @frozen public enum KindPayload : Swift.String, Swift.Codable, Swift.Hashable, Swift.Sendable, Swift.CaseIterable {
              case badAuthorization_user
              public init?(rawValue: Swift.String)
              public typealias AllCases = [Candle.Operations.GetLinkedAccountsActivity.Output.Unauthorized.Body.JsonPayload.KindPayload]
              public typealias RawValue = Swift.String
              nonisolated public static var allCases: [Candle.Operations.GetLinkedAccountsActivity.Output.Unauthorized.Body.JsonPayload.KindPayload] {
                get
              }
              public var rawValue: Swift.String {
                get
              }
            }
            public var kind: Candle.Operations.GetLinkedAccountsActivity.Output.Unauthorized.Body.JsonPayload.KindPayload
            public var message: Swift.String
            public var details: Swift.String?
            public init(kind: Candle.Operations.GetLinkedAccountsActivity.Output.Unauthorized.Body.JsonPayload.KindPayload, message: Swift.String, details: Swift.String? = nil)
            public enum CodingKeys : Swift.String, Swift.CodingKey {
              case kind
              case message
              case details
              public init?(rawValue: Swift.String)
              public init?(stringValue: Swift.String)
              public init?(intValue: Swift.Int)
              public typealias RawValue = Swift.String
              public var intValue: Swift.Int? {
                get
              }
              public var rawValue: Swift.String {
                get
              }
              public var stringValue: Swift.String {
                get
              }
            }
            public init(from decoder: any Swift.Decoder) throws
            public func hash(into hasher: inout Swift.Hasher)
            public static func == (a: Candle.Operations.GetLinkedAccountsActivity.Output.Unauthorized.Body.JsonPayload, b: Candle.Operations.GetLinkedAccountsActivity.Output.Unauthorized.Body.JsonPayload) -> Swift.Bool
            public func encode(to encoder: any Swift.Encoder) throws
            public var hashValue: Swift.Int {
              get
            }
          }
          case json(Candle.Operations.GetLinkedAccountsActivity.Output.Unauthorized.Body.JsonPayload)
          public var json: Candle.Operations.GetLinkedAccountsActivity.Output.Unauthorized.Body.JsonPayload {
            get throws
          }
          public func hash(into hasher: inout Swift.Hasher)
          public static func == (a: Candle.Operations.GetLinkedAccountsActivity.Output.Unauthorized.Body, b: Candle.Operations.GetLinkedAccountsActivity.Output.Unauthorized.Body) -> Swift.Bool
          public var hashValue: Swift.Int {
            get
          }
        }
        public var body: Candle.Operations.GetLinkedAccountsActivity.Output.Unauthorized.Body
        public init(headers: Candle.Operations.GetLinkedAccountsActivity.Output.Unauthorized.Headers = .init(), body: Candle.Operations.GetLinkedAccountsActivity.Output.Unauthorized.Body)
        public func hash(into hasher: inout Swift.Hasher)
        public static func == (a: Candle.Operations.GetLinkedAccountsActivity.Output.Unauthorized, b: Candle.Operations.GetLinkedAccountsActivity.Output.Unauthorized) -> Swift.Bool
        public var hashValue: Swift.Int {
          get
        }
      }
      case unauthorized(Candle.Operations.GetLinkedAccountsActivity.Output.Unauthorized)
      public var unauthorized: Candle.Operations.GetLinkedAccountsActivity.Output.Unauthorized {
        get throws
      }
      public struct NotFound : Swift.Sendable, Swift.Hashable {
        public struct Headers : Swift.Sendable, Swift.Hashable {
          @frozen public enum ContentTypePayload : Swift.String, Swift.Codable, Swift.Hashable, Swift.Sendable, Swift.CaseIterable {
            case applicationJson
            public init?(rawValue: Swift.String)
            public typealias AllCases = [Candle.Operations.GetLinkedAccountsActivity.Output.NotFound.Headers.ContentTypePayload]
            public typealias RawValue = Swift.String
            nonisolated public static var allCases: [Candle.Operations.GetLinkedAccountsActivity.Output.NotFound.Headers.ContentTypePayload] {
              get
            }
            public var rawValue: Swift.String {
              get
            }
          }
          public var contentType: Candle.Operations.GetLinkedAccountsActivity.Output.NotFound.Headers.ContentTypePayload?
          public init(contentType: Candle.Operations.GetLinkedAccountsActivity.Output.NotFound.Headers.ContentTypePayload? = nil)
          public func hash(into hasher: inout Swift.Hasher)
          public static func == (a: Candle.Operations.GetLinkedAccountsActivity.Output.NotFound.Headers, b: Candle.Operations.GetLinkedAccountsActivity.Output.NotFound.Headers) -> Swift.Bool
          public var hashValue: Swift.Int {
            get
          }
        }
        public var headers: Candle.Operations.GetLinkedAccountsActivity.Output.NotFound.Headers
        @frozen public enum Body : Swift.Sendable, Swift.Hashable {
          public struct JsonPayload : Swift.Codable, Swift.Hashable, Swift.Sendable {
            @frozen public enum KindPayload : Swift.String, Swift.Codable, Swift.Hashable, Swift.Sendable, Swift.CaseIterable {
              case notFound_user
              public init?(rawValue: Swift.String)
              public typealias AllCases = [Candle.Operations.GetLinkedAccountsActivity.Output.NotFound.Body.JsonPayload.KindPayload]
              public typealias RawValue = Swift.String
              nonisolated public static var allCases: [Candle.Operations.GetLinkedAccountsActivity.Output.NotFound.Body.JsonPayload.KindPayload] {
                get
              }
              public var rawValue: Swift.String {
                get
              }
            }
            public var kind: Candle.Operations.GetLinkedAccountsActivity.Output.NotFound.Body.JsonPayload.KindPayload
            public var message: Swift.String
            public var details: Swift.String?
            public init(kind: Candle.Operations.GetLinkedAccountsActivity.Output.NotFound.Body.JsonPayload.KindPayload, message: Swift.String, details: Swift.String? = nil)
            public enum CodingKeys : Swift.String, Swift.CodingKey {
              case kind
              case message
              case details
              public init?(rawValue: Swift.String)
              public init?(stringValue: Swift.String)
              public init?(intValue: Swift.Int)
              public typealias RawValue = Swift.String
              public var intValue: Swift.Int? {
                get
              }
              public var rawValue: Swift.String {
                get
              }
              public var stringValue: Swift.String {
                get
              }
            }
            public init(from decoder: any Swift.Decoder) throws
            public func hash(into hasher: inout Swift.Hasher)
            public static func == (a: Candle.Operations.GetLinkedAccountsActivity.Output.NotFound.Body.JsonPayload, b: Candle.Operations.GetLinkedAccountsActivity.Output.NotFound.Body.JsonPayload) -> Swift.Bool
            public func encode(to encoder: any Swift.Encoder) throws
            public var hashValue: Swift.Int {
              get
            }
          }
          case json(Candle.Operations.GetLinkedAccountsActivity.Output.NotFound.Body.JsonPayload)
          public var json: Candle.Operations.GetLinkedAccountsActivity.Output.NotFound.Body.JsonPayload {
            get throws
          }
          public func hash(into hasher: inout Swift.Hasher)
          public static func == (a: Candle.Operations.GetLinkedAccountsActivity.Output.NotFound.Body, b: Candle.Operations.GetLinkedAccountsActivity.Output.NotFound.Body) -> Swift.Bool
          public var hashValue: Swift.Int {
            get
          }
        }
        public var body: Candle.Operations.GetLinkedAccountsActivity.Output.NotFound.Body
        public init(headers: Candle.Operations.GetLinkedAccountsActivity.Output.NotFound.Headers = .init(), body: Candle.Operations.GetLinkedAccountsActivity.Output.NotFound.Body)
        public func hash(into hasher: inout Swift.Hasher)
        public static func == (a: Candle.Operations.GetLinkedAccountsActivity.Output.NotFound, b: Candle.Operations.GetLinkedAccountsActivity.Output.NotFound) -> Swift.Bool
        public var hashValue: Swift.Int {
          get
        }
      }
      case notFound(Candle.Operations.GetLinkedAccountsActivity.Output.NotFound)
      public var notFound: Candle.Operations.GetLinkedAccountsActivity.Output.NotFound {
        get throws
      }
      public struct UnprocessableContent : Swift.Sendable, Swift.Hashable {
        public struct Headers : Swift.Sendable, Swift.Hashable {
          @frozen public enum ContentTypePayload : Swift.String, Swift.Codable, Swift.Hashable, Swift.Sendable, Swift.CaseIterable {
            case applicationJson
            public init?(rawValue: Swift.String)
            public typealias AllCases = [Candle.Operations.GetLinkedAccountsActivity.Output.UnprocessableContent.Headers.ContentTypePayload]
            public typealias RawValue = Swift.String
            nonisolated public static var allCases: [Candle.Operations.GetLinkedAccountsActivity.Output.UnprocessableContent.Headers.ContentTypePayload] {
              get
            }
            public var rawValue: Swift.String {
              get
            }
          }
          public var contentType: Candle.Operations.GetLinkedAccountsActivity.Output.UnprocessableContent.Headers.ContentTypePayload?
          public init(contentType: Candle.Operations.GetLinkedAccountsActivity.Output.UnprocessableContent.Headers.ContentTypePayload? = nil)
          public func hash(into hasher: inout Swift.Hasher)
          public static func == (a: Candle.Operations.GetLinkedAccountsActivity.Output.UnprocessableContent.Headers, b: Candle.Operations.GetLinkedAccountsActivity.Output.UnprocessableContent.Headers) -> Swift.Bool
          public var hashValue: Swift.Int {
            get
          }
        }
        public var headers: Candle.Operations.GetLinkedAccountsActivity.Output.UnprocessableContent.Headers
        @frozen public enum Body : Swift.Sendable, Swift.Hashable {
          public struct JsonPayload : Swift.Codable, Swift.Hashable, Swift.Sendable {
            @frozen public enum KindPayload : Swift.String, Swift.Codable, Swift.Hashable, Swift.Sendable, Swift.CaseIterable {
              case schemaInvalid_request
              public init?(rawValue: Swift.String)
              public typealias AllCases = [Candle.Operations.GetLinkedAccountsActivity.Output.UnprocessableContent.Body.JsonPayload.KindPayload]
              public typealias RawValue = Swift.String
              nonisolated public static var allCases: [Candle.Operations.GetLinkedAccountsActivity.Output.UnprocessableContent.Body.JsonPayload.KindPayload] {
                get
              }
              public var rawValue: Swift.String {
                get
              }
            }
            public var kind: Candle.Operations.GetLinkedAccountsActivity.Output.UnprocessableContent.Body.JsonPayload.KindPayload
            public var message: Swift.String
            public var details: Swift.String?
            public init(kind: Candle.Operations.GetLinkedAccountsActivity.Output.UnprocessableContent.Body.JsonPayload.KindPayload, message: Swift.String, details: Swift.String? = nil)
            public enum CodingKeys : Swift.String, Swift.CodingKey {
              case kind
              case message
              case details
              public init?(rawValue: Swift.String)
              public init?(stringValue: Swift.String)
              public init?(intValue: Swift.Int)
              public typealias RawValue = Swift.String
              public var intValue: Swift.Int? {
                get
              }
              public var rawValue: Swift.String {
                get
              }
              public var stringValue: Swift.String {
                get
              }
            }
            public init(from decoder: any Swift.Decoder) throws
            public func hash(into hasher: inout Swift.Hasher)
            public static func == (a: Candle.Operations.GetLinkedAccountsActivity.Output.UnprocessableContent.Body.JsonPayload, b: Candle.Operations.GetLinkedAccountsActivity.Output.UnprocessableContent.Body.JsonPayload) -> Swift.Bool
            public func encode(to encoder: any Swift.Encoder) throws
            public var hashValue: Swift.Int {
              get
            }
          }
          case json(Candle.Operations.GetLinkedAccountsActivity.Output.UnprocessableContent.Body.JsonPayload)
          public var json: Candle.Operations.GetLinkedAccountsActivity.Output.UnprocessableContent.Body.JsonPayload {
            get throws
          }
          public func hash(into hasher: inout Swift.Hasher)
          public static func == (a: Candle.Operations.GetLinkedAccountsActivity.Output.UnprocessableContent.Body, b: Candle.Operations.GetLinkedAccountsActivity.Output.UnprocessableContent.Body) -> Swift.Bool
          public var hashValue: Swift.Int {
            get
          }
        }
        public var body: Candle.Operations.GetLinkedAccountsActivity.Output.UnprocessableContent.Body
        public init(headers: Candle.Operations.GetLinkedAccountsActivity.Output.UnprocessableContent.Headers = .init(), body: Candle.Operations.GetLinkedAccountsActivity.Output.UnprocessableContent.Body)
        public func hash(into hasher: inout Swift.Hasher)
        public static func == (a: Candle.Operations.GetLinkedAccountsActivity.Output.UnprocessableContent, b: Candle.Operations.GetLinkedAccountsActivity.Output.UnprocessableContent) -> Swift.Bool
        public var hashValue: Swift.Int {
          get
        }
      }
      case unprocessableContent(Candle.Operations.GetLinkedAccountsActivity.Output.UnprocessableContent)
      public var unprocessableContent: Candle.Operations.GetLinkedAccountsActivity.Output.UnprocessableContent {
        get throws
      }
      public struct InternalServerError : Swift.Sendable, Swift.Hashable {
        public struct Headers : Swift.Sendable, Swift.Hashable {
          @frozen public enum ContentTypePayload : Swift.String, Swift.Codable, Swift.Hashable, Swift.Sendable, Swift.CaseIterable {
            case applicationJson
            public init?(rawValue: Swift.String)
            public typealias AllCases = [Candle.Operations.GetLinkedAccountsActivity.Output.InternalServerError.Headers.ContentTypePayload]
            public typealias RawValue = Swift.String
            nonisolated public static var allCases: [Candle.Operations.GetLinkedAccountsActivity.Output.InternalServerError.Headers.ContentTypePayload] {
              get
            }
            public var rawValue: Swift.String {
              get
            }
          }
          public var contentType: Candle.Operations.GetLinkedAccountsActivity.Output.InternalServerError.Headers.ContentTypePayload?
          public init(contentType: Candle.Operations.GetLinkedAccountsActivity.Output.InternalServerError.Headers.ContentTypePayload? = nil)
          public func hash(into hasher: inout Swift.Hasher)
          public static func == (a: Candle.Operations.GetLinkedAccountsActivity.Output.InternalServerError.Headers, b: Candle.Operations.GetLinkedAccountsActivity.Output.InternalServerError.Headers) -> Swift.Bool
          public var hashValue: Swift.Int {
            get
          }
        }
        public var headers: Candle.Operations.GetLinkedAccountsActivity.Output.InternalServerError.Headers
        @frozen public enum Body : Swift.Sendable, Swift.Hashable {
          public struct JsonPayload : Swift.Codable, Swift.Hashable, Swift.Sendable {
            @frozen public enum KindPayload : Swift.String, Swift.Codable, Swift.Hashable, Swift.Sendable, Swift.CaseIterable {
              case unexpected
              public init?(rawValue: Swift.String)
              public typealias AllCases = [Candle.Operations.GetLinkedAccountsActivity.Output.InternalServerError.Body.JsonPayload.KindPayload]
              public typealias RawValue = Swift.String
              nonisolated public static var allCases: [Candle.Operations.GetLinkedAccountsActivity.Output.InternalServerError.Body.JsonPayload.KindPayload] {
                get
              }
              public var rawValue: Swift.String {
                get
              }
            }
            public var kind: Candle.Operations.GetLinkedAccountsActivity.Output.InternalServerError.Body.JsonPayload.KindPayload
            public var message: Swift.String
            public var details: Swift.String?
            public init(kind: Candle.Operations.GetLinkedAccountsActivity.Output.InternalServerError.Body.JsonPayload.KindPayload, message: Swift.String, details: Swift.String? = nil)
            public enum CodingKeys : Swift.String, Swift.CodingKey {
              case kind
              case message
              case details
              public init?(rawValue: Swift.String)
              public init?(stringValue: Swift.String)
              public init?(intValue: Swift.Int)
              public typealias RawValue = Swift.String
              public var intValue: Swift.Int? {
                get
              }
              public var rawValue: Swift.String {
                get
              }
              public var stringValue: Swift.String {
                get
              }
            }
            public init(from decoder: any Swift.Decoder) throws
            public func hash(into hasher: inout Swift.Hasher)
            public static func == (a: Candle.Operations.GetLinkedAccountsActivity.Output.InternalServerError.Body.JsonPayload, b: Candle.Operations.GetLinkedAccountsActivity.Output.InternalServerError.Body.JsonPayload) -> Swift.Bool
            public func encode(to encoder: any Swift.Encoder) throws
            public var hashValue: Swift.Int {
              get
            }
          }
          case json(Candle.Operations.GetLinkedAccountsActivity.Output.InternalServerError.Body.JsonPayload)
          public var json: Candle.Operations.GetLinkedAccountsActivity.Output.InternalServerError.Body.JsonPayload {
            get throws
          }
          public func hash(into hasher: inout Swift.Hasher)
          public static func == (a: Candle.Operations.GetLinkedAccountsActivity.Output.InternalServerError.Body, b: Candle.Operations.GetLinkedAccountsActivity.Output.InternalServerError.Body) -> Swift.Bool
          public var hashValue: Swift.Int {
            get
          }
        }
        public var body: Candle.Operations.GetLinkedAccountsActivity.Output.InternalServerError.Body
        public init(headers: Candle.Operations.GetLinkedAccountsActivity.Output.InternalServerError.Headers = .init(), body: Candle.Operations.GetLinkedAccountsActivity.Output.InternalServerError.Body)
        public func hash(into hasher: inout Swift.Hasher)
        public static func == (a: Candle.Operations.GetLinkedAccountsActivity.Output.InternalServerError, b: Candle.Operations.GetLinkedAccountsActivity.Output.InternalServerError) -> Swift.Bool
        public var hashValue: Swift.Int {
          get
        }
      }
      case internalServerError(Candle.Operations.GetLinkedAccountsActivity.Output.InternalServerError)
      public var internalServerError: Candle.Operations.GetLinkedAccountsActivity.Output.InternalServerError {
        get throws
      }
      case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
      public func hash(into hasher: inout Swift.Hasher)
      public static func == (a: Candle.Operations.GetLinkedAccountsActivity.Output, b: Candle.Operations.GetLinkedAccountsActivity.Output) -> Swift.Bool
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public enum AcceptableContentType : OpenAPIRuntime.AcceptableProtocol {
      case json
      case other(Swift.String)
      public init?(rawValue: Swift.String)
      public var rawValue: Swift.String {
        get
      }
      public static var allCases: [Candle.Operations.GetLinkedAccountsActivity.AcceptableContentType] {
        get
      }
      public typealias AllCases = [Candle.Operations.GetLinkedAccountsActivity.AcceptableContentType]
      public typealias RawValue = Swift.String
    }
  }
}
public enum ConnectionResult : Swift.Error {
  case closed
  case lost
  public static func == (a: Candle.ConnectionResult, b: Candle.ConnectionResult) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers final public actor Session : Swift.Sendable {
  public static func open(using urlSessionConfiguration: Foundation.URLSessionConfiguration, authorizationToken: Swift.String, onClose: @escaping @_Concurrency.MainActor @Sendable (Candle.ConnectionResult) -> Swift.Void) async -> Candle.Session?
  @objc deinit
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  @_semantics("defaultActor") nonisolated final public var unownedExecutor: _Concurrency.UnownedSerialExecutor {
    get
  }
}
public protocol ToolCallRequest : Swift.Decodable, Swift.Encodable {
  var name: Swift.String { get }
  var arguments: Swift.String { get }
}
@available(macOS 14, iOS 17.0, *)
public enum PresentationStyle {
  case fullScreen
  case sheet
  public static func == (a: Candle.PresentationStyle, b: Candle.PresentationStyle) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public typealias CandleLinkedAccountAction = (_ linkedAccount: Candle.Models.LinkedAccount) -> Swift.Void
@available(macOS 14, iOS 17.0, *)
extension SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public func candleLinkSheet(isPresented: SwiftUICore.Binding<Swift.Bool>, customerName: Swift.String? = nil, cornerRadius: CoreFoundation.CGFloat = 24, showSandbox: Swift.Bool = false, showDynamicLoading: Swift.Bool = true, presentationStyle: Candle.PresentationStyle = .sheet, presentationBackground: SwiftUICore.AnyShapeStyle? = nil, action: @escaping Candle.CandleLinkedAccountAction) -> some SwiftUICore.View
  
  @_Concurrency.MainActor @preconcurrency public func candleLinkSheet(isPresented: SwiftUICore.Binding<Swift.Bool>, service: Candle.Models.SupportedService?, customerName: Swift.String? = nil, cornerRadius: CoreFoundation.CGFloat = 24, showSandbox: Swift.Bool = false, showDynamicLoading: Swift.Bool = true, presentationStyle: Candle.PresentationStyle = .sheet, presentationBackground: SwiftUICore.AnyShapeStyle? = nil, action: @escaping Candle.CandleLinkedAccountAction) -> some SwiftUICore.View
  
}
@available(macOS 14, iOS 17.0, *)
extension Candle.CandleClient : Swift.Sendable {}
extension Candle.Components.Schemas.SupportedService : Swift.RawRepresentable {}
extension Candle.Components.Schemas.SupportedService : Swift.BitwiseCopyable {}
extension Candle.Components.Schemas.Service : Swift.RawRepresentable {}
extension Candle.Components.Schemas.Service : Swift.BitwiseCopyable {}
extension Candle.Components.Schemas.AppUser.CodingKeys : Swift.Equatable {}
extension Candle.Components.Schemas.AppUser.CodingKeys : Swift.Hashable {}
extension Candle.Components.Schemas.AppUser.CodingKeys : Swift.RawRepresentable {}
extension Candle.Components.Schemas.LinkedAccount.CodingKeys : Swift.Equatable {}
extension Candle.Components.Schemas.LinkedAccount.CodingKeys : Swift.Hashable {}
extension Candle.Components.Schemas.LinkedAccount.CodingKeys : Swift.RawRepresentable {}
extension Candle.Components.Schemas.InactiveLinkedAccountDetails.StatePayload : Swift.RawRepresentable {}
extension Candle.Components.Schemas.InactiveLinkedAccountDetails.StatePayload : Swift.BitwiseCopyable {}
extension Candle.Components.Schemas.InactiveLinkedAccountDetails.CodingKeys : Swift.Equatable {}
extension Candle.Components.Schemas.InactiveLinkedAccountDetails.CodingKeys : Swift.Hashable {}
extension Candle.Components.Schemas.InactiveLinkedAccountDetails.CodingKeys : Swift.RawRepresentable {}
extension Candle.Components.Schemas.ActiveLinkedAccountDetails.StatePayload : Swift.RawRepresentable {}
extension Candle.Components.Schemas.ActiveLinkedAccountDetails.StatePayload : Swift.BitwiseCopyable {}
extension Candle.Components.Schemas.ActiveLinkedAccountDetails.CodingKeys : Swift.Equatable {}
extension Candle.Components.Schemas.ActiveLinkedAccountDetails.CodingKeys : Swift.Hashable {}
extension Candle.Components.Schemas.ActiveLinkedAccountDetails.CodingKeys : Swift.RawRepresentable {}
extension Candle.Components.Schemas.ServiceCredentialsRequest.StepPayload : Swift.RawRepresentable {}
extension Candle.Components.Schemas.ServiceCredentialsRequest.StepPayload : Swift.BitwiseCopyable {}
extension Candle.Components.Schemas.ServiceCredentialsRequest.CodingKeys : Swift.Equatable {}
extension Candle.Components.Schemas.ServiceCredentialsRequest.CodingKeys : Swift.Hashable {}
extension Candle.Components.Schemas.ServiceCredentialsRequest.CodingKeys : Swift.RawRepresentable {}
extension Candle.Components.Schemas.DemoServiceCredentials.ServicePayload : Swift.RawRepresentable {}
extension Candle.Components.Schemas.DemoServiceCredentials.ServicePayload : Swift.BitwiseCopyable {}
extension Candle.Components.Schemas.DemoServiceCredentials.CodingKeys : Swift.Equatable {}
extension Candle.Components.Schemas.DemoServiceCredentials.CodingKeys : Swift.Hashable {}
extension Candle.Components.Schemas.DemoServiceCredentials.CodingKeys : Swift.RawRepresentable {}
extension Candle.Components.Schemas.RobinhoodServiceCredentials.ServicePayload : Swift.RawRepresentable {}
extension Candle.Components.Schemas.RobinhoodServiceCredentials.ServicePayload : Swift.BitwiseCopyable {}
extension Candle.Components.Schemas.RobinhoodServiceCredentials.CodingKeys : Swift.Equatable {}
extension Candle.Components.Schemas.RobinhoodServiceCredentials.CodingKeys : Swift.Hashable {}
extension Candle.Components.Schemas.RobinhoodServiceCredentials.CodingKeys : Swift.RawRepresentable {}
extension Candle.Components.Schemas.VenmoServiceCredentials.ServicePayload : Swift.RawRepresentable {}
extension Candle.Components.Schemas.VenmoServiceCredentials.ServicePayload : Swift.BitwiseCopyable {}
extension Candle.Components.Schemas.VenmoServiceCredentials.CodingKeys : Swift.Equatable {}
extension Candle.Components.Schemas.VenmoServiceCredentials.CodingKeys : Swift.Hashable {}
extension Candle.Components.Schemas.VenmoServiceCredentials.CodingKeys : Swift.RawRepresentable {}
extension Candle.Components.Schemas.CashAppServiceCredentials.ServicePayload : Swift.RawRepresentable {}
extension Candle.Components.Schemas.CashAppServiceCredentials.ServicePayload : Swift.BitwiseCopyable {}
extension Candle.Components.Schemas.CashAppServiceCredentials.CodingKeys : Swift.Equatable {}
extension Candle.Components.Schemas.CashAppServiceCredentials.CodingKeys : Swift.Hashable {}
extension Candle.Components.Schemas.CashAppServiceCredentials.CodingKeys : Swift.RawRepresentable {}
extension Candle.Components.Schemas.AppleServiceCredentials.ServicePayload : Swift.RawRepresentable {}
extension Candle.Components.Schemas.AppleServiceCredentials.ServicePayload : Swift.BitwiseCopyable {}
extension Candle.Components.Schemas.AppleServiceCredentials.CodingKeys : Swift.Equatable {}
extension Candle.Components.Schemas.AppleServiceCredentials.CodingKeys : Swift.Hashable {}
extension Candle.Components.Schemas.AppleServiceCredentials.CodingKeys : Swift.RawRepresentable {}
extension Candle.Components.Schemas.MFAResponseRequest.StepPayload : Swift.RawRepresentable {}
extension Candle.Components.Schemas.MFAResponseRequest.StepPayload : Swift.BitwiseCopyable {}
extension Candle.Components.Schemas.MFAResponseRequest.CodingKeys : Swift.Equatable {}
extension Candle.Components.Schemas.MFAResponseRequest.CodingKeys : Swift.Hashable {}
extension Candle.Components.Schemas.MFAResponseRequest.CodingKeys : Swift.RawRepresentable {}
extension Candle.Components.Schemas.MFACodeResponse.MfaRequiredPayload : Swift.RawRepresentable {}
extension Candle.Components.Schemas.MFACodeResponse.MfaRequiredPayload : Swift.BitwiseCopyable {}
extension Candle.Components.Schemas.MFACodeResponse.CodingKeys : Swift.Equatable {}
extension Candle.Components.Schemas.MFACodeResponse.CodingKeys : Swift.Hashable {}
extension Candle.Components.Schemas.MFACodeResponse.CodingKeys : Swift.RawRepresentable {}
extension Candle.Components.Schemas.MFALinkResponse.MfaRequiredPayload : Swift.RawRepresentable {}
extension Candle.Components.Schemas.MFALinkResponse.MfaRequiredPayload : Swift.BitwiseCopyable {}
extension Candle.Components.Schemas.MFALinkResponse.CodingKeys : Swift.Equatable {}
extension Candle.Components.Schemas.MFALinkResponse.CodingKeys : Swift.Hashable {}
extension Candle.Components.Schemas.MFALinkResponse.CodingKeys : Swift.RawRepresentable {}
extension Candle.Components.Schemas.MFACodeRequest.MfaRequiredPayload : Swift.RawRepresentable {}
extension Candle.Components.Schemas.MFACodeRequest.MfaRequiredPayload : Swift.BitwiseCopyable {}
extension Candle.Components.Schemas.MFACodeRequest.CodingKeys : Swift.Equatable {}
extension Candle.Components.Schemas.MFACodeRequest.CodingKeys : Swift.Hashable {}
extension Candle.Components.Schemas.MFACodeRequest.CodingKeys : Swift.RawRepresentable {}
extension Candle.Components.Schemas.MFACodeDeliveryLocation : Swift.RawRepresentable {}
extension Candle.Components.Schemas.MFACodeDeliveryLocation : Swift.BitwiseCopyable {}
extension Candle.Components.Schemas.MFALinkRequest.MfaRequiredPayload : Swift.RawRepresentable {}
extension Candle.Components.Schemas.MFALinkRequest.MfaRequiredPayload : Swift.BitwiseCopyable {}
extension Candle.Components.Schemas.MFALinkRequest.CodingKeys : Swift.Equatable {}
extension Candle.Components.Schemas.MFALinkRequest.CodingKeys : Swift.Hashable {}
extension Candle.Components.Schemas.MFALinkRequest.CodingKeys : Swift.RawRepresentable {}
extension Candle.Components.Schemas.PrimaryFiatHoldingAccount.CodingKeys : Swift.Equatable {}
extension Candle.Components.Schemas.PrimaryFiatHoldingAccount.CodingKeys : Swift.Hashable {}
extension Candle.Components.Schemas.PrimaryFiatHoldingAccount.CodingKeys : Swift.RawRepresentable {}
extension Candle.Components.Schemas.LegalAccountKind : Swift.RawRepresentable {}
extension Candle.Components.Schemas.LegalAccountKind : Swift.BitwiseCopyable {}
extension Candle.Components.Schemas.FiatHoldingAccountRef.RefKindPayload : Swift.RawRepresentable {}
extension Candle.Components.Schemas.FiatHoldingAccountRef.RefKindPayload : Swift.BitwiseCopyable {}
extension Candle.Components.Schemas.FiatHoldingAccountRef.CodingKeys : Swift.Equatable {}
extension Candle.Components.Schemas.FiatHoldingAccountRef.CodingKeys : Swift.Hashable {}
extension Candle.Components.Schemas.FiatHoldingAccountRef.CodingKeys : Swift.RawRepresentable {}
extension Candle.Components.Schemas.ACHDetails.CodingKeys : Swift.Equatable {}
extension Candle.Components.Schemas.ACHDetails.CodingKeys : Swift.Hashable {}
extension Candle.Components.Schemas.ACHDetails.CodingKeys : Swift.RawRepresentable {}
extension Candle.Components.Schemas.ACHAccountKind : Swift.RawRepresentable {}
extension Candle.Components.Schemas.ACHAccountKind : Swift.BitwiseCopyable {}
extension Candle.Components.Schemas.WireDetails.CodingKeys : Swift.Equatable {}
extension Candle.Components.Schemas.WireDetails.CodingKeys : Swift.Hashable {}
extension Candle.Components.Schemas.WireDetails.CodingKeys : Swift.RawRepresentable {}
extension Candle.Components.Schemas.OwnerFiatHoldingAccountDetails.RefKindPayload : Swift.RawRepresentable {}
extension Candle.Components.Schemas.OwnerFiatHoldingAccountDetails.RefKindPayload : Swift.BitwiseCopyable {}
extension Candle.Components.Schemas.OwnerFiatHoldingAccountDetails.CodingKeys : Swift.Equatable {}
extension Candle.Components.Schemas.OwnerFiatHoldingAccountDetails.CodingKeys : Swift.Hashable {}
extension Candle.Components.Schemas.OwnerFiatHoldingAccountDetails.CodingKeys : Swift.RawRepresentable {}
extension Candle.Components.Schemas.LinkFiatHoldingAccountDetails.RefKindPayload : Swift.RawRepresentable {}
extension Candle.Components.Schemas.LinkFiatHoldingAccountDetails.RefKindPayload : Swift.BitwiseCopyable {}
extension Candle.Components.Schemas.LinkFiatHoldingAccountDetails.CodingKeys : Swift.Equatable {}
extension Candle.Components.Schemas.LinkFiatHoldingAccountDetails.CodingKeys : Swift.Hashable {}
extension Candle.Components.Schemas.LinkFiatHoldingAccountDetails.CodingKeys : Swift.RawRepresentable {}
extension Candle.Components.Schemas.AssetKind : Swift.RawRepresentable {}
extension Candle.Components.Schemas.AssetKind : Swift.BitwiseCopyable {}
extension Candle.Components.Schemas.TransactionActivityItem.ActivityKindPayload : Swift.RawRepresentable {}
extension Candle.Components.Schemas.TransactionActivityItem.ActivityKindPayload : Swift.BitwiseCopyable {}
extension Candle.Components.Schemas.TransactionActivityItem.StatePayload : Swift.RawRepresentable {}
extension Candle.Components.Schemas.TransactionActivityItem.StatePayload : Swift.BitwiseCopyable {}
extension Candle.Components.Schemas.TransactionActivityItem.CodingKeys : Swift.Equatable {}
extension Candle.Components.Schemas.TransactionActivityItem.CodingKeys : Swift.Hashable {}
extension Candle.Components.Schemas.TransactionActivityItem.CodingKeys : Swift.RawRepresentable {}
extension Candle.Components.Schemas.TransactionCounterparty.CodingKeys : Swift.Equatable {}
extension Candle.Components.Schemas.TransactionCounterparty.CodingKeys : Swift.Hashable {}
extension Candle.Components.Schemas.TransactionCounterparty.CodingKeys : Swift.RawRepresentable {}
extension Candle.Components.Schemas.TransactionLocation.CodingKeys : Swift.Equatable {}
extension Candle.Components.Schemas.TransactionLocation.CodingKeys : Swift.Hashable {}
extension Candle.Components.Schemas.TransactionLocation.CodingKeys : Swift.RawRepresentable {}
extension Candle.Components.Schemas.OrderActivityItem.ActivityKindPayload : Swift.RawRepresentable {}
extension Candle.Components.Schemas.OrderActivityItem.ActivityKindPayload : Swift.BitwiseCopyable {}
extension Candle.Components.Schemas.OrderActivityItem.CodingKeys : Swift.Equatable {}
extension Candle.Components.Schemas.OrderActivityItem.CodingKeys : Swift.Hashable {}
extension Candle.Components.Schemas.OrderActivityItem.CodingKeys : Swift.RawRepresentable {}
extension Candle.Components.Schemas.OrderKind : Swift.RawRepresentable {}
extension Candle.Components.Schemas.OrderKind : Swift.BitwiseCopyable {}
extension Candle.Components.Schemas.OrderEmptyDetails.StatePayload : Swift.RawRepresentable {}
extension Candle.Components.Schemas.OrderEmptyDetails.StatePayload : Swift.BitwiseCopyable {}
extension Candle.Components.Schemas.OrderEmptyDetails.CodingKeys : Swift.Equatable {}
extension Candle.Components.Schemas.OrderEmptyDetails.CodingKeys : Swift.Hashable {}
extension Candle.Components.Schemas.OrderEmptyDetails.CodingKeys : Swift.RawRepresentable {}
extension Candle.Components.Schemas.OrderValueDetails.StatePayload : Swift.RawRepresentable {}
extension Candle.Components.Schemas.OrderValueDetails.StatePayload : Swift.BitwiseCopyable {}
extension Candle.Components.Schemas.OrderValueDetails.CodingKeys : Swift.Equatable {}
extension Candle.Components.Schemas.OrderValueDetails.CodingKeys : Swift.Hashable {}
extension Candle.Components.Schemas.OrderValueDetails.CodingKeys : Swift.RawRepresentable {}
extension Candle.Operations.PostUsers.Output.Unauthorized.Headers.ContentTypePayload : Swift.RawRepresentable {}
extension Candle.Operations.PostUsers.Output.Unauthorized.Headers.ContentTypePayload : Swift.BitwiseCopyable {}
extension Candle.Operations.PostUsers.Output.Unauthorized.Body.JsonPayload.KindPayload : Swift.RawRepresentable {}
extension Candle.Operations.PostUsers.Output.Unauthorized.Body.JsonPayload.KindPayload : Swift.BitwiseCopyable {}
extension Candle.Operations.PostUsers.Output.Unauthorized.Body.JsonPayload.CodingKeys : Swift.Equatable {}
extension Candle.Operations.PostUsers.Output.Unauthorized.Body.JsonPayload.CodingKeys : Swift.Hashable {}
extension Candle.Operations.PostUsers.Output.Unauthorized.Body.JsonPayload.CodingKeys : Swift.RawRepresentable {}
extension Candle.Operations.PostUsers.Output.Forbidden.Headers.ContentTypePayload : Swift.RawRepresentable {}
extension Candle.Operations.PostUsers.Output.Forbidden.Headers.ContentTypePayload : Swift.BitwiseCopyable {}
extension Candle.Operations.PostUsers.Output.Forbidden.Body.JsonPayload.KindPayload : Swift.RawRepresentable {}
extension Candle.Operations.PostUsers.Output.Forbidden.Body.JsonPayload.KindPayload : Swift.BitwiseCopyable {}
extension Candle.Operations.PostUsers.Output.Forbidden.Body.JsonPayload.CodingKeys : Swift.Equatable {}
extension Candle.Operations.PostUsers.Output.Forbidden.Body.JsonPayload.CodingKeys : Swift.Hashable {}
extension Candle.Operations.PostUsers.Output.Forbidden.Body.JsonPayload.CodingKeys : Swift.RawRepresentable {}
extension Candle.Operations.PostUsers.Output.NotFound.Headers.ContentTypePayload : Swift.RawRepresentable {}
extension Candle.Operations.PostUsers.Output.NotFound.Headers.ContentTypePayload : Swift.BitwiseCopyable {}
extension Candle.Operations.PostUsers.Output.NotFound.Body.JsonPayload.KindPayload : Swift.RawRepresentable {}
extension Candle.Operations.PostUsers.Output.NotFound.Body.JsonPayload.KindPayload : Swift.BitwiseCopyable {}
extension Candle.Operations.PostUsers.Output.NotFound.Body.JsonPayload.CodingKeys : Swift.Equatable {}
extension Candle.Operations.PostUsers.Output.NotFound.Body.JsonPayload.CodingKeys : Swift.Hashable {}
extension Candle.Operations.PostUsers.Output.NotFound.Body.JsonPayload.CodingKeys : Swift.RawRepresentable {}
extension Candle.Operations.PostUsers.Output.UnprocessableContent.Headers.ContentTypePayload : Swift.RawRepresentable {}
extension Candle.Operations.PostUsers.Output.UnprocessableContent.Headers.ContentTypePayload : Swift.BitwiseCopyable {}
extension Candle.Operations.PostUsers.Output.UnprocessableContent.Body.JsonPayload.KindPayload : Swift.RawRepresentable {}
extension Candle.Operations.PostUsers.Output.UnprocessableContent.Body.JsonPayload.KindPayload : Swift.BitwiseCopyable {}
extension Candle.Operations.PostUsers.Output.UnprocessableContent.Body.JsonPayload.CodingKeys : Swift.Equatable {}
extension Candle.Operations.PostUsers.Output.UnprocessableContent.Body.JsonPayload.CodingKeys : Swift.Hashable {}
extension Candle.Operations.PostUsers.Output.UnprocessableContent.Body.JsonPayload.CodingKeys : Swift.RawRepresentable {}
extension Candle.Operations.PostUsers.Output.TooManyRequests.Headers.ContentTypePayload : Swift.RawRepresentable {}
extension Candle.Operations.PostUsers.Output.TooManyRequests.Headers.ContentTypePayload : Swift.BitwiseCopyable {}
extension Candle.Operations.PostUsers.Output.TooManyRequests.Body.JsonPayload.KindPayload : Swift.RawRepresentable {}
extension Candle.Operations.PostUsers.Output.TooManyRequests.Body.JsonPayload.KindPayload : Swift.BitwiseCopyable {}
extension Candle.Operations.PostUsers.Output.TooManyRequests.Body.JsonPayload.CodingKeys : Swift.Equatable {}
extension Candle.Operations.PostUsers.Output.TooManyRequests.Body.JsonPayload.CodingKeys : Swift.Hashable {}
extension Candle.Operations.PostUsers.Output.TooManyRequests.Body.JsonPayload.CodingKeys : Swift.RawRepresentable {}
extension Candle.Operations.PostUsers.Output.InternalServerError.Headers.ContentTypePayload : Swift.RawRepresentable {}
extension Candle.Operations.PostUsers.Output.InternalServerError.Headers.ContentTypePayload : Swift.BitwiseCopyable {}
extension Candle.Operations.PostUsers.Output.InternalServerError.Body.JsonPayload.KindPayload : Swift.RawRepresentable {}
extension Candle.Operations.PostUsers.Output.InternalServerError.Body.JsonPayload.KindPayload : Swift.BitwiseCopyable {}
extension Candle.Operations.PostUsers.Output.InternalServerError.Body.JsonPayload.CodingKeys : Swift.Equatable {}
extension Candle.Operations.PostUsers.Output.InternalServerError.Body.JsonPayload.CodingKeys : Swift.Hashable {}
extension Candle.Operations.PostUsers.Output.InternalServerError.Body.JsonPayload.CodingKeys : Swift.RawRepresentable {}
extension Candle.Operations.PutUsers.Output.Unauthorized.Headers.ContentTypePayload : Swift.RawRepresentable {}
extension Candle.Operations.PutUsers.Output.Unauthorized.Headers.ContentTypePayload : Swift.BitwiseCopyable {}
extension Candle.Operations.PutUsers.Output.Unauthorized.Body.JsonPayload.KindPayload : Swift.RawRepresentable {}
extension Candle.Operations.PutUsers.Output.Unauthorized.Body.JsonPayload.KindPayload : Swift.BitwiseCopyable {}
extension Candle.Operations.PutUsers.Output.Unauthorized.Body.JsonPayload.CodingKeys : Swift.Equatable {}
extension Candle.Operations.PutUsers.Output.Unauthorized.Body.JsonPayload.CodingKeys : Swift.Hashable {}
extension Candle.Operations.PutUsers.Output.Unauthorized.Body.JsonPayload.CodingKeys : Swift.RawRepresentable {}
extension Candle.Operations.PutUsers.Output.Forbidden.Headers.ContentTypePayload : Swift.RawRepresentable {}
extension Candle.Operations.PutUsers.Output.Forbidden.Headers.ContentTypePayload : Swift.BitwiseCopyable {}
extension Candle.Operations.PutUsers.Output.Forbidden.Body.JsonPayload.KindPayload : Swift.RawRepresentable {}
extension Candle.Operations.PutUsers.Output.Forbidden.Body.JsonPayload.KindPayload : Swift.BitwiseCopyable {}
extension Candle.Operations.PutUsers.Output.Forbidden.Body.JsonPayload.CodingKeys : Swift.Equatable {}
extension Candle.Operations.PutUsers.Output.Forbidden.Body.JsonPayload.CodingKeys : Swift.Hashable {}
extension Candle.Operations.PutUsers.Output.Forbidden.Body.JsonPayload.CodingKeys : Swift.RawRepresentable {}
extension Candle.Operations.PutUsers.Output.NotFound.Headers.ContentTypePayload : Swift.RawRepresentable {}
extension Candle.Operations.PutUsers.Output.NotFound.Headers.ContentTypePayload : Swift.BitwiseCopyable {}
extension Candle.Operations.PutUsers.Output.NotFound.Body.JsonPayload.KindPayload : Swift.RawRepresentable {}
extension Candle.Operations.PutUsers.Output.NotFound.Body.JsonPayload.KindPayload : Swift.BitwiseCopyable {}
extension Candle.Operations.PutUsers.Output.NotFound.Body.JsonPayload.CodingKeys : Swift.Equatable {}
extension Candle.Operations.PutUsers.Output.NotFound.Body.JsonPayload.CodingKeys : Swift.Hashable {}
extension Candle.Operations.PutUsers.Output.NotFound.Body.JsonPayload.CodingKeys : Swift.RawRepresentable {}
extension Candle.Operations.PutUsers.Output.Conflict.Headers.ContentTypePayload : Swift.RawRepresentable {}
extension Candle.Operations.PutUsers.Output.Conflict.Headers.ContentTypePayload : Swift.BitwiseCopyable {}
extension Candle.Operations.PutUsers.Output.Conflict.Body.JsonPayload.KindPayload : Swift.RawRepresentable {}
extension Candle.Operations.PutUsers.Output.Conflict.Body.JsonPayload.KindPayload : Swift.BitwiseCopyable {}
extension Candle.Operations.PutUsers.Output.Conflict.Body.JsonPayload.CodingKeys : Swift.Equatable {}
extension Candle.Operations.PutUsers.Output.Conflict.Body.JsonPayload.CodingKeys : Swift.Hashable {}
extension Candle.Operations.PutUsers.Output.Conflict.Body.JsonPayload.CodingKeys : Swift.RawRepresentable {}
extension Candle.Operations.PutUsers.Output.UnprocessableContent.Headers.ContentTypePayload : Swift.RawRepresentable {}
extension Candle.Operations.PutUsers.Output.UnprocessableContent.Headers.ContentTypePayload : Swift.BitwiseCopyable {}
extension Candle.Operations.PutUsers.Output.UnprocessableContent.Body.JsonPayload.KindPayload : Swift.RawRepresentable {}
extension Candle.Operations.PutUsers.Output.UnprocessableContent.Body.JsonPayload.KindPayload : Swift.BitwiseCopyable {}
extension Candle.Operations.PutUsers.Output.UnprocessableContent.Body.JsonPayload.CodingKeys : Swift.Equatable {}
extension Candle.Operations.PutUsers.Output.UnprocessableContent.Body.JsonPayload.CodingKeys : Swift.Hashable {}
extension Candle.Operations.PutUsers.Output.UnprocessableContent.Body.JsonPayload.CodingKeys : Swift.RawRepresentable {}
extension Candle.Operations.PutUsers.Output.InternalServerError.Headers.ContentTypePayload : Swift.RawRepresentable {}
extension Candle.Operations.PutUsers.Output.InternalServerError.Headers.ContentTypePayload : Swift.BitwiseCopyable {}
extension Candle.Operations.PutUsers.Output.InternalServerError.Body.JsonPayload.KindPayload : Swift.RawRepresentable {}
extension Candle.Operations.PutUsers.Output.InternalServerError.Body.JsonPayload.KindPayload : Swift.BitwiseCopyable {}
extension Candle.Operations.PutUsers.Output.InternalServerError.Body.JsonPayload.CodingKeys : Swift.Equatable {}
extension Candle.Operations.PutUsers.Output.InternalServerError.Body.JsonPayload.CodingKeys : Swift.Hashable {}
extension Candle.Operations.PutUsers.Output.InternalServerError.Body.JsonPayload.CodingKeys : Swift.RawRepresentable {}
extension Candle.Operations.DeleteUsers.Output.Unauthorized.Headers.ContentTypePayload : Swift.RawRepresentable {}
extension Candle.Operations.DeleteUsers.Output.Unauthorized.Headers.ContentTypePayload : Swift.BitwiseCopyable {}
extension Candle.Operations.DeleteUsers.Output.Unauthorized.Body.JsonPayload.KindPayload : Swift.RawRepresentable {}
extension Candle.Operations.DeleteUsers.Output.Unauthorized.Body.JsonPayload.KindPayload : Swift.BitwiseCopyable {}
extension Candle.Operations.DeleteUsers.Output.Unauthorized.Body.JsonPayload.CodingKeys : Swift.Equatable {}
extension Candle.Operations.DeleteUsers.Output.Unauthorized.Body.JsonPayload.CodingKeys : Swift.Hashable {}
extension Candle.Operations.DeleteUsers.Output.Unauthorized.Body.JsonPayload.CodingKeys : Swift.RawRepresentable {}
extension Candle.Operations.DeleteUsers.Output.Forbidden.Headers.ContentTypePayload : Swift.RawRepresentable {}
extension Candle.Operations.DeleteUsers.Output.Forbidden.Headers.ContentTypePayload : Swift.BitwiseCopyable {}
extension Candle.Operations.DeleteUsers.Output.Forbidden.Body.JsonPayload.KindPayload : Swift.RawRepresentable {}
extension Candle.Operations.DeleteUsers.Output.Forbidden.Body.JsonPayload.KindPayload : Swift.BitwiseCopyable {}
extension Candle.Operations.DeleteUsers.Output.Forbidden.Body.JsonPayload.CodingKeys : Swift.Equatable {}
extension Candle.Operations.DeleteUsers.Output.Forbidden.Body.JsonPayload.CodingKeys : Swift.Hashable {}
extension Candle.Operations.DeleteUsers.Output.Forbidden.Body.JsonPayload.CodingKeys : Swift.RawRepresentable {}
extension Candle.Operations.DeleteUsers.Output.NotFound.Headers.ContentTypePayload : Swift.RawRepresentable {}
extension Candle.Operations.DeleteUsers.Output.NotFound.Headers.ContentTypePayload : Swift.BitwiseCopyable {}
extension Candle.Operations.DeleteUsers.Output.NotFound.Body.JsonPayload.KindPayload : Swift.RawRepresentable {}
extension Candle.Operations.DeleteUsers.Output.NotFound.Body.JsonPayload.KindPayload : Swift.BitwiseCopyable {}
extension Candle.Operations.DeleteUsers.Output.NotFound.Body.JsonPayload.CodingKeys : Swift.Equatable {}
extension Candle.Operations.DeleteUsers.Output.NotFound.Body.JsonPayload.CodingKeys : Swift.Hashable {}
extension Candle.Operations.DeleteUsers.Output.NotFound.Body.JsonPayload.CodingKeys : Swift.RawRepresentable {}
extension Candle.Operations.DeleteUsers.Output.UnprocessableContent.Headers.ContentTypePayload : Swift.RawRepresentable {}
extension Candle.Operations.DeleteUsers.Output.UnprocessableContent.Headers.ContentTypePayload : Swift.BitwiseCopyable {}
extension Candle.Operations.DeleteUsers.Output.UnprocessableContent.Body.JsonPayload.KindPayload : Swift.RawRepresentable {}
extension Candle.Operations.DeleteUsers.Output.UnprocessableContent.Body.JsonPayload.KindPayload : Swift.BitwiseCopyable {}
extension Candle.Operations.DeleteUsers.Output.UnprocessableContent.Body.JsonPayload.CodingKeys : Swift.Equatable {}
extension Candle.Operations.DeleteUsers.Output.UnprocessableContent.Body.JsonPayload.CodingKeys : Swift.Hashable {}
extension Candle.Operations.DeleteUsers.Output.UnprocessableContent.Body.JsonPayload.CodingKeys : Swift.RawRepresentable {}
extension Candle.Operations.DeleteUsers.Output.InternalServerError.Headers.ContentTypePayload : Swift.RawRepresentable {}
extension Candle.Operations.DeleteUsers.Output.InternalServerError.Headers.ContentTypePayload : Swift.BitwiseCopyable {}
extension Candle.Operations.DeleteUsers.Output.InternalServerError.Body.JsonPayload.KindPayload : Swift.RawRepresentable {}
extension Candle.Operations.DeleteUsers.Output.InternalServerError.Body.JsonPayload.KindPayload : Swift.BitwiseCopyable {}
extension Candle.Operations.DeleteUsers.Output.InternalServerError.Body.JsonPayload.CodingKeys : Swift.Equatable {}
extension Candle.Operations.DeleteUsers.Output.InternalServerError.Body.JsonPayload.CodingKeys : Swift.Hashable {}
extension Candle.Operations.DeleteUsers.Output.InternalServerError.Body.JsonPayload.CodingKeys : Swift.RawRepresentable {}
extension Candle.Operations.GetLinkedAccounts.Output.Ok.Headers.ContentTypePayload : Swift.RawRepresentable {}
extension Candle.Operations.GetLinkedAccounts.Output.Ok.Headers.ContentTypePayload : Swift.BitwiseCopyable {}
extension Candle.Operations.GetLinkedAccounts.Output.Ok.Headers.ContentEncodingPayload : Swift.RawRepresentable {}
extension Candle.Operations.GetLinkedAccounts.Output.Ok.Headers.ContentEncodingPayload : Swift.BitwiseCopyable {}
extension Candle.Operations.GetLinkedAccounts.Output.Unauthorized.Headers.ContentTypePayload : Swift.RawRepresentable {}
extension Candle.Operations.GetLinkedAccounts.Output.Unauthorized.Headers.ContentTypePayload : Swift.BitwiseCopyable {}
extension Candle.Operations.GetLinkedAccounts.Output.Unauthorized.Body.JsonPayload.KindPayload : Swift.RawRepresentable {}
extension Candle.Operations.GetLinkedAccounts.Output.Unauthorized.Body.JsonPayload.KindPayload : Swift.BitwiseCopyable {}
extension Candle.Operations.GetLinkedAccounts.Output.Unauthorized.Body.JsonPayload.CodingKeys : Swift.Equatable {}
extension Candle.Operations.GetLinkedAccounts.Output.Unauthorized.Body.JsonPayload.CodingKeys : Swift.Hashable {}
extension Candle.Operations.GetLinkedAccounts.Output.Unauthorized.Body.JsonPayload.CodingKeys : Swift.RawRepresentable {}
extension Candle.Operations.GetLinkedAccounts.Output.NotFound.Headers.ContentTypePayload : Swift.RawRepresentable {}
extension Candle.Operations.GetLinkedAccounts.Output.NotFound.Headers.ContentTypePayload : Swift.BitwiseCopyable {}
extension Candle.Operations.GetLinkedAccounts.Output.NotFound.Body.JsonPayload.KindPayload : Swift.RawRepresentable {}
extension Candle.Operations.GetLinkedAccounts.Output.NotFound.Body.JsonPayload.KindPayload : Swift.BitwiseCopyable {}
extension Candle.Operations.GetLinkedAccounts.Output.NotFound.Body.JsonPayload.CodingKeys : Swift.Equatable {}
extension Candle.Operations.GetLinkedAccounts.Output.NotFound.Body.JsonPayload.CodingKeys : Swift.Hashable {}
extension Candle.Operations.GetLinkedAccounts.Output.NotFound.Body.JsonPayload.CodingKeys : Swift.RawRepresentable {}
extension Candle.Operations.GetLinkedAccounts.Output.UnprocessableContent.Headers.ContentTypePayload : Swift.RawRepresentable {}
extension Candle.Operations.GetLinkedAccounts.Output.UnprocessableContent.Headers.ContentTypePayload : Swift.BitwiseCopyable {}
extension Candle.Operations.GetLinkedAccounts.Output.UnprocessableContent.Body.JsonPayload.KindPayload : Swift.RawRepresentable {}
extension Candle.Operations.GetLinkedAccounts.Output.UnprocessableContent.Body.JsonPayload.KindPayload : Swift.BitwiseCopyable {}
extension Candle.Operations.GetLinkedAccounts.Output.UnprocessableContent.Body.JsonPayload.CodingKeys : Swift.Equatable {}
extension Candle.Operations.GetLinkedAccounts.Output.UnprocessableContent.Body.JsonPayload.CodingKeys : Swift.Hashable {}
extension Candle.Operations.GetLinkedAccounts.Output.UnprocessableContent.Body.JsonPayload.CodingKeys : Swift.RawRepresentable {}
extension Candle.Operations.GetLinkedAccounts.Output.InternalServerError.Headers.ContentTypePayload : Swift.RawRepresentable {}
extension Candle.Operations.GetLinkedAccounts.Output.InternalServerError.Headers.ContentTypePayload : Swift.BitwiseCopyable {}
extension Candle.Operations.GetLinkedAccounts.Output.InternalServerError.Body.JsonPayload.KindPayload : Swift.RawRepresentable {}
extension Candle.Operations.GetLinkedAccounts.Output.InternalServerError.Body.JsonPayload.KindPayload : Swift.BitwiseCopyable {}
extension Candle.Operations.GetLinkedAccounts.Output.InternalServerError.Body.JsonPayload.CodingKeys : Swift.Equatable {}
extension Candle.Operations.GetLinkedAccounts.Output.InternalServerError.Body.JsonPayload.CodingKeys : Swift.Hashable {}
extension Candle.Operations.GetLinkedAccounts.Output.InternalServerError.Body.JsonPayload.CodingKeys : Swift.RawRepresentable {}
extension Candle.Operations.PostLinkedAccounts.Output.Created.Headers.ContentTypePayload : Swift.RawRepresentable {}
extension Candle.Operations.PostLinkedAccounts.Output.Created.Headers.ContentTypePayload : Swift.BitwiseCopyable {}
extension Candle.Operations.PostLinkedAccounts.Output.Unauthorized.Headers.ContentTypePayload : Swift.RawRepresentable {}
extension Candle.Operations.PostLinkedAccounts.Output.Unauthorized.Headers.ContentTypePayload : Swift.BitwiseCopyable {}
extension Candle.Operations.PostLinkedAccounts.Output.Unauthorized.Body.JsonPayload.KindPayload : Swift.RawRepresentable {}
extension Candle.Operations.PostLinkedAccounts.Output.Unauthorized.Body.JsonPayload.KindPayload : Swift.BitwiseCopyable {}
extension Candle.Operations.PostLinkedAccounts.Output.Unauthorized.Body.JsonPayload.CodingKeys : Swift.Equatable {}
extension Candle.Operations.PostLinkedAccounts.Output.Unauthorized.Body.JsonPayload.CodingKeys : Swift.Hashable {}
extension Candle.Operations.PostLinkedAccounts.Output.Unauthorized.Body.JsonPayload.CodingKeys : Swift.RawRepresentable {}
extension Candle.Operations.PostLinkedAccounts.Output.NotFound.Headers.ContentTypePayload : Swift.RawRepresentable {}
extension Candle.Operations.PostLinkedAccounts.Output.NotFound.Headers.ContentTypePayload : Swift.BitwiseCopyable {}
extension Candle.Operations.PostLinkedAccounts.Output.NotFound.Body.JsonPayload.KindPayload : Swift.RawRepresentable {}
extension Candle.Operations.PostLinkedAccounts.Output.NotFound.Body.JsonPayload.KindPayload : Swift.BitwiseCopyable {}
extension Candle.Operations.PostLinkedAccounts.Output.NotFound.Body.JsonPayload.CodingKeys : Swift.Equatable {}
extension Candle.Operations.PostLinkedAccounts.Output.NotFound.Body.JsonPayload.CodingKeys : Swift.Hashable {}
extension Candle.Operations.PostLinkedAccounts.Output.NotFound.Body.JsonPayload.CodingKeys : Swift.RawRepresentable {}
extension Candle.Operations.PostLinkedAccounts.Output.Conflict.Headers.ContentTypePayload : Swift.RawRepresentable {}
extension Candle.Operations.PostLinkedAccounts.Output.Conflict.Headers.ContentTypePayload : Swift.BitwiseCopyable {}
extension Candle.Operations.PostLinkedAccounts.Output.Conflict.Body.JsonPayload.KindPayload : Swift.RawRepresentable {}
extension Candle.Operations.PostLinkedAccounts.Output.Conflict.Body.JsonPayload.KindPayload : Swift.BitwiseCopyable {}
extension Candle.Operations.PostLinkedAccounts.Output.Conflict.Body.JsonPayload.CodingKeys : Swift.Equatable {}
extension Candle.Operations.PostLinkedAccounts.Output.Conflict.Body.JsonPayload.CodingKeys : Swift.Hashable {}
extension Candle.Operations.PostLinkedAccounts.Output.Conflict.Body.JsonPayload.CodingKeys : Swift.RawRepresentable {}
extension Candle.Operations.PostLinkedAccounts.Output.UnprocessableContent.Headers.ContentTypePayload : Swift.RawRepresentable {}
extension Candle.Operations.PostLinkedAccounts.Output.UnprocessableContent.Headers.ContentTypePayload : Swift.BitwiseCopyable {}
extension Candle.Operations.PostLinkedAccounts.Output.UnprocessableContent.Body.JsonPayload.KindPayload : Swift.RawRepresentable {}
extension Candle.Operations.PostLinkedAccounts.Output.UnprocessableContent.Body.JsonPayload.KindPayload : Swift.BitwiseCopyable {}
extension Candle.Operations.PostLinkedAccounts.Output.UnprocessableContent.Body.JsonPayload.CodingKeys : Swift.Equatable {}
extension Candle.Operations.PostLinkedAccounts.Output.UnprocessableContent.Body.JsonPayload.CodingKeys : Swift.Hashable {}
extension Candle.Operations.PostLinkedAccounts.Output.UnprocessableContent.Body.JsonPayload.CodingKeys : Swift.RawRepresentable {}
extension Candle.Operations.PostLinkedAccounts.Output.PreconditionRequired.Headers.ContentTypePayload : Swift.RawRepresentable {}
extension Candle.Operations.PostLinkedAccounts.Output.PreconditionRequired.Headers.ContentTypePayload : Swift.BitwiseCopyable {}
extension Candle.Operations.PostLinkedAccounts.Output.InternalServerError.Headers.ContentTypePayload : Swift.RawRepresentable {}
extension Candle.Operations.PostLinkedAccounts.Output.InternalServerError.Headers.ContentTypePayload : Swift.BitwiseCopyable {}
extension Candle.Operations.PostLinkedAccounts.Output.InternalServerError.Body.JsonPayload.KindPayload : Swift.RawRepresentable {}
extension Candle.Operations.PostLinkedAccounts.Output.InternalServerError.Body.JsonPayload.KindPayload : Swift.BitwiseCopyable {}
extension Candle.Operations.PostLinkedAccounts.Output.InternalServerError.Body.JsonPayload.CodingKeys : Swift.Equatable {}
extension Candle.Operations.PostLinkedAccounts.Output.InternalServerError.Body.JsonPayload.CodingKeys : Swift.Hashable {}
extension Candle.Operations.PostLinkedAccounts.Output.InternalServerError.Body.JsonPayload.CodingKeys : Swift.RawRepresentable {}
extension Candle.Operations.DeleteLinkedAccount.Output.NoContent.Headers.ContentTypePayload : Swift.RawRepresentable {}
extension Candle.Operations.DeleteLinkedAccount.Output.NoContent.Headers.ContentTypePayload : Swift.BitwiseCopyable {}
extension Candle.Operations.DeleteLinkedAccount.Output.NoContent.Headers.ContentEncodingPayload : Swift.RawRepresentable {}
extension Candle.Operations.DeleteLinkedAccount.Output.NoContent.Headers.ContentEncodingPayload : Swift.BitwiseCopyable {}
extension Candle.Operations.DeleteLinkedAccount.Output.Unauthorized.Headers.ContentTypePayload : Swift.RawRepresentable {}
extension Candle.Operations.DeleteLinkedAccount.Output.Unauthorized.Headers.ContentTypePayload : Swift.BitwiseCopyable {}
extension Candle.Operations.DeleteLinkedAccount.Output.Unauthorized.Body.JsonPayload.KindPayload : Swift.RawRepresentable {}
extension Candle.Operations.DeleteLinkedAccount.Output.Unauthorized.Body.JsonPayload.KindPayload : Swift.BitwiseCopyable {}
extension Candle.Operations.DeleteLinkedAccount.Output.Unauthorized.Body.JsonPayload.CodingKeys : Swift.Equatable {}
extension Candle.Operations.DeleteLinkedAccount.Output.Unauthorized.Body.JsonPayload.CodingKeys : Swift.Hashable {}
extension Candle.Operations.DeleteLinkedAccount.Output.Unauthorized.Body.JsonPayload.CodingKeys : Swift.RawRepresentable {}
extension Candle.Operations.DeleteLinkedAccount.Output.NotFound.Headers.ContentTypePayload : Swift.RawRepresentable {}
extension Candle.Operations.DeleteLinkedAccount.Output.NotFound.Headers.ContentTypePayload : Swift.BitwiseCopyable {}
extension Candle.Operations.DeleteLinkedAccount.Output.NotFound.Body.JsonPayload.KindPayload : Swift.RawRepresentable {}
extension Candle.Operations.DeleteLinkedAccount.Output.NotFound.Body.JsonPayload.KindPayload : Swift.BitwiseCopyable {}
extension Candle.Operations.DeleteLinkedAccount.Output.NotFound.Body.JsonPayload.CodingKeys : Swift.Equatable {}
extension Candle.Operations.DeleteLinkedAccount.Output.NotFound.Body.JsonPayload.CodingKeys : Swift.Hashable {}
extension Candle.Operations.DeleteLinkedAccount.Output.NotFound.Body.JsonPayload.CodingKeys : Swift.RawRepresentable {}
extension Candle.Operations.DeleteLinkedAccount.Output.Conflict.Headers.ContentTypePayload : Swift.RawRepresentable {}
extension Candle.Operations.DeleteLinkedAccount.Output.Conflict.Headers.ContentTypePayload : Swift.BitwiseCopyable {}
extension Candle.Operations.DeleteLinkedAccount.Output.Conflict.Body.JsonPayload.KindPayload : Swift.RawRepresentable {}
extension Candle.Operations.DeleteLinkedAccount.Output.Conflict.Body.JsonPayload.KindPayload : Swift.BitwiseCopyable {}
extension Candle.Operations.DeleteLinkedAccount.Output.Conflict.Body.JsonPayload.CodingKeys : Swift.Equatable {}
extension Candle.Operations.DeleteLinkedAccount.Output.Conflict.Body.JsonPayload.CodingKeys : Swift.Hashable {}
extension Candle.Operations.DeleteLinkedAccount.Output.Conflict.Body.JsonPayload.CodingKeys : Swift.RawRepresentable {}
extension Candle.Operations.DeleteLinkedAccount.Output.UnprocessableContent.Headers.ContentTypePayload : Swift.RawRepresentable {}
extension Candle.Operations.DeleteLinkedAccount.Output.UnprocessableContent.Headers.ContentTypePayload : Swift.BitwiseCopyable {}
extension Candle.Operations.DeleteLinkedAccount.Output.UnprocessableContent.Body.JsonPayload.KindPayload : Swift.RawRepresentable {}
extension Candle.Operations.DeleteLinkedAccount.Output.UnprocessableContent.Body.JsonPayload.KindPayload : Swift.BitwiseCopyable {}
extension Candle.Operations.DeleteLinkedAccount.Output.UnprocessableContent.Body.JsonPayload.CodingKeys : Swift.Equatable {}
extension Candle.Operations.DeleteLinkedAccount.Output.UnprocessableContent.Body.JsonPayload.CodingKeys : Swift.Hashable {}
extension Candle.Operations.DeleteLinkedAccount.Output.UnprocessableContent.Body.JsonPayload.CodingKeys : Swift.RawRepresentable {}
extension Candle.Operations.DeleteLinkedAccount.Output.InternalServerError.Headers.ContentTypePayload : Swift.RawRepresentable {}
extension Candle.Operations.DeleteLinkedAccount.Output.InternalServerError.Headers.ContentTypePayload : Swift.BitwiseCopyable {}
extension Candle.Operations.DeleteLinkedAccount.Output.InternalServerError.Body.JsonPayload.KindPayload : Swift.RawRepresentable {}
extension Candle.Operations.DeleteLinkedAccount.Output.InternalServerError.Body.JsonPayload.KindPayload : Swift.BitwiseCopyable {}
extension Candle.Operations.DeleteLinkedAccount.Output.InternalServerError.Body.JsonPayload.CodingKeys : Swift.Equatable {}
extension Candle.Operations.DeleteLinkedAccount.Output.InternalServerError.Body.JsonPayload.CodingKeys : Swift.Hashable {}
extension Candle.Operations.DeleteLinkedAccount.Output.InternalServerError.Body.JsonPayload.CodingKeys : Swift.RawRepresentable {}
extension Candle.Operations.GetLinkedAccountsFiatAccounts.Output.Ok.Headers.ContentTypePayload : Swift.RawRepresentable {}
extension Candle.Operations.GetLinkedAccountsFiatAccounts.Output.Ok.Headers.ContentTypePayload : Swift.BitwiseCopyable {}
extension Candle.Operations.GetLinkedAccountsFiatAccounts.Output.Ok.Headers.ContentEncodingPayload : Swift.RawRepresentable {}
extension Candle.Operations.GetLinkedAccountsFiatAccounts.Output.Ok.Headers.ContentEncodingPayload : Swift.BitwiseCopyable {}
extension Candle.Operations.GetLinkedAccountsFiatAccounts.Output.Unauthorized.Headers.ContentTypePayload : Swift.RawRepresentable {}
extension Candle.Operations.GetLinkedAccountsFiatAccounts.Output.Unauthorized.Headers.ContentTypePayload : Swift.BitwiseCopyable {}
extension Candle.Operations.GetLinkedAccountsFiatAccounts.Output.Unauthorized.Body.JsonPayload.KindPayload : Swift.RawRepresentable {}
extension Candle.Operations.GetLinkedAccountsFiatAccounts.Output.Unauthorized.Body.JsonPayload.KindPayload : Swift.BitwiseCopyable {}
extension Candle.Operations.GetLinkedAccountsFiatAccounts.Output.Unauthorized.Body.JsonPayload.CodingKeys : Swift.Equatable {}
extension Candle.Operations.GetLinkedAccountsFiatAccounts.Output.Unauthorized.Body.JsonPayload.CodingKeys : Swift.Hashable {}
extension Candle.Operations.GetLinkedAccountsFiatAccounts.Output.Unauthorized.Body.JsonPayload.CodingKeys : Swift.RawRepresentable {}
extension Candle.Operations.GetLinkedAccountsFiatAccounts.Output.NotFound.Headers.ContentTypePayload : Swift.RawRepresentable {}
extension Candle.Operations.GetLinkedAccountsFiatAccounts.Output.NotFound.Headers.ContentTypePayload : Swift.BitwiseCopyable {}
extension Candle.Operations.GetLinkedAccountsFiatAccounts.Output.NotFound.Body.JsonPayload.KindPayload : Swift.RawRepresentable {}
extension Candle.Operations.GetLinkedAccountsFiatAccounts.Output.NotFound.Body.JsonPayload.KindPayload : Swift.BitwiseCopyable {}
extension Candle.Operations.GetLinkedAccountsFiatAccounts.Output.NotFound.Body.JsonPayload.CodingKeys : Swift.Equatable {}
extension Candle.Operations.GetLinkedAccountsFiatAccounts.Output.NotFound.Body.JsonPayload.CodingKeys : Swift.Hashable {}
extension Candle.Operations.GetLinkedAccountsFiatAccounts.Output.NotFound.Body.JsonPayload.CodingKeys : Swift.RawRepresentable {}
extension Candle.Operations.GetLinkedAccountsFiatAccounts.Output.UnprocessableContent.Headers.ContentTypePayload : Swift.RawRepresentable {}
extension Candle.Operations.GetLinkedAccountsFiatAccounts.Output.UnprocessableContent.Headers.ContentTypePayload : Swift.BitwiseCopyable {}
extension Candle.Operations.GetLinkedAccountsFiatAccounts.Output.UnprocessableContent.Body.JsonPayload.KindPayload : Swift.RawRepresentable {}
extension Candle.Operations.GetLinkedAccountsFiatAccounts.Output.UnprocessableContent.Body.JsonPayload.KindPayload : Swift.BitwiseCopyable {}
extension Candle.Operations.GetLinkedAccountsFiatAccounts.Output.UnprocessableContent.Body.JsonPayload.CodingKeys : Swift.Equatable {}
extension Candle.Operations.GetLinkedAccountsFiatAccounts.Output.UnprocessableContent.Body.JsonPayload.CodingKeys : Swift.Hashable {}
extension Candle.Operations.GetLinkedAccountsFiatAccounts.Output.UnprocessableContent.Body.JsonPayload.CodingKeys : Swift.RawRepresentable {}
extension Candle.Operations.GetLinkedAccountsFiatAccounts.Output.InternalServerError.Headers.ContentTypePayload : Swift.RawRepresentable {}
extension Candle.Operations.GetLinkedAccountsFiatAccounts.Output.InternalServerError.Headers.ContentTypePayload : Swift.BitwiseCopyable {}
extension Candle.Operations.GetLinkedAccountsFiatAccounts.Output.InternalServerError.Body.JsonPayload.KindPayload : Swift.RawRepresentable {}
extension Candle.Operations.GetLinkedAccountsFiatAccounts.Output.InternalServerError.Body.JsonPayload.KindPayload : Swift.BitwiseCopyable {}
extension Candle.Operations.GetLinkedAccountsFiatAccounts.Output.InternalServerError.Body.JsonPayload.CodingKeys : Swift.Equatable {}
extension Candle.Operations.GetLinkedAccountsFiatAccounts.Output.InternalServerError.Body.JsonPayload.CodingKeys : Swift.Hashable {}
extension Candle.Operations.GetLinkedAccountsFiatAccounts.Output.InternalServerError.Body.JsonPayload.CodingKeys : Swift.RawRepresentable {}
extension Candle.Operations.GetLinkedAccountsActivity.Output.Ok.Headers.ContentTypePayload : Swift.RawRepresentable {}
extension Candle.Operations.GetLinkedAccountsActivity.Output.Ok.Headers.ContentTypePayload : Swift.BitwiseCopyable {}
extension Candle.Operations.GetLinkedAccountsActivity.Output.Ok.Headers.ContentEncodingPayload : Swift.RawRepresentable {}
extension Candle.Operations.GetLinkedAccountsActivity.Output.Ok.Headers.ContentEncodingPayload : Swift.BitwiseCopyable {}
extension Candle.Operations.GetLinkedAccountsActivity.Output.Unauthorized.Headers.ContentTypePayload : Swift.RawRepresentable {}
extension Candle.Operations.GetLinkedAccountsActivity.Output.Unauthorized.Headers.ContentTypePayload : Swift.BitwiseCopyable {}
extension Candle.Operations.GetLinkedAccountsActivity.Output.Unauthorized.Body.JsonPayload.KindPayload : Swift.RawRepresentable {}
extension Candle.Operations.GetLinkedAccountsActivity.Output.Unauthorized.Body.JsonPayload.KindPayload : Swift.BitwiseCopyable {}
extension Candle.Operations.GetLinkedAccountsActivity.Output.Unauthorized.Body.JsonPayload.CodingKeys : Swift.Equatable {}
extension Candle.Operations.GetLinkedAccountsActivity.Output.Unauthorized.Body.JsonPayload.CodingKeys : Swift.Hashable {}
extension Candle.Operations.GetLinkedAccountsActivity.Output.Unauthorized.Body.JsonPayload.CodingKeys : Swift.RawRepresentable {}
extension Candle.Operations.GetLinkedAccountsActivity.Output.NotFound.Headers.ContentTypePayload : Swift.RawRepresentable {}
extension Candle.Operations.GetLinkedAccountsActivity.Output.NotFound.Headers.ContentTypePayload : Swift.BitwiseCopyable {}
extension Candle.Operations.GetLinkedAccountsActivity.Output.NotFound.Body.JsonPayload.KindPayload : Swift.RawRepresentable {}
extension Candle.Operations.GetLinkedAccountsActivity.Output.NotFound.Body.JsonPayload.KindPayload : Swift.BitwiseCopyable {}
extension Candle.Operations.GetLinkedAccountsActivity.Output.NotFound.Body.JsonPayload.CodingKeys : Swift.Equatable {}
extension Candle.Operations.GetLinkedAccountsActivity.Output.NotFound.Body.JsonPayload.CodingKeys : Swift.Hashable {}
extension Candle.Operations.GetLinkedAccountsActivity.Output.NotFound.Body.JsonPayload.CodingKeys : Swift.RawRepresentable {}
extension Candle.Operations.GetLinkedAccountsActivity.Output.UnprocessableContent.Headers.ContentTypePayload : Swift.RawRepresentable {}
extension Candle.Operations.GetLinkedAccountsActivity.Output.UnprocessableContent.Headers.ContentTypePayload : Swift.BitwiseCopyable {}
extension Candle.Operations.GetLinkedAccountsActivity.Output.UnprocessableContent.Body.JsonPayload.KindPayload : Swift.RawRepresentable {}
extension Candle.Operations.GetLinkedAccountsActivity.Output.UnprocessableContent.Body.JsonPayload.KindPayload : Swift.BitwiseCopyable {}
extension Candle.Operations.GetLinkedAccountsActivity.Output.UnprocessableContent.Body.JsonPayload.CodingKeys : Swift.Equatable {}
extension Candle.Operations.GetLinkedAccountsActivity.Output.UnprocessableContent.Body.JsonPayload.CodingKeys : Swift.Hashable {}
extension Candle.Operations.GetLinkedAccountsActivity.Output.UnprocessableContent.Body.JsonPayload.CodingKeys : Swift.RawRepresentable {}
extension Candle.Operations.GetLinkedAccountsActivity.Output.InternalServerError.Headers.ContentTypePayload : Swift.RawRepresentable {}
extension Candle.Operations.GetLinkedAccountsActivity.Output.InternalServerError.Headers.ContentTypePayload : Swift.BitwiseCopyable {}
extension Candle.Operations.GetLinkedAccountsActivity.Output.InternalServerError.Body.JsonPayload.KindPayload : Swift.RawRepresentable {}
extension Candle.Operations.GetLinkedAccountsActivity.Output.InternalServerError.Body.JsonPayload.KindPayload : Swift.BitwiseCopyable {}
extension Candle.Operations.GetLinkedAccountsActivity.Output.InternalServerError.Body.JsonPayload.CodingKeys : Swift.Equatable {}
extension Candle.Operations.GetLinkedAccountsActivity.Output.InternalServerError.Body.JsonPayload.CodingKeys : Swift.Hashable {}
extension Candle.Operations.GetLinkedAccountsActivity.Output.InternalServerError.Body.JsonPayload.CodingKeys : Swift.RawRepresentable {}
extension Candle.ConnectionResult : Swift.Equatable {}
extension Candle.ConnectionResult : Swift.Hashable {}
@available(macOS 14, iOS 17.0, *)
extension Candle.PresentationStyle : Swift.Equatable {}
@available(macOS 14, iOS 17.0, *)
extension Candle.PresentationStyle : Swift.Hashable {}
